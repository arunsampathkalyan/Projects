//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace STC.Projects.WCF.ServiceLayer.PCAServices {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SESSION", Namespace="http://schemas.datacontract.org/2004/07/PCALIB")]
    [System.SerializableAttribute()]
    public partial struct SESSION : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string timeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string id {
            get {
                return this.idField;
            }
            set {
                if ((object.ReferenceEquals(this.idField, value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string time {
            get {
                return this.timeField;
            }
            set {
                if ((object.ReferenceEquals(this.timeField, value) != true)) {
                    this.timeField = value;
                    this.RaisePropertyChanged("time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NODE", Namespace="http://schemas.datacontract.org/2004/07/PCALIB")]
    [System.SerializableAttribute()]
    public partial struct NODE : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] DField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double YField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string idField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] D {
            get {
                return this.DField;
            }
            set {
                if ((object.ReferenceEquals(this.DField, value) != true)) {
                    this.DField = value;
                    this.RaisePropertyChanged("D");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double P {
            get {
                return this.PField;
            }
            set {
                if ((this.PField.Equals(value) != true)) {
                    this.PField = value;
                    this.RaisePropertyChanged("P");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string id {
            get {
                return this.idField;
            }
            set {
                if ((object.ReferenceEquals(this.idField, value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CAR", Namespace="http://schemas.datacontract.org/2004/07/PCALIB")]
    [System.SerializableAttribute()]
    public partial struct CAR : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long TNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TmField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double YField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string idField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int N {
            get {
                return this.NField;
            }
            set {
                if ((this.NField.Equals(value) != true)) {
                    this.NField = value;
                    this.RaisePropertyChanged("N");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int S {
            get {
                return this.SField;
            }
            set {
                if ((this.SField.Equals(value) != true)) {
                    this.SField = value;
                    this.RaisePropertyChanged("S");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TN {
            get {
                return this.TNField;
            }
            set {
                if ((this.TNField.Equals(value) != true)) {
                    this.TNField = value;
                    this.RaisePropertyChanged("TN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Ta {
            get {
                return this.TaField;
            }
            set {
                if ((this.TaField.Equals(value) != true)) {
                    this.TaField = value;
                    this.RaisePropertyChanged("Ta");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Tm {
            get {
                return this.TmField;
            }
            set {
                if ((this.TmField.Equals(value) != true)) {
                    this.TmField = value;
                    this.RaisePropertyChanged("Tm");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string id {
            get {
                return this.idField;
            }
            set {
                if ((object.ReferenceEquals(this.idField, value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PCAServices.IPCAService")]
    public interface IPCAService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/newSession", ReplyAction="http://tempuri.org/IPCAService/newSessionResponse")]
        int newSession(string id, bool bLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/newSession", ReplyAction="http://tempuri.org/IPCAService/newSessionResponse")]
        System.Threading.Tasks.Task<int> newSessionAsync(string id, bool bLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/dropSession", ReplyAction="http://tempuri.org/IPCAService/dropSessionResponse")]
        bool dropSession(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/dropSession", ReplyAction="http://tempuri.org/IPCAService/dropSessionResponse")]
        System.Threading.Tasks.Task<bool> dropSessionAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/listSessions", ReplyAction="http://tempuri.org/IPCAService/listSessionsResponse")]
        STC.Projects.WCF.ServiceLayer.PCAServices.SESSION[] listSessions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/listSessions", ReplyAction="http://tempuri.org/IPCAService/listSessionsResponse")]
        System.Threading.Tasks.Task<STC.Projects.WCF.ServiceLayer.PCAServices.SESSION[]> listSessionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/parseNodes", ReplyAction="http://tempuri.org/IPCAService/parseNodesResponse")]
        bool parseNodes(string id, string strXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/parseNodes", ReplyAction="http://tempuri.org/IPCAService/parseNodesResponse")]
        System.Threading.Tasks.Task<bool> parseNodesAsync(string id, string strXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/parseCars", ReplyAction="http://tempuri.org/IPCAService/parseCarsResponse")]
        bool parseCars(string id, string strXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/parseCars", ReplyAction="http://tempuri.org/IPCAService/parseCarsResponse")]
        System.Threading.Tasks.Task<bool> parseCarsAsync(string id, string strXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/doIterate", ReplyAction="http://tempuri.org/IPCAService/doIterateResponse")]
        bool doIterate(string id, int M, int L);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/doIterate", ReplyAction="http://tempuri.org/IPCAService/doIterateResponse")]
        System.Threading.Tasks.Task<bool> doIterateAsync(string id, int M, int L);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/recommendCar", ReplyAction="http://tempuri.org/IPCAService/recommendCarResponse")]
        string recommendCar(string id, double X, double Y, double E);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/recommendCar", ReplyAction="http://tempuri.org/IPCAService/recommendCarResponse")]
        System.Threading.Tasks.Task<string> recommendCarAsync(string id, double X, double Y, double E);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/getETA", ReplyAction="http://tempuri.org/IPCAService/getETAResponse")]
        double getETA(string id, double X, double Y, string carID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/getETA", ReplyAction="http://tempuri.org/IPCAService/getETAResponse")]
        System.Threading.Tasks.Task<double> getETAAsync(string id, double X, double Y, string carID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/getRevisedETAs", ReplyAction="http://tempuri.org/IPCAService/getRevisedETAsResponse")]
        double[] getRevisedETAs(string id, string carID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/getRevisedETAs", ReplyAction="http://tempuri.org/IPCAService/getRevisedETAsResponse")]
        System.Threading.Tasks.Task<double[]> getRevisedETAsAsync(string id, string carID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/getFrequencies", ReplyAction="http://tempuri.org/IPCAService/getFrequenciesResponse")]
        double[] getFrequencies(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/getFrequencies", ReplyAction="http://tempuri.org/IPCAService/getFrequenciesResponse")]
        System.Threading.Tasks.Task<double[]> getFrequenciesAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/getLocations", ReplyAction="http://tempuri.org/IPCAService/getLocationsResponse")]
        string[] getLocations(string id, bool bMax);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/getLocations", ReplyAction="http://tempuri.org/IPCAService/getLocationsResponse")]
        System.Threading.Tasks.Task<string[]> getLocationsAsync(string id, bool bMax);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/getLocTimes", ReplyAction="http://tempuri.org/IPCAService/getLocTimesResponse")]
        double[] getLocTimes(string id, bool bMax);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/getLocTimes", ReplyAction="http://tempuri.org/IPCAService/getLocTimesResponse")]
        System.Threading.Tasks.Task<double[]> getLocTimesAsync(string id, bool bMax);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/getNearestNodeID", ReplyAction="http://tempuri.org/IPCAService/getNearestNodeIDResponse")]
        string getNearestNodeID(string id, double X, double Y, bool bFrom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/getNearestNodeID", ReplyAction="http://tempuri.org/IPCAService/getNearestNodeIDResponse")]
        System.Threading.Tasks.Task<string> getNearestNodeIDAsync(string id, double X, double Y, bool bFrom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/getNodes", ReplyAction="http://tempuri.org/IPCAService/getNodesResponse")]
        STC.Projects.WCF.ServiceLayer.PCAServices.NODE[] getNodes(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/getNodes", ReplyAction="http://tempuri.org/IPCAService/getNodesResponse")]
        System.Threading.Tasks.Task<STC.Projects.WCF.ServiceLayer.PCAServices.NODE[]> getNodesAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/getCars", ReplyAction="http://tempuri.org/IPCAService/getCarsResponse")]
        STC.Projects.WCF.ServiceLayer.PCAServices.CAR[] getCars(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/getCars", ReplyAction="http://tempuri.org/IPCAService/getCarsResponse")]
        System.Threading.Tasks.Task<STC.Projects.WCF.ServiceLayer.PCAServices.CAR[]> getCarsAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/getVersion", ReplyAction="http://tempuri.org/IPCAService/getVersionResponse")]
        string getVersion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPCAService/getVersion", ReplyAction="http://tempuri.org/IPCAService/getVersionResponse")]
        System.Threading.Tasks.Task<string> getVersionAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPCAServiceChannel : STC.Projects.WCF.ServiceLayer.PCAServices.IPCAService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PCAServiceClient : System.ServiceModel.ClientBase<STC.Projects.WCF.ServiceLayer.PCAServices.IPCAService>, STC.Projects.WCF.ServiceLayer.PCAServices.IPCAService {
        
        public PCAServiceClient() {
        }
        
        public PCAServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PCAServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PCAServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PCAServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int newSession(string id, bool bLog) {
            return base.Channel.newSession(id, bLog);
        }
        
        public System.Threading.Tasks.Task<int> newSessionAsync(string id, bool bLog) {
            return base.Channel.newSessionAsync(id, bLog);
        }
        
        public bool dropSession(string id) {
            return base.Channel.dropSession(id);
        }
        
        public System.Threading.Tasks.Task<bool> dropSessionAsync(string id) {
            return base.Channel.dropSessionAsync(id);
        }
        
        public STC.Projects.WCF.ServiceLayer.PCAServices.SESSION[] listSessions() {
            return base.Channel.listSessions();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WCF.ServiceLayer.PCAServices.SESSION[]> listSessionsAsync() {
            return base.Channel.listSessionsAsync();
        }
        
        public bool parseNodes(string id, string strXML) {
            return base.Channel.parseNodes(id, strXML);
        }
        
        public System.Threading.Tasks.Task<bool> parseNodesAsync(string id, string strXML) {
            return base.Channel.parseNodesAsync(id, strXML);
        }
        
        public bool parseCars(string id, string strXML) {
            return base.Channel.parseCars(id, strXML);
        }
        
        public System.Threading.Tasks.Task<bool> parseCarsAsync(string id, string strXML) {
            return base.Channel.parseCarsAsync(id, strXML);
        }
        
        public bool doIterate(string id, int M, int L) {
            return base.Channel.doIterate(id, M, L);
        }
        
        public System.Threading.Tasks.Task<bool> doIterateAsync(string id, int M, int L) {
            return base.Channel.doIterateAsync(id, M, L);
        }
        
        public string recommendCar(string id, double X, double Y, double E) {
            return base.Channel.recommendCar(id, X, Y, E);
        }
        
        public System.Threading.Tasks.Task<string> recommendCarAsync(string id, double X, double Y, double E) {
            return base.Channel.recommendCarAsync(id, X, Y, E);
        }
        
        public double getETA(string id, double X, double Y, string carID) {
            return base.Channel.getETA(id, X, Y, carID);
        }
        
        public System.Threading.Tasks.Task<double> getETAAsync(string id, double X, double Y, string carID) {
            return base.Channel.getETAAsync(id, X, Y, carID);
        }
        
        public double[] getRevisedETAs(string id, string carID) {
            return base.Channel.getRevisedETAs(id, carID);
        }
        
        public System.Threading.Tasks.Task<double[]> getRevisedETAsAsync(string id, string carID) {
            return base.Channel.getRevisedETAsAsync(id, carID);
        }
        
        public double[] getFrequencies(string id) {
            return base.Channel.getFrequencies(id);
        }
        
        public System.Threading.Tasks.Task<double[]> getFrequenciesAsync(string id) {
            return base.Channel.getFrequenciesAsync(id);
        }
        
        public string[] getLocations(string id, bool bMax) {
            return base.Channel.getLocations(id, bMax);
        }
        
        public System.Threading.Tasks.Task<string[]> getLocationsAsync(string id, bool bMax) {
            return base.Channel.getLocationsAsync(id, bMax);
        }
        
        public double[] getLocTimes(string id, bool bMax) {
            return base.Channel.getLocTimes(id, bMax);
        }
        
        public System.Threading.Tasks.Task<double[]> getLocTimesAsync(string id, bool bMax) {
            return base.Channel.getLocTimesAsync(id, bMax);
        }
        
        public string getNearestNodeID(string id, double X, double Y, bool bFrom) {
            return base.Channel.getNearestNodeID(id, X, Y, bFrom);
        }
        
        public System.Threading.Tasks.Task<string> getNearestNodeIDAsync(string id, double X, double Y, bool bFrom) {
            return base.Channel.getNearestNodeIDAsync(id, X, Y, bFrom);
        }
        
        public STC.Projects.WCF.ServiceLayer.PCAServices.NODE[] getNodes(string id) {
            return base.Channel.getNodes(id);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WCF.ServiceLayer.PCAServices.NODE[]> getNodesAsync(string id) {
            return base.Channel.getNodesAsync(id);
        }
        
        public STC.Projects.WCF.ServiceLayer.PCAServices.CAR[] getCars(string id) {
            return base.Channel.getCars(id);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WCF.ServiceLayer.PCAServices.CAR[]> getCarsAsync(string id) {
            return base.Channel.getCarsAsync(id);
        }
        
        public string getVersion() {
            return base.Channel.getVersion();
        }
        
        public System.Threading.Tasks.Task<string> getVersionAsync() {
            return base.Channel.getVersionAsync();
        }
    }
}
