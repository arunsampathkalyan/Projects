//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace STC.Projects.WPFControlLibrary.MapControl.SmartOfficerServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SmartOfficerServiceReference.ISmartOfficerLayer")]
    public interface ISmartOfficerLayer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartOfficerLayer/UpdateOfficerLocation", ReplyAction="http://tempuri.org/ISmartOfficerLayer/UpdateOfficerLocationResponse")]
        bool UpdateOfficerLocation(string officerCode, double lat, double lon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartOfficerLayer/UpdateOfficerLocation", ReplyAction="http://tempuri.org/ISmartOfficerLayer/UpdateOfficerLocationResponse")]
        System.Threading.Tasks.Task<bool> UpdateOfficerLocationAsync(string officerCode, double lat, double lon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartOfficerLayer/AddNewOfficer", ReplyAction="http://tempuri.org/ISmartOfficerLayer/AddNewOfficerResponse")]
        bool AddNewOfficer(string militaryId, string officerPatrolCode, string officerName, string image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartOfficerLayer/AddNewOfficer", ReplyAction="http://tempuri.org/ISmartOfficerLayer/AddNewOfficerResponse")]
        System.Threading.Tasks.Task<bool> AddNewOfficerAsync(string militaryId, string officerPatrolCode, string officerName, string image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartOfficerLayer/GetAvailablePatrolPlateNumbers", ReplyAction="http://tempuri.org/ISmartOfficerLayer/GetAvailablePatrolPlateNumbersResponse")]
        string[] GetAvailablePatrolPlateNumbers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartOfficerLayer/GetAvailablePatrolPlateNumbers", ReplyAction="http://tempuri.org/ISmartOfficerLayer/GetAvailablePatrolPlateNumbersResponse")]
        System.Threading.Tasks.Task<string[]> GetAvailablePatrolPlateNumbersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartOfficerLayer/GetOfficer", ReplyAction="http://tempuri.org/ISmartOfficerLayer/GetOfficerResponse")]
        STC.Projects.ClassLibrary.DTO.SmartOfficerDTO GetOfficer(string militaryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartOfficerLayer/GetOfficer", ReplyAction="http://tempuri.org/ISmartOfficerLayer/GetOfficerResponse")]
        System.Threading.Tasks.Task<STC.Projects.ClassLibrary.DTO.SmartOfficerDTO> GetOfficerAsync(string militaryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartOfficerLayer/AddTask", ReplyAction="http://tempuri.org/ISmartOfficerLayer/AddTaskResponse")]
        bool AddTask(STC.Projects.ClassLibrary.DTO.OfficerTaskDTO task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartOfficerLayer/AddTask", ReplyAction="http://tempuri.org/ISmartOfficerLayer/AddTaskResponse")]
        System.Threading.Tasks.Task<bool> AddTaskAsync(STC.Projects.ClassLibrary.DTO.OfficerTaskDTO task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartOfficerLayer/ChangeTaskStatus", ReplyAction="http://tempuri.org/ISmartOfficerLayer/ChangeTaskStatusResponse")]
        bool ChangeTaskStatus(long taskId, int status, string notes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartOfficerLayer/ChangeTaskStatus", ReplyAction="http://tempuri.org/ISmartOfficerLayer/ChangeTaskStatusResponse")]
        System.Threading.Tasks.Task<bool> ChangeTaskStatusAsync(long taskId, int status, string notes);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISmartOfficerLayerChannel : STC.Projects.WPFControlLibrary.MapControl.SmartOfficerServiceReference.ISmartOfficerLayer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SmartOfficerLayerClient : System.ServiceModel.ClientBase<STC.Projects.WPFControlLibrary.MapControl.SmartOfficerServiceReference.ISmartOfficerLayer>, STC.Projects.WPFControlLibrary.MapControl.SmartOfficerServiceReference.ISmartOfficerLayer {
        
        public SmartOfficerLayerClient() {
        }
        
        public SmartOfficerLayerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SmartOfficerLayerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SmartOfficerLayerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SmartOfficerLayerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool UpdateOfficerLocation(string officerCode, double lat, double lon) {
            return base.Channel.UpdateOfficerLocation(officerCode, lat, lon);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateOfficerLocationAsync(string officerCode, double lat, double lon) {
            return base.Channel.UpdateOfficerLocationAsync(officerCode, lat, lon);
        }
        
        public bool AddNewOfficer(string militaryId, string officerPatrolCode, string officerName, string image) {
            return base.Channel.AddNewOfficer(militaryId, officerPatrolCode, officerName, image);
        }
        
        public System.Threading.Tasks.Task<bool> AddNewOfficerAsync(string militaryId, string officerPatrolCode, string officerName, string image) {
            return base.Channel.AddNewOfficerAsync(militaryId, officerPatrolCode, officerName, image);
        }
        
        public string[] GetAvailablePatrolPlateNumbers() {
            return base.Channel.GetAvailablePatrolPlateNumbers();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAvailablePatrolPlateNumbersAsync() {
            return base.Channel.GetAvailablePatrolPlateNumbersAsync();
        }
        
        public STC.Projects.ClassLibrary.DTO.SmartOfficerDTO GetOfficer(string militaryId) {
            return base.Channel.GetOfficer(militaryId);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.ClassLibrary.DTO.SmartOfficerDTO> GetOfficerAsync(string militaryId) {
            return base.Channel.GetOfficerAsync(militaryId);
        }
        
        public bool AddTask(STC.Projects.ClassLibrary.DTO.OfficerTaskDTO task) {
            return base.Channel.AddTask(task);
        }
        
        public System.Threading.Tasks.Task<bool> AddTaskAsync(STC.Projects.ClassLibrary.DTO.OfficerTaskDTO task) {
            return base.Channel.AddTaskAsync(task);
        }
        
        public bool ChangeTaskStatus(long taskId, int status, string notes) {
            return base.Channel.ChangeTaskStatus(taskId, status, notes);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeTaskStatusAsync(long taskId, int status, string notes) {
            return base.Channel.ChangeTaskStatusAsync(taskId, status, notes);
        }
    }
}
