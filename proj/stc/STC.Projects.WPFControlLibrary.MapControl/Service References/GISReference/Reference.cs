//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace STC.Projects.WPFControlLibrary.MapControl.GISReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GraphicDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.WCF.ServiceLayer")]
    [System.SerializableAttribute()]
    public partial class GraphicDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string polygonObjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string symbolObjectField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string polygonObject {
            get {
                return this.polygonObjectField;
            }
            set {
                if ((object.ReferenceEquals(this.polygonObjectField, value) != true)) {
                    this.polygonObjectField = value;
                    this.RaisePropertyChanged("polygonObject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string symbolObject {
            get {
                return this.symbolObjectField;
            }
            set {
                if ((object.ReferenceEquals(this.symbolObjectField, value) != true)) {
                    this.symbolObjectField = value;
                    this.RaisePropertyChanged("symbolObject");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GISReference.IGisService")]
    public interface IGisService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGisService/GetAssets", ReplyAction="http://tempuri.org/IGisService/GetAssetsResponse")]
        STC.Projects.ClassLibrary.DTO.AssetsDetailsViewDTO[] GetAssets(STC.Projects.ClassLibrary.DTO.MapPointDTO[] mapPoints);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGisService/GetAssets", ReplyAction="http://tempuri.org/IGisService/GetAssetsResponse")]
        System.Threading.Tasks.Task<STC.Projects.ClassLibrary.DTO.AssetsDetailsViewDTO[]> GetAssetsAsync(STC.Projects.ClassLibrary.DTO.MapPointDTO[] mapPoints);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGisService/GetDriveTimePolygons", ReplyAction="http://tempuri.org/IGisService/GetDriveTimePolygonsResponse")]
        STC.Projects.WPFControlLibrary.MapControl.GISReference.GraphicDTO[] GetDriveTimePolygons(STC.Projects.ClassLibrary.DTO.MapPointDTO point);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGisService/GetDriveTimePolygons", ReplyAction="http://tempuri.org/IGisService/GetDriveTimePolygonsResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.GISReference.GraphicDTO[]> GetDriveTimePolygonsAsync(STC.Projects.ClassLibrary.DTO.MapPointDTO point);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGisServiceChannel : STC.Projects.WPFControlLibrary.MapControl.GISReference.IGisService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GisServiceClient : System.ServiceModel.ClientBase<STC.Projects.WPFControlLibrary.MapControl.GISReference.IGisService>, STC.Projects.WPFControlLibrary.MapControl.GISReference.IGisService {
        
        public GisServiceClient() {
        }
        
        public GisServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GisServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GisServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GisServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public STC.Projects.ClassLibrary.DTO.AssetsDetailsViewDTO[] GetAssets(STC.Projects.ClassLibrary.DTO.MapPointDTO[] mapPoints) {
            return base.Channel.GetAssets(mapPoints);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.ClassLibrary.DTO.AssetsDetailsViewDTO[]> GetAssetsAsync(STC.Projects.ClassLibrary.DTO.MapPointDTO[] mapPoints) {
            return base.Channel.GetAssetsAsync(mapPoints);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.GISReference.GraphicDTO[] GetDriveTimePolygons(STC.Projects.ClassLibrary.DTO.MapPointDTO point) {
            return base.Channel.GetDriveTimePolygons(point);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.GISReference.GraphicDTO[]> GetDriveTimePolygonsAsync(STC.Projects.ClassLibrary.DTO.MapPointDTO point) {
            return base.Channel.GetDriveTimePolygonsAsync(point);
        }
    }
}
