//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CubeDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class CubeDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDetailsDTO[] DetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.Brush LegendColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LegendNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDetailsDTO[] LineDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeFacts[] StatisticalAnalysisField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDetailsDTO[] Details {
            get {
                return this.DetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailsField, value) != true)) {
                    this.DetailsField = value;
                    this.RaisePropertyChanged("Details");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.Brush LegendColor {
            get {
                return this.LegendColorField;
            }
            set {
                if ((object.ReferenceEquals(this.LegendColorField, value) != true)) {
                    this.LegendColorField = value;
                    this.RaisePropertyChanged("LegendColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LegendName {
            get {
                return this.LegendNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LegendNameField, value) != true)) {
                    this.LegendNameField = value;
                    this.RaisePropertyChanged("LegendName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDetailsDTO[] LineDetails {
            get {
                return this.LineDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.LineDetailsField, value) != true)) {
                    this.LineDetailsField = value;
                    this.RaisePropertyChanged("LineDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeFacts[] StatisticalAnalysis {
            get {
                return this.StatisticalAnalysisField;
            }
            set {
                if ((object.ReferenceEquals(this.StatisticalAnalysisField, value) != true)) {
                    this.StatisticalAnalysisField = value;
                    this.RaisePropertyChanged("StatisticalAnalysis");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Brush", Namespace="http://schemas.datacontract.org/2004/07/System.Windows.Media")]
    [System.SerializableAttribute()]
    public partial class Brush : STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.Animatable {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double OpacityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.Transform RelativeTransformField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.Transform TransformField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Opacity {
            get {
                return this.OpacityField;
            }
            set {
                if ((this.OpacityField.Equals(value) != true)) {
                    this.OpacityField = value;
                    this.RaisePropertyChanged("Opacity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.Transform RelativeTransform {
            get {
                return this.RelativeTransformField;
            }
            set {
                if ((object.ReferenceEquals(this.RelativeTransformField, value) != true)) {
                    this.RelativeTransformField = value;
                    this.RaisePropertyChanged("RelativeTransform");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.Transform Transform {
            get {
                return this.TransformField;
            }
            set {
                if ((object.ReferenceEquals(this.TransformField, value) != true)) {
                    this.TransformField = value;
                    this.RaisePropertyChanged("Transform");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CubeDetailsDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class CubeDetailsDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrientationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PercentageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TargetValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Orientation {
            get {
                return this.OrientationField;
            }
            set {
                if ((object.ReferenceEquals(this.OrientationField, value) != true)) {
                    this.OrientationField = value;
                    this.RaisePropertyChanged("Orientation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Percentage {
            get {
                return this.PercentageField;
            }
            set {
                if ((object.ReferenceEquals(this.PercentageField, value) != true)) {
                    this.PercentageField = value;
                    this.RaisePropertyChanged("Percentage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TargetValue {
            get {
                return this.TargetValueField;
            }
            set {
                if ((this.TargetValueField.Equals(value) != true)) {
                    this.TargetValueField = value;
                    this.RaisePropertyChanged("TargetValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CubeFacts", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class CubeFacts : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FactColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FactKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FactValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FactColor {
            get {
                return this.FactColorField;
            }
            set {
                if ((object.ReferenceEquals(this.FactColorField, value) != true)) {
                    this.FactColorField = value;
                    this.RaisePropertyChanged("FactColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FactKey {
            get {
                return this.FactKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.FactKeyField, value) != true)) {
                    this.FactKeyField = value;
                    this.RaisePropertyChanged("FactKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FactValue {
            get {
                return this.FactValueField;
            }
            set {
                if ((object.ReferenceEquals(this.FactValueField, value) != true)) {
                    this.FactValueField = value;
                    this.RaisePropertyChanged("FactValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DispatcherObject", Namespace="http://schemas.datacontract.org/2004/07/System.Windows.Threading")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.DependencyObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.Freezable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.Animatable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.GeneralTransform))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.Transform))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.Brush))]
    public partial class DispatcherObject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DependencyObject", Namespace="http://schemas.datacontract.org/2004/07/System.Windows")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.Freezable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.Animatable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.GeneralTransform))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.Transform))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.Brush))]
    public partial class DependencyObject : STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.DispatcherObject {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Freezable", Namespace="http://schemas.datacontract.org/2004/07/System.Windows")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.Animatable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.GeneralTransform))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.Transform))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.Brush))]
    public partial class Freezable : STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.DependencyObject {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Animatable", Namespace="http://schemas.datacontract.org/2004/07/System.Windows.Media.Animation")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.GeneralTransform))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.Transform))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.Brush))]
    public partial class Animatable : STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.Freezable {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GeneralTransform", Namespace="http://schemas.datacontract.org/2004/07/System.Windows.Media")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.Transform))]
    public partial class GeneralTransform : STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.Animatable {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Transform", Namespace="http://schemas.datacontract.org/2004/07/System.Windows.Media")]
    [System.SerializableAttribute()]
    public partial class Transform : STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.GeneralTransform {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MonthOfYear", Namespace="http://schemas.datacontract.org/2004/07/")]
    public enum MonthOfYear : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        January = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        February = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        March = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        April = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        May = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        June = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        July = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        August = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        September = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        October = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        November = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        December = 12,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PeriodType", Namespace="http://schemas.datacontract.org/2004/07/")]
    public enum PeriodType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Daily = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Weekly = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Monthly = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ViolationsCountForMapDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class ViolationsCountForMapDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsGroupedByLocationsDTO[] AssetDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateElementField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsGroupedByLocationsDTO[] AssetDetails {
            get {
                return this.AssetDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.AssetDetailsField, value) != true)) {
                    this.AssetDetailsField = value;
                    this.RaisePropertyChanged("AssetDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DateElement {
            get {
                return this.DateElementField;
            }
            set {
                if ((object.ReferenceEquals(this.DateElementField, value) != true)) {
                    this.DateElementField = value;
                    this.RaisePropertyChanged("DateElement");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ViolationsGroupedByLocationsDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class ViolationsGroupedByLocationsDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AltitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ViolationsCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Altitude {
            get {
                return this.AltitudeField;
            }
            set {
                if ((this.AltitudeField.Equals(value) != true)) {
                    this.AltitudeField = value;
                    this.RaisePropertyChanged("Altitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LocationCode {
            get {
                return this.LocationCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationCodeField, value) != true)) {
                    this.LocationCodeField = value;
                    this.RaisePropertyChanged("LocationCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ViolationsCount {
            get {
                return this.ViolationsCountField;
            }
            set {
                if ((this.ViolationsCountField.Equals(value) != true)) {
                    this.ViolationsCountField = value;
                    this.RaisePropertyChanged("ViolationsCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UsersDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class UsersDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullNameArField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullNameEnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOwnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RankIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RankNameARField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RankNameENField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UserRolesDTO RoleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullNameAr {
            get {
                return this.FullNameArField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNameArField, value) != true)) {
                    this.FullNameArField = value;
                    this.RaisePropertyChanged("FullNameAr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullNameEn {
            get {
                return this.FullNameEnField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNameEnField, value) != true)) {
                    this.FullNameEnField = value;
                    this.RaisePropertyChanged("FullNameEn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOwner {
            get {
                return this.IsOwnerField;
            }
            set {
                if ((this.IsOwnerField.Equals(value) != true)) {
                    this.IsOwnerField = value;
                    this.RaisePropertyChanged("IsOwner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RankId {
            get {
                return this.RankIdField;
            }
            set {
                if ((this.RankIdField.Equals(value) != true)) {
                    this.RankIdField = value;
                    this.RaisePropertyChanged("RankId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RankNameAR {
            get {
                return this.RankNameARField;
            }
            set {
                if ((object.ReferenceEquals(this.RankNameARField, value) != true)) {
                    this.RankNameARField = value;
                    this.RaisePropertyChanged("RankNameAR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RankNameEN {
            get {
                return this.RankNameENField;
            }
            set {
                if ((object.ReferenceEquals(this.RankNameENField, value) != true)) {
                    this.RankNameENField = value;
                    this.RaisePropertyChanged("RankNameEN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UserRolesDTO Role {
            get {
                return this.RoleField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleField, value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoleId {
            get {
                return this.RoleIdField;
            }
            set {
                if ((this.RoleIdField.Equals(value) != true)) {
                    this.RoleIdField = value;
                    this.RaisePropertyChanged("RoleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserRolesDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class UserRolesDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleDescriptionArField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleDescriptionEnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.FeaturesDTO[] RoleFeaturesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleDescriptionAr {
            get {
                return this.RoleDescriptionArField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleDescriptionArField, value) != true)) {
                    this.RoleDescriptionArField = value;
                    this.RaisePropertyChanged("RoleDescriptionAr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleDescriptionEn {
            get {
                return this.RoleDescriptionEnField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleDescriptionEnField, value) != true)) {
                    this.RoleDescriptionEnField = value;
                    this.RaisePropertyChanged("RoleDescriptionEn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.FeaturesDTO[] RoleFeatures {
            get {
                return this.RoleFeaturesField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleFeaturesField, value) != true)) {
                    this.RoleFeaturesField = value;
                    this.RaisePropertyChanged("RoleFeatures");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoleId {
            get {
                return this.RoleIdField;
            }
            set {
                if ((this.RoleIdField.Equals(value) != true)) {
                    this.RoleIdField = value;
                    this.RaisePropertyChanged("RoleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleName {
            get {
                return this.RoleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleNameField, value) != true)) {
                    this.RoleNameField = value;
                    this.RaisePropertyChanged("RoleName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FeaturesDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class FeaturesDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FeatureIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FeatureNameArField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FeatureNameEnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long PageIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FeatureId {
            get {
                return this.FeatureIdField;
            }
            set {
                if ((this.FeatureIdField.Equals(value) != true)) {
                    this.FeatureIdField = value;
                    this.RaisePropertyChanged("FeatureId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FeatureNameAr {
            get {
                return this.FeatureNameArField;
            }
            set {
                if ((object.ReferenceEquals(this.FeatureNameArField, value) != true)) {
                    this.FeatureNameArField = value;
                    this.RaisePropertyChanged("FeatureNameAr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FeatureNameEn {
            get {
                return this.FeatureNameEnField;
            }
            set {
                if ((object.ReferenceEquals(this.FeatureNameEnField, value) != true)) {
                    this.FeatureNameEnField = value;
                    this.RaisePropertyChanged("FeatureNameEn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long PageId {
            get {
                return this.PageIdField;
            }
            set {
                if ((this.PageIdField.Equals(value) != true)) {
                    this.PageIdField = value;
                    this.RaisePropertyChanged("PageId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RanksDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class RanksDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RankIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RankNameArField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RankNameEnField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RankId {
            get {
                return this.RankIdField;
            }
            set {
                if ((this.RankIdField.Equals(value) != true)) {
                    this.RankIdField = value;
                    this.RaisePropertyChanged("RankId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RankNameAr {
            get {
                return this.RankNameArField;
            }
            set {
                if ((object.ReferenceEquals(this.RankNameArField, value) != true)) {
                    this.RankNameArField = value;
                    this.RaisePropertyChanged("RankNameAr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RankNameEn {
            get {
                return this.RankNameEnField;
            }
            set {
                if ((object.ReferenceEquals(this.RankNameEnField, value) != true)) {
                    this.RankNameEnField = value;
                    this.RaisePropertyChanged("RankNameEn");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PublicUserDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class PublicUserDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BirthdateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] EncPasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdentityNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime IssuedateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NationalityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NotificationTokenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] SaltField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Birthdate {
            get {
                return this.BirthdateField;
            }
            set {
                if ((this.BirthdateField.Equals(value) != true)) {
                    this.BirthdateField = value;
                    this.RaisePropertyChanged("Birthdate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] EncPassword {
            get {
                return this.EncPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.EncPasswordField, value) != true)) {
                    this.EncPasswordField = value;
                    this.RaisePropertyChanged("EncPassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullName {
            get {
                return this.FullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNameField, value) != true)) {
                    this.FullNameField = value;
                    this.RaisePropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IdentityNumber {
            get {
                return this.IdentityNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.IdentityNumberField, value) != true)) {
                    this.IdentityNumberField = value;
                    this.RaisePropertyChanged("IdentityNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageUrl {
            get {
                return this.ImageUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageUrlField, value) != true)) {
                    this.ImageUrlField = value;
                    this.RaisePropertyChanged("ImageUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Issuedate {
            get {
                return this.IssuedateField;
            }
            set {
                if ((this.IssuedateField.Equals(value) != true)) {
                    this.IssuedateField = value;
                    this.RaisePropertyChanged("Issuedate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mail {
            get {
                return this.MailField;
            }
            set {
                if ((object.ReferenceEquals(this.MailField, value) != true)) {
                    this.MailField = value;
                    this.RaisePropertyChanged("Mail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NationalityId {
            get {
                return this.NationalityIdField;
            }
            set {
                if ((this.NationalityIdField.Equals(value) != true)) {
                    this.NationalityIdField = value;
                    this.RaisePropertyChanged("NationalityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NotificationToken {
            get {
                return this.NotificationTokenField;
            }
            set {
                if ((object.ReferenceEquals(this.NotificationTokenField, value) != true)) {
                    this.NotificationTokenField = value;
                    this.RaisePropertyChanged("NotificationToken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Salt {
            get {
                return this.SaltField;
            }
            set {
                if ((object.ReferenceEquals(this.SaltField, value) != true)) {
                    this.SaltField = value;
                    this.RaisePropertyChanged("Salt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SupervisorNotificationDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class SupervisorNotificationDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.SupervisorNotificationReportDangerousDTO DangerousViolatorDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNoticedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime NotificationTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReceiverIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ResponseToIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SenderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.SupervisorNotificationStatus StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SupervisorNoticationIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.SupervisorNotificationReportDangerousDTO DangerousViolatorDetails {
            get {
                return this.DangerousViolatorDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DangerousViolatorDetailsField, value) != true)) {
                    this.DangerousViolatorDetailsField = value;
                    this.RaisePropertyChanged("DangerousViolatorDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNoticed {
            get {
                return this.IsNoticedField;
            }
            set {
                if ((this.IsNoticedField.Equals(value) != true)) {
                    this.IsNoticedField = value;
                    this.RaisePropertyChanged("IsNoticed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime NotificationTime {
            get {
                return this.NotificationTimeField;
            }
            set {
                if ((this.NotificationTimeField.Equals(value) != true)) {
                    this.NotificationTimeField = value;
                    this.RaisePropertyChanged("NotificationTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReceiverId {
            get {
                return this.ReceiverIdField;
            }
            set {
                if ((this.ReceiverIdField.Equals(value) != true)) {
                    this.ReceiverIdField = value;
                    this.RaisePropertyChanged("ReceiverId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ResponseToId {
            get {
                return this.ResponseToIdField;
            }
            set {
                if ((this.ResponseToIdField.Equals(value) != true)) {
                    this.ResponseToIdField = value;
                    this.RaisePropertyChanged("ResponseToId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SenderId {
            get {
                return this.SenderIdField;
            }
            set {
                if ((this.SenderIdField.Equals(value) != true)) {
                    this.SenderIdField = value;
                    this.RaisePropertyChanged("SenderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.SupervisorNotificationStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SupervisorNoticationId {
            get {
                return this.SupervisorNoticationIdField;
            }
            set {
                if ((this.SupervisorNoticationIdField.Equals(value) != true)) {
                    this.SupervisorNoticationIdField = value;
                    this.RaisePropertyChanged("SupervisorNoticationId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SupervisorNotificationReportDangerousDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class SupervisorNotificationReportDangerousDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> BusinessRuleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BusinessRuleNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> LatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> LonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MediaFileFormatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MediaTypes MediaTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MediaURLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NotificationTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateAuthorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateKindField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ReportDangerousIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SupervisorNotificationIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> BusinessRuleId {
            get {
                return this.BusinessRuleIdField;
            }
            set {
                if ((this.BusinessRuleIdField.Equals(value) != true)) {
                    this.BusinessRuleIdField = value;
                    this.RaisePropertyChanged("BusinessRuleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BusinessRuleName {
            get {
                return this.BusinessRuleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BusinessRuleNameField, value) != true)) {
                    this.BusinessRuleNameField = value;
                    this.RaisePropertyChanged("BusinessRuleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Lat {
            get {
                return this.LatField;
            }
            set {
                if ((this.LatField.Equals(value) != true)) {
                    this.LatField = value;
                    this.RaisePropertyChanged("Lat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Lon {
            get {
                return this.LonField;
            }
            set {
                if ((this.LonField.Equals(value) != true)) {
                    this.LonField = value;
                    this.RaisePropertyChanged("Lon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MediaFileFormat {
            get {
                return this.MediaFileFormatField;
            }
            set {
                if ((object.ReferenceEquals(this.MediaFileFormatField, value) != true)) {
                    this.MediaFileFormatField = value;
                    this.RaisePropertyChanged("MediaFileFormat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MediaTypes MediaType {
            get {
                return this.MediaTypeField;
            }
            set {
                if ((this.MediaTypeField.Equals(value) != true)) {
                    this.MediaTypeField = value;
                    this.RaisePropertyChanged("MediaType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MediaURL {
            get {
                return this.MediaURLField;
            }
            set {
                if ((object.ReferenceEquals(this.MediaURLField, value) != true)) {
                    this.MediaURLField = value;
                    this.RaisePropertyChanged("MediaURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NotificationText {
            get {
                return this.NotificationTextField;
            }
            set {
                if ((object.ReferenceEquals(this.NotificationTextField, value) != true)) {
                    this.NotificationTextField = value;
                    this.RaisePropertyChanged("NotificationText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateAuthority {
            get {
                return this.PlateAuthorityField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateAuthorityField, value) != true)) {
                    this.PlateAuthorityField = value;
                    this.RaisePropertyChanged("PlateAuthority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateColor {
            get {
                return this.PlateColorField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateColorField, value) != true)) {
                    this.PlateColorField = value;
                    this.RaisePropertyChanged("PlateColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateKind {
            get {
                return this.PlateKindField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateKindField, value) != true)) {
                    this.PlateKindField = value;
                    this.RaisePropertyChanged("PlateKind");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateNumber {
            get {
                return this.PlateNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateNumberField, value) != true)) {
                    this.PlateNumberField = value;
                    this.RaisePropertyChanged("PlateNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ReportDangerousId {
            get {
                return this.ReportDangerousIdField;
            }
            set {
                if ((this.ReportDangerousIdField.Equals(value) != true)) {
                    this.ReportDangerousIdField = value;
                    this.RaisePropertyChanged("ReportDangerousId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SupervisorNotificationId {
            get {
                return this.SupervisorNotificationIdField;
            }
            set {
                if ((this.SupervisorNotificationIdField.Equals(value) != true)) {
                    this.SupervisorNotificationIdField = value;
                    this.RaisePropertyChanged("SupervisorNotificationId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SupervisorNotificationStatus", Namespace="http://schemas.datacontract.org/2004/07/")]
    public enum SupervisorNotificationStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pending = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Approved = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Rejected = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MediaTypes", Namespace="http://schemas.datacontract.org/2004/07/")]
    public enum MediaTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Image = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Video = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CorrelationMessagesLogDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class CorrelationMessagesLogDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BusinessRuleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BusinessRuleNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CorrelationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateCreatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long MessageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateKindField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateSourceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BusinessRuleId {
            get {
                return this.BusinessRuleIdField;
            }
            set {
                if ((this.BusinessRuleIdField.Equals(value) != true)) {
                    this.BusinessRuleIdField = value;
                    this.RaisePropertyChanged("BusinessRuleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BusinessRuleName {
            get {
                return this.BusinessRuleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BusinessRuleNameField, value) != true)) {
                    this.BusinessRuleNameField = value;
                    this.RaisePropertyChanged("BusinessRuleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CorrelationDate {
            get {
                return this.CorrelationDateField;
            }
            set {
                if ((this.CorrelationDateField.Equals(value) != true)) {
                    this.CorrelationDateField = value;
                    this.RaisePropertyChanged("CorrelationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateCreated {
            get {
                return this.DateCreatedField;
            }
            set {
                if ((this.DateCreatedField.Equals(value) != true)) {
                    this.DateCreatedField = value;
                    this.RaisePropertyChanged("DateCreated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long MessageId {
            get {
                return this.MessageIdField;
            }
            set {
                if ((this.MessageIdField.Equals(value) != true)) {
                    this.MessageIdField = value;
                    this.RaisePropertyChanged("MessageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateColor {
            get {
                return this.PlateColorField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateColorField, value) != true)) {
                    this.PlateColorField = value;
                    this.RaisePropertyChanged("PlateColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateKind {
            get {
                return this.PlateKindField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateKindField, value) != true)) {
                    this.PlateKindField = value;
                    this.RaisePropertyChanged("PlateKind");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateNumber {
            get {
                return this.PlateNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateNumberField, value) != true)) {
                    this.PlateNumberField = value;
                    this.RaisePropertyChanged("PlateNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateSource {
            get {
                return this.PlateSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateSourceField, value) != true)) {
                    this.PlateSourceField = value;
                    this.RaisePropertyChanged("PlateSource");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlateDetailsDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class PlateDetailsDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string plateColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string plateKindField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string plateNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string plateSourceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string plateColor {
            get {
                return this.plateColorField;
            }
            set {
                if ((object.ReferenceEquals(this.plateColorField, value) != true)) {
                    this.plateColorField = value;
                    this.RaisePropertyChanged("plateColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string plateKind {
            get {
                return this.plateKindField;
            }
            set {
                if ((object.ReferenceEquals(this.plateKindField, value) != true)) {
                    this.plateKindField = value;
                    this.RaisePropertyChanged("plateKind");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string plateNumber {
            get {
                return this.plateNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.plateNumberField, value) != true)) {
                    this.plateNumberField = value;
                    this.RaisePropertyChanged("plateNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string plateSource {
            get {
                return this.plateSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.plateSourceField, value) != true)) {
                    this.plateSourceField = value;
                    this.RaisePropertyChanged("plateSource");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KpiDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class KpiDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ActualPercentageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CurrentValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LabelValueArabicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LabelValueEnglishField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PercentageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PreviousValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TargetValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ActualPercentage {
            get {
                return this.ActualPercentageField;
            }
            set {
                if ((this.ActualPercentageField.Equals(value) != true)) {
                    this.ActualPercentageField = value;
                    this.RaisePropertyChanged("ActualPercentage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CurrentValue {
            get {
                return this.CurrentValueField;
            }
            set {
                if ((this.CurrentValueField.Equals(value) != true)) {
                    this.CurrentValueField = value;
                    this.RaisePropertyChanged("CurrentValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LabelValueArabic {
            get {
                return this.LabelValueArabicField;
            }
            set {
                if ((object.ReferenceEquals(this.LabelValueArabicField, value) != true)) {
                    this.LabelValueArabicField = value;
                    this.RaisePropertyChanged("LabelValueArabic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LabelValueEnglish {
            get {
                return this.LabelValueEnglishField;
            }
            set {
                if ((object.ReferenceEquals(this.LabelValueEnglishField, value) != true)) {
                    this.LabelValueEnglishField = value;
                    this.RaisePropertyChanged("LabelValueEnglish");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Percentage {
            get {
                return this.PercentageField;
            }
            set {
                if ((this.PercentageField.Equals(value) != true)) {
                    this.PercentageField = value;
                    this.RaisePropertyChanged("Percentage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PreviousValue {
            get {
                return this.PreviousValueField;
            }
            set {
                if ((this.PreviousValueField.Equals(value) != true)) {
                    this.PreviousValueField = value;
                    this.RaisePropertyChanged("PreviousValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetName {
            get {
                return this.TargetNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetNameField, value) != true)) {
                    this.TargetNameField = value;
                    this.RaisePropertyChanged("TargetName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TargetValue {
            get {
                return this.TargetValueField;
            }
            set {
                if ((this.TargetValueField.Equals(value) != true)) {
                    this.TargetValueField = value;
                    this.RaisePropertyChanged("TargetValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KPITargetDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class KPITargetDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CreatedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateCreatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DateModifiedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ModifiedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TaregtDescriptionEnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetDescriptionArField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TargetIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TargetValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CreatedBy {
            get {
                return this.CreatedByField;
            }
            set {
                if ((this.CreatedByField.Equals(value) != true)) {
                    this.CreatedByField = value;
                    this.RaisePropertyChanged("CreatedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateCreated {
            get {
                return this.DateCreatedField;
            }
            set {
                if ((this.DateCreatedField.Equals(value) != true)) {
                    this.DateCreatedField = value;
                    this.RaisePropertyChanged("DateCreated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DateModified {
            get {
                return this.DateModifiedField;
            }
            set {
                if ((this.DateModifiedField.Equals(value) != true)) {
                    this.DateModifiedField = value;
                    this.RaisePropertyChanged("DateModified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ModifiedBy {
            get {
                return this.ModifiedByField;
            }
            set {
                if ((this.ModifiedByField.Equals(value) != true)) {
                    this.ModifiedByField = value;
                    this.RaisePropertyChanged("ModifiedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaregtDescriptionEn {
            get {
                return this.TaregtDescriptionEnField;
            }
            set {
                if ((object.ReferenceEquals(this.TaregtDescriptionEnField, value) != true)) {
                    this.TaregtDescriptionEnField = value;
                    this.RaisePropertyChanged("TaregtDescriptionEn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetDescriptionAr {
            get {
                return this.TargetDescriptionArField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetDescriptionArField, value) != true)) {
                    this.TargetDescriptionArField = value;
                    this.RaisePropertyChanged("TargetDescriptionAr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TargetID {
            get {
                return this.TargetIDField;
            }
            set {
                if ((this.TargetIDField.Equals(value) != true)) {
                    this.TargetIDField = value;
                    this.RaisePropertyChanged("TargetID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetName {
            get {
                return this.TargetNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetNameField, value) != true)) {
                    this.TargetNameField = value;
                    this.RaisePropertyChanged("TargetName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TargetValue {
            get {
                return this.TargetValueField;
            }
            set {
                if ((this.TargetValueField.Equals(value) != true)) {
                    this.TargetValueField = value;
                    this.RaisePropertyChanged("TargetValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AssetViolationDetailsDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class AssetViolationDetailsDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AssetCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] AssetLinerKPIsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AssetLocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO AssetPieKPIsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AssetVendorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AssetViolationCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AssetViolationCountMonthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AssetViolationCountYearlyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AssetCode {
            get {
                return this.AssetCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.AssetCodeField, value) != true)) {
                    this.AssetCodeField = value;
                    this.RaisePropertyChanged("AssetCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] AssetLinerKPIs {
            get {
                return this.AssetLinerKPIsField;
            }
            set {
                if ((object.ReferenceEquals(this.AssetLinerKPIsField, value) != true)) {
                    this.AssetLinerKPIsField = value;
                    this.RaisePropertyChanged("AssetLinerKPIs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AssetLocation {
            get {
                return this.AssetLocationField;
            }
            set {
                if ((object.ReferenceEquals(this.AssetLocationField, value) != true)) {
                    this.AssetLocationField = value;
                    this.RaisePropertyChanged("AssetLocation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO AssetPieKPIs {
            get {
                return this.AssetPieKPIsField;
            }
            set {
                if ((object.ReferenceEquals(this.AssetPieKPIsField, value) != true)) {
                    this.AssetPieKPIsField = value;
                    this.RaisePropertyChanged("AssetPieKPIs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AssetVendor {
            get {
                return this.AssetVendorField;
            }
            set {
                if ((object.ReferenceEquals(this.AssetVendorField, value) != true)) {
                    this.AssetVendorField = value;
                    this.RaisePropertyChanged("AssetVendor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AssetViolationCount {
            get {
                return this.AssetViolationCountField;
            }
            set {
                if ((this.AssetViolationCountField.Equals(value) != true)) {
                    this.AssetViolationCountField = value;
                    this.RaisePropertyChanged("AssetViolationCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AssetViolationCountMonth {
            get {
                return this.AssetViolationCountMonthField;
            }
            set {
                if ((this.AssetViolationCountMonthField.Equals(value) != true)) {
                    this.AssetViolationCountMonthField = value;
                    this.RaisePropertyChanged("AssetViolationCountMonth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AssetViolationCountYearly {
            get {
                return this.AssetViolationCountYearlyField;
            }
            set {
                if ((this.AssetViolationCountYearlyField.Equals(value) != true)) {
                    this.AssetViolationCountYearlyField = value;
                    this.RaisePropertyChanged("AssetViolationCountYearly");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AssetsViewDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class AssetsViewDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AreaIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AreaNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsDetailsViewDTO[] AssetsDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrentValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FromNodeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ItemCategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ItemCategoryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ItemIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ItemImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ItemNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ItemStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ItemStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LinkIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> LongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OriginalIdentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SerialNoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AreaId {
            get {
                return this.AreaIdField;
            }
            set {
                if ((this.AreaIdField.Equals(value) != true)) {
                    this.AreaIdField = value;
                    this.RaisePropertyChanged("AreaId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AreaName {
            get {
                return this.AreaNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AreaNameField, value) != true)) {
                    this.AreaNameField = value;
                    this.RaisePropertyChanged("AreaName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsDetailsViewDTO[] AssetsDetails {
            get {
                return this.AssetsDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.AssetsDetailsField, value) != true)) {
                    this.AssetsDetailsField = value;
                    this.RaisePropertyChanged("AssetsDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrentValue {
            get {
                return this.CurrentValueField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentValueField, value) != true)) {
                    this.CurrentValueField = value;
                    this.RaisePropertyChanged("CurrentValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FromNodeId {
            get {
                return this.FromNodeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.FromNodeIdField, value) != true)) {
                    this.FromNodeIdField = value;
                    this.RaisePropertyChanged("FromNodeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ItemCategoryId {
            get {
                return this.ItemCategoryIdField;
            }
            set {
                if ((this.ItemCategoryIdField.Equals(value) != true)) {
                    this.ItemCategoryIdField = value;
                    this.RaisePropertyChanged("ItemCategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ItemCategoryName {
            get {
                return this.ItemCategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemCategoryNameField, value) != true)) {
                    this.ItemCategoryNameField = value;
                    this.RaisePropertyChanged("ItemCategoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ItemId {
            get {
                return this.ItemIdField;
            }
            set {
                if ((this.ItemIdField.Equals(value) != true)) {
                    this.ItemIdField = value;
                    this.RaisePropertyChanged("ItemId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ItemImage {
            get {
                return this.ItemImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemImageField, value) != true)) {
                    this.ItemImageField = value;
                    this.RaisePropertyChanged("ItemImage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ItemName {
            get {
                return this.ItemNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemNameField, value) != true)) {
                    this.ItemNameField = value;
                    this.RaisePropertyChanged("ItemName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ItemStatusId {
            get {
                return this.ItemStatusIdField;
            }
            set {
                if ((this.ItemStatusIdField.Equals(value) != true)) {
                    this.ItemStatusIdField = value;
                    this.RaisePropertyChanged("ItemStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ItemStatusName {
            get {
                return this.ItemStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemStatusNameField, value) != true)) {
                    this.ItemStatusNameField = value;
                    this.RaisePropertyChanged("ItemStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LinkId {
            get {
                return this.LinkIdField;
            }
            set {
                if ((object.ReferenceEquals(this.LinkIdField, value) != true)) {
                    this.LinkIdField = value;
                    this.RaisePropertyChanged("LinkId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LocationCode {
            get {
                return this.LocationCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationCodeField, value) != true)) {
                    this.LocationCodeField = value;
                    this.RaisePropertyChanged("LocationCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OriginalIdent {
            get {
                return this.OriginalIdentField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginalIdentField, value) != true)) {
                    this.OriginalIdentField = value;
                    this.RaisePropertyChanged("OriginalIdent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SerialNo {
            get {
                return this.SerialNoField;
            }
            set {
                if ((object.ReferenceEquals(this.SerialNoField, value) != true)) {
                    this.SerialNoField = value;
                    this.RaisePropertyChanged("SerialNo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AssetsDetailsViewDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class AssetsDetailsViewDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CameraURLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SerialNoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CameraURL {
            get {
                return this.CameraURLField;
            }
            set {
                if ((object.ReferenceEquals(this.CameraURLField, value) != true)) {
                    this.CameraURLField = value;
                    this.RaisePropertyChanged("CameraURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SerialNo {
            get {
                return this.SerialNoField;
            }
            set {
                if ((object.ReferenceEquals(this.SerialNoField, value) != true)) {
                    this.SerialNoField = value;
                    this.RaisePropertyChanged("SerialNo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ViolationNotificationDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class ViolationNotificationDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AltitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AssetCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AssetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BackgroundColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CapturedSpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateTakenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DirectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DirectionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCriticalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNoticedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long LPRIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LaneNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> LongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MesuredSpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.NotificationDTO NotificationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long NotificationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateColorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateKindNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateSourceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SourceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SpeedLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VehicleTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VehicleTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ViolationNotificationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ViolationStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ViolationStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ViolationTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ViolationTypeNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Altitude {
            get {
                return this.AltitudeField;
            }
            set {
                if ((this.AltitudeField.Equals(value) != true)) {
                    this.AltitudeField = value;
                    this.RaisePropertyChanged("Altitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AssetCode {
            get {
                return this.AssetCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.AssetCodeField, value) != true)) {
                    this.AssetCodeField = value;
                    this.RaisePropertyChanged("AssetCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AssetId {
            get {
                return this.AssetIdField;
            }
            set {
                if ((object.ReferenceEquals(this.AssetIdField, value) != true)) {
                    this.AssetIdField = value;
                    this.RaisePropertyChanged("AssetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BackgroundColor {
            get {
                return this.BackgroundColorField;
            }
            set {
                if ((object.ReferenceEquals(this.BackgroundColorField, value) != true)) {
                    this.BackgroundColorField = value;
                    this.RaisePropertyChanged("BackgroundColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CapturedSpeed {
            get {
                return this.CapturedSpeedField;
            }
            set {
                if ((this.CapturedSpeedField.Equals(value) != true)) {
                    this.CapturedSpeedField = value;
                    this.RaisePropertyChanged("CapturedSpeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTaken {
            get {
                return this.DateTakenField;
            }
            set {
                if ((this.DateTakenField.Equals(value) != true)) {
                    this.DateTakenField = value;
                    this.RaisePropertyChanged("DateTaken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Direction {
            get {
                return this.DirectionField;
            }
            set {
                if ((this.DirectionField.Equals(value) != true)) {
                    this.DirectionField = value;
                    this.RaisePropertyChanged("Direction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DirectionName {
            get {
                return this.DirectionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DirectionNameField, value) != true)) {
                    this.DirectionNameField = value;
                    this.RaisePropertyChanged("DirectionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCritical {
            get {
                return this.IsCriticalField;
            }
            set {
                if ((this.IsCriticalField.Equals(value) != true)) {
                    this.IsCriticalField = value;
                    this.RaisePropertyChanged("IsCritical");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNoticed {
            get {
                return this.IsNoticedField;
            }
            set {
                if ((this.IsNoticedField.Equals(value) != true)) {
                    this.IsNoticedField = value;
                    this.RaisePropertyChanged("IsNoticed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long LPRId {
            get {
                return this.LPRIdField;
            }
            set {
                if ((this.LPRIdField.Equals(value) != true)) {
                    this.LPRIdField = value;
                    this.RaisePropertyChanged("LPRId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LaneNo {
            get {
                return this.LaneNoField;
            }
            set {
                if ((this.LaneNoField.Equals(value) != true)) {
                    this.LaneNoField = value;
                    this.RaisePropertyChanged("LaneNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LocationCode {
            get {
                return this.LocationCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationCodeField, value) != true)) {
                    this.LocationCodeField = value;
                    this.RaisePropertyChanged("LocationCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageId {
            get {
                return this.MessageIdField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageIdField, value) != true)) {
                    this.MessageIdField = value;
                    this.RaisePropertyChanged("MessageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageText {
            get {
                return this.MessageTextField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageTextField, value) != true)) {
                    this.MessageTextField = value;
                    this.RaisePropertyChanged("MessageText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MesuredSpeed {
            get {
                return this.MesuredSpeedField;
            }
            set {
                if ((this.MesuredSpeedField.Equals(value) != true)) {
                    this.MesuredSpeedField = value;
                    this.RaisePropertyChanged("MesuredSpeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.NotificationDTO Notification {
            get {
                return this.NotificationField;
            }
            set {
                if ((object.ReferenceEquals(this.NotificationField, value) != true)) {
                    this.NotificationField = value;
                    this.RaisePropertyChanged("Notification");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long NotificationId {
            get {
                return this.NotificationIdField;
            }
            set {
                if ((this.NotificationIdField.Equals(value) != true)) {
                    this.NotificationIdField = value;
                    this.RaisePropertyChanged("NotificationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateColorName {
            get {
                return this.PlateColorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateColorNameField, value) != true)) {
                    this.PlateColorNameField = value;
                    this.RaisePropertyChanged("PlateColorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateKindName {
            get {
                return this.PlateKindNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateKindNameField, value) != true)) {
                    this.PlateKindNameField = value;
                    this.RaisePropertyChanged("PlateKindName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateNumber {
            get {
                return this.PlateNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateNumberField, value) != true)) {
                    this.PlateNumberField = value;
                    this.RaisePropertyChanged("PlateNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateSourceName {
            get {
                return this.PlateSourceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateSourceNameField, value) != true)) {
                    this.PlateSourceNameField = value;
                    this.RaisePropertyChanged("PlateSourceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateTypeName {
            get {
                return this.PlateTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateTypeNameField, value) != true)) {
                    this.PlateTypeNameField = value;
                    this.RaisePropertyChanged("PlateTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SourceId {
            get {
                return this.SourceIdField;
            }
            set {
                if ((this.SourceIdField.Equals(value) != true)) {
                    this.SourceIdField = value;
                    this.RaisePropertyChanged("SourceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceName {
            get {
                return this.SourceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceNameField, value) != true)) {
                    this.SourceNameField = value;
                    this.RaisePropertyChanged("SourceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SpeedLimit {
            get {
                return this.SpeedLimitField;
            }
            set {
                if ((this.SpeedLimitField.Equals(value) != true)) {
                    this.SpeedLimitField = value;
                    this.RaisePropertyChanged("SpeedLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int VehicleTypeId {
            get {
                return this.VehicleTypeIdField;
            }
            set {
                if ((this.VehicleTypeIdField.Equals(value) != true)) {
                    this.VehicleTypeIdField = value;
                    this.RaisePropertyChanged("VehicleTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VehicleTypeName {
            get {
                return this.VehicleTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VehicleTypeNameField, value) != true)) {
                    this.VehicleTypeNameField = value;
                    this.RaisePropertyChanged("VehicleTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ViolationNotificationId {
            get {
                return this.ViolationNotificationIdField;
            }
            set {
                if ((this.ViolationNotificationIdField.Equals(value) != true)) {
                    this.ViolationNotificationIdField = value;
                    this.RaisePropertyChanged("ViolationNotificationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ViolationStatusId {
            get {
                return this.ViolationStatusIdField;
            }
            set {
                if ((this.ViolationStatusIdField.Equals(value) != true)) {
                    this.ViolationStatusIdField = value;
                    this.RaisePropertyChanged("ViolationStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ViolationStatusName {
            get {
                return this.ViolationStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ViolationStatusNameField, value) != true)) {
                    this.ViolationStatusNameField = value;
                    this.RaisePropertyChanged("ViolationStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ViolationTypeId {
            get {
                return this.ViolationTypeIdField;
            }
            set {
                if ((this.ViolationTypeIdField.Equals(value) != true)) {
                    this.ViolationTypeIdField = value;
                    this.RaisePropertyChanged("ViolationTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ViolationTypeName {
            get {
                return this.ViolationTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ViolationTypeNameField, value) != true)) {
                    this.ViolationTypeNameField = value;
                    this.RaisePropertyChanged("ViolationTypeName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NotificationDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class NotificationDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateCreatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNoticedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LastModifiedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> LastModifiedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LastStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long NotificationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OwnerIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateCreated {
            get {
                return this.DateCreatedField;
            }
            set {
                if ((this.DateCreatedField.Equals(value) != true)) {
                    this.DateCreatedField = value;
                    this.RaisePropertyChanged("DateCreated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNoticed {
            get {
                return this.IsNoticedField;
            }
            set {
                if ((this.IsNoticedField.Equals(value) != true)) {
                    this.IsNoticedField = value;
                    this.RaisePropertyChanged("IsNoticed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastModified {
            get {
                return this.LastModifiedField;
            }
            set {
                if ((this.LastModifiedField.Equals(value) != true)) {
                    this.LastModifiedField = value;
                    this.RaisePropertyChanged("LastModified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> LastModifiedBy {
            get {
                return this.LastModifiedByField;
            }
            set {
                if ((this.LastModifiedByField.Equals(value) != true)) {
                    this.LastModifiedByField = value;
                    this.RaisePropertyChanged("LastModifiedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LastStatus {
            get {
                return this.LastStatusField;
            }
            set {
                if ((this.LastStatusField.Equals(value) != true)) {
                    this.LastStatusField = value;
                    this.RaisePropertyChanged("LastStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long NotificationId {
            get {
                return this.NotificationIdField;
            }
            set {
                if ((this.NotificationIdField.Equals(value) != true)) {
                    this.NotificationIdField = value;
                    this.RaisePropertyChanged("NotificationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DangerousVehicleDetailsDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class DangerousVehicleDetailsDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BusinessRuleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BusinessRuleNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateKindField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateSourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] VehicleLinerKPIsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO VehiclePieKPIsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[] VehicleViolationsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BusinessRuleId {
            get {
                return this.BusinessRuleIdField;
            }
            set {
                if ((this.BusinessRuleIdField.Equals(value) != true)) {
                    this.BusinessRuleIdField = value;
                    this.RaisePropertyChanged("BusinessRuleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BusinessRuleName {
            get {
                return this.BusinessRuleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BusinessRuleNameField, value) != true)) {
                    this.BusinessRuleNameField = value;
                    this.RaisePropertyChanged("BusinessRuleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateColor {
            get {
                return this.PlateColorField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateColorField, value) != true)) {
                    this.PlateColorField = value;
                    this.RaisePropertyChanged("PlateColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateKind {
            get {
                return this.PlateKindField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateKindField, value) != true)) {
                    this.PlateKindField = value;
                    this.RaisePropertyChanged("PlateKind");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateNumber {
            get {
                return this.PlateNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateNumberField, value) != true)) {
                    this.PlateNumberField = value;
                    this.RaisePropertyChanged("PlateNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateSource {
            get {
                return this.PlateSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateSourceField, value) != true)) {
                    this.PlateSourceField = value;
                    this.RaisePropertyChanged("PlateSource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] VehicleLinerKPIs {
            get {
                return this.VehicleLinerKPIsField;
            }
            set {
                if ((object.ReferenceEquals(this.VehicleLinerKPIsField, value) != true)) {
                    this.VehicleLinerKPIsField = value;
                    this.RaisePropertyChanged("VehicleLinerKPIs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO VehiclePieKPIs {
            get {
                return this.VehiclePieKPIsField;
            }
            set {
                if ((object.ReferenceEquals(this.VehiclePieKPIsField, value) != true)) {
                    this.VehiclePieKPIsField = value;
                    this.RaisePropertyChanged("VehiclePieKPIs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[] VehicleViolations {
            get {
                return this.VehicleViolationsField;
            }
            set {
                if ((object.ReferenceEquals(this.VehicleViolationsField, value) != true)) {
                    this.VehicleViolationsField = value;
                    this.RaisePropertyChanged("VehicleViolations");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BusinessRulesDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class BusinessRulesDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BusinessNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BusinessRuleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BusinessRuleTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedAtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CreatedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> InsideCityOverSpeedIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InsideCityOverSpeedQtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InsideCityOverSpeedValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOverSpeedInsideCityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOverSpeedOutsideCityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsTrafficCrossField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LastModifiedAtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> LastModifiedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumOfOccurField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OutsideCityOverSpeedIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OutsideCityOverSpeedQtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OutsideCityOverSpeedValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PriorityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RedLightCrossingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RuleIntervalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SpeedInsideCityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SpeedOutsideCityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TrafficCrossQtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TrafficCrossTimesIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TrafficCrossTimesValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VehicleTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> VehicleTypeIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BusinessName {
            get {
                return this.BusinessNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BusinessNameField, value) != true)) {
                    this.BusinessNameField = value;
                    this.RaisePropertyChanged("BusinessName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BusinessRuleId {
            get {
                return this.BusinessRuleIdField;
            }
            set {
                if ((this.BusinessRuleIdField.Equals(value) != true)) {
                    this.BusinessRuleIdField = value;
                    this.RaisePropertyChanged("BusinessRuleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BusinessRuleTime {
            get {
                return this.BusinessRuleTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.BusinessRuleTimeField, value) != true)) {
                    this.BusinessRuleTimeField = value;
                    this.RaisePropertyChanged("BusinessRuleTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedAt {
            get {
                return this.CreatedAtField;
            }
            set {
                if ((this.CreatedAtField.Equals(value) != true)) {
                    this.CreatedAtField = value;
                    this.RaisePropertyChanged("CreatedAt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CreatedBy {
            get {
                return this.CreatedByField;
            }
            set {
                if ((this.CreatedByField.Equals(value) != true)) {
                    this.CreatedByField = value;
                    this.RaisePropertyChanged("CreatedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> InsideCityOverSpeedId {
            get {
                return this.InsideCityOverSpeedIdField;
            }
            set {
                if ((this.InsideCityOverSpeedIdField.Equals(value) != true)) {
                    this.InsideCityOverSpeedIdField = value;
                    this.RaisePropertyChanged("InsideCityOverSpeedId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InsideCityOverSpeedQty {
            get {
                return this.InsideCityOverSpeedQtyField;
            }
            set {
                if ((this.InsideCityOverSpeedQtyField.Equals(value) != true)) {
                    this.InsideCityOverSpeedQtyField = value;
                    this.RaisePropertyChanged("InsideCityOverSpeedQty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InsideCityOverSpeedValue {
            get {
                return this.InsideCityOverSpeedValueField;
            }
            set {
                if ((this.InsideCityOverSpeedValueField.Equals(value) != true)) {
                    this.InsideCityOverSpeedValueField = value;
                    this.RaisePropertyChanged("InsideCityOverSpeedValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOverSpeedInsideCity {
            get {
                return this.IsOverSpeedInsideCityField;
            }
            set {
                if ((this.IsOverSpeedInsideCityField.Equals(value) != true)) {
                    this.IsOverSpeedInsideCityField = value;
                    this.RaisePropertyChanged("IsOverSpeedInsideCity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOverSpeedOutsideCity {
            get {
                return this.IsOverSpeedOutsideCityField;
            }
            set {
                if ((this.IsOverSpeedOutsideCityField.Equals(value) != true)) {
                    this.IsOverSpeedOutsideCityField = value;
                    this.RaisePropertyChanged("IsOverSpeedOutsideCity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsTrafficCross {
            get {
                return this.IsTrafficCrossField;
            }
            set {
                if ((this.IsTrafficCrossField.Equals(value) != true)) {
                    this.IsTrafficCrossField = value;
                    this.RaisePropertyChanged("IsTrafficCross");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastModifiedAt {
            get {
                return this.LastModifiedAtField;
            }
            set {
                if ((this.LastModifiedAtField.Equals(value) != true)) {
                    this.LastModifiedAtField = value;
                    this.RaisePropertyChanged("LastModifiedAt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> LastModifiedBy {
            get {
                return this.LastModifiedByField;
            }
            set {
                if ((this.LastModifiedByField.Equals(value) != true)) {
                    this.LastModifiedByField = value;
                    this.RaisePropertyChanged("LastModifiedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumOfOccur {
            get {
                return this.NumOfOccurField;
            }
            set {
                if ((this.NumOfOccurField.Equals(value) != true)) {
                    this.NumOfOccurField = value;
                    this.RaisePropertyChanged("NumOfOccur");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OutsideCityOverSpeedId {
            get {
                return this.OutsideCityOverSpeedIdField;
            }
            set {
                if ((this.OutsideCityOverSpeedIdField.Equals(value) != true)) {
                    this.OutsideCityOverSpeedIdField = value;
                    this.RaisePropertyChanged("OutsideCityOverSpeedId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OutsideCityOverSpeedQty {
            get {
                return this.OutsideCityOverSpeedQtyField;
            }
            set {
                if ((this.OutsideCityOverSpeedQtyField.Equals(value) != true)) {
                    this.OutsideCityOverSpeedQtyField = value;
                    this.RaisePropertyChanged("OutsideCityOverSpeedQty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OutsideCityOverSpeedValue {
            get {
                return this.OutsideCityOverSpeedValueField;
            }
            set {
                if ((this.OutsideCityOverSpeedValueField.Equals(value) != true)) {
                    this.OutsideCityOverSpeedValueField = value;
                    this.RaisePropertyChanged("OutsideCityOverSpeedValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((object.ReferenceEquals(this.PriorityField, value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PriorityId {
            get {
                return this.PriorityIdField;
            }
            set {
                if ((this.PriorityIdField.Equals(value) != true)) {
                    this.PriorityIdField = value;
                    this.RaisePropertyChanged("PriorityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RedLightCrossing {
            get {
                return this.RedLightCrossingField;
            }
            set {
                if ((object.ReferenceEquals(this.RedLightCrossingField, value) != true)) {
                    this.RedLightCrossingField = value;
                    this.RaisePropertyChanged("RedLightCrossing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RuleInterval {
            get {
                return this.RuleIntervalField;
            }
            set {
                if ((this.RuleIntervalField.Equals(value) != true)) {
                    this.RuleIntervalField = value;
                    this.RaisePropertyChanged("RuleInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SpeedInsideCity {
            get {
                return this.SpeedInsideCityField;
            }
            set {
                if ((object.ReferenceEquals(this.SpeedInsideCityField, value) != true)) {
                    this.SpeedInsideCityField = value;
                    this.RaisePropertyChanged("SpeedInsideCity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SpeedOutsideCity {
            get {
                return this.SpeedOutsideCityField;
            }
            set {
                if ((object.ReferenceEquals(this.SpeedOutsideCityField, value) != true)) {
                    this.SpeedOutsideCityField = value;
                    this.RaisePropertyChanged("SpeedOutsideCity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TrafficCrossQty {
            get {
                return this.TrafficCrossQtyField;
            }
            set {
                if ((this.TrafficCrossQtyField.Equals(value) != true)) {
                    this.TrafficCrossQtyField = value;
                    this.RaisePropertyChanged("TrafficCrossQty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TrafficCrossTimesId {
            get {
                return this.TrafficCrossTimesIdField;
            }
            set {
                if ((this.TrafficCrossTimesIdField.Equals(value) != true)) {
                    this.TrafficCrossTimesIdField = value;
                    this.RaisePropertyChanged("TrafficCrossTimesId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TrafficCrossTimesValue {
            get {
                return this.TrafficCrossTimesValueField;
            }
            set {
                if ((this.TrafficCrossTimesValueField.Equals(value) != true)) {
                    this.TrafficCrossTimesValueField = value;
                    this.RaisePropertyChanged("TrafficCrossTimesValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VehicleType {
            get {
                return this.VehicleTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.VehicleTypeField, value) != true)) {
                    this.VehicleTypeField = value;
                    this.RaisePropertyChanged("VehicleType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> VehicleTypeId {
            get {
                return this.VehicleTypeIdField;
            }
            set {
                if ((this.VehicleTypeIdField.Equals(value) != true)) {
                    this.VehicleTypeIdField = value;
                    this.RaisePropertyChanged("VehicleTypeId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IncidentsDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class IncidentsDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AreaIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AreaNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ArrivedTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BackgroundColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CallTakerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CallTakerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CallerAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CallerLanguageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CallerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CallerNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CauseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CauseNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CrashSeverityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CrashSeverityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CrashTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CrashTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreatedTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DispatcheTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> DispatcherIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DispatcherNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EmirateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmirateNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FatalitiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IncidentAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IncidentDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IncidentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IncidentNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IncidentTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IncidentTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IntersectionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IntersectionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCriticalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNoticedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LanesCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LightingIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LightingNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LocationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LocationTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> LongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MediumInjuriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.NotificationDTO NotificationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long NotificationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PConditionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PConditionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PoliceStationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoadTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoadTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SevereInjuriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SlightInjuriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalInjuriesFatalitiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WeatherIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WeatherNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZoneDescriptionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AreaId {
            get {
                return this.AreaIdField;
            }
            set {
                if ((this.AreaIdField.Equals(value) != true)) {
                    this.AreaIdField = value;
                    this.RaisePropertyChanged("AreaId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AreaName {
            get {
                return this.AreaNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AreaNameField, value) != true)) {
                    this.AreaNameField = value;
                    this.RaisePropertyChanged("AreaName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ArrivedTime {
            get {
                return this.ArrivedTimeField;
            }
            set {
                if ((this.ArrivedTimeField.Equals(value) != true)) {
                    this.ArrivedTimeField = value;
                    this.RaisePropertyChanged("ArrivedTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BackgroundColor {
            get {
                return this.BackgroundColorField;
            }
            set {
                if ((object.ReferenceEquals(this.BackgroundColorField, value) != true)) {
                    this.BackgroundColorField = value;
                    this.RaisePropertyChanged("BackgroundColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CallTakerId {
            get {
                return this.CallTakerIdField;
            }
            set {
                if ((this.CallTakerIdField.Equals(value) != true)) {
                    this.CallTakerIdField = value;
                    this.RaisePropertyChanged("CallTakerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CallTakerName {
            get {
                return this.CallTakerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CallTakerNameField, value) != true)) {
                    this.CallTakerNameField = value;
                    this.RaisePropertyChanged("CallTakerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CallerAddress {
            get {
                return this.CallerAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.CallerAddressField, value) != true)) {
                    this.CallerAddressField = value;
                    this.RaisePropertyChanged("CallerAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CallerLanguage {
            get {
                return this.CallerLanguageField;
            }
            set {
                if ((object.ReferenceEquals(this.CallerLanguageField, value) != true)) {
                    this.CallerLanguageField = value;
                    this.RaisePropertyChanged("CallerLanguage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CallerName {
            get {
                return this.CallerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CallerNameField, value) != true)) {
                    this.CallerNameField = value;
                    this.RaisePropertyChanged("CallerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CallerNumber {
            get {
                return this.CallerNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.CallerNumberField, value) != true)) {
                    this.CallerNumberField = value;
                    this.RaisePropertyChanged("CallerNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CauseId {
            get {
                return this.CauseIdField;
            }
            set {
                if ((this.CauseIdField.Equals(value) != true)) {
                    this.CauseIdField = value;
                    this.RaisePropertyChanged("CauseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CauseName {
            get {
                return this.CauseNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CauseNameField, value) != true)) {
                    this.CauseNameField = value;
                    this.RaisePropertyChanged("CauseName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CityId {
            get {
                return this.CityIdField;
            }
            set {
                if ((this.CityIdField.Equals(value) != true)) {
                    this.CityIdField = value;
                    this.RaisePropertyChanged("CityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CityName {
            get {
                return this.CityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CityNameField, value) != true)) {
                    this.CityNameField = value;
                    this.RaisePropertyChanged("CityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CrashSeverityId {
            get {
                return this.CrashSeverityIdField;
            }
            set {
                if ((this.CrashSeverityIdField.Equals(value) != true)) {
                    this.CrashSeverityIdField = value;
                    this.RaisePropertyChanged("CrashSeverityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CrashSeverityName {
            get {
                return this.CrashSeverityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CrashSeverityNameField, value) != true)) {
                    this.CrashSeverityNameField = value;
                    this.RaisePropertyChanged("CrashSeverityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CrashTypeId {
            get {
                return this.CrashTypeIdField;
            }
            set {
                if ((this.CrashTypeIdField.Equals(value) != true)) {
                    this.CrashTypeIdField = value;
                    this.RaisePropertyChanged("CrashTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CrashTypeName {
            get {
                return this.CrashTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CrashTypeNameField, value) != true)) {
                    this.CrashTypeNameField = value;
                    this.RaisePropertyChanged("CrashTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreatedTime {
            get {
                return this.CreatedTimeField;
            }
            set {
                if ((this.CreatedTimeField.Equals(value) != true)) {
                    this.CreatedTimeField = value;
                    this.RaisePropertyChanged("CreatedTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DispatcheTime {
            get {
                return this.DispatcheTimeField;
            }
            set {
                if ((this.DispatcheTimeField.Equals(value) != true)) {
                    this.DispatcheTimeField = value;
                    this.RaisePropertyChanged("DispatcheTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> DispatcherId {
            get {
                return this.DispatcherIdField;
            }
            set {
                if ((this.DispatcherIdField.Equals(value) != true)) {
                    this.DispatcherIdField = value;
                    this.RaisePropertyChanged("DispatcherId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DispatcherName {
            get {
                return this.DispatcherNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DispatcherNameField, value) != true)) {
                    this.DispatcherNameField = value;
                    this.RaisePropertyChanged("DispatcherName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EmirateId {
            get {
                return this.EmirateIdField;
            }
            set {
                if ((this.EmirateIdField.Equals(value) != true)) {
                    this.EmirateIdField = value;
                    this.RaisePropertyChanged("EmirateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmirateName {
            get {
                return this.EmirateNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EmirateNameField, value) != true)) {
                    this.EmirateNameField = value;
                    this.RaisePropertyChanged("EmirateName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Fatalities {
            get {
                return this.FatalitiesField;
            }
            set {
                if ((this.FatalitiesField.Equals(value) != true)) {
                    this.FatalitiesField = value;
                    this.RaisePropertyChanged("Fatalities");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IncidentAddress {
            get {
                return this.IncidentAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.IncidentAddressField, value) != true)) {
                    this.IncidentAddressField = value;
                    this.RaisePropertyChanged("IncidentAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IncidentDescription {
            get {
                return this.IncidentDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.IncidentDescriptionField, value) != true)) {
                    this.IncidentDescriptionField = value;
                    this.RaisePropertyChanged("IncidentDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long IncidentId {
            get {
                return this.IncidentIdField;
            }
            set {
                if ((this.IncidentIdField.Equals(value) != true)) {
                    this.IncidentIdField = value;
                    this.RaisePropertyChanged("IncidentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IncidentNumber {
            get {
                return this.IncidentNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.IncidentNumberField, value) != true)) {
                    this.IncidentNumberField = value;
                    this.RaisePropertyChanged("IncidentNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IncidentTypeId {
            get {
                return this.IncidentTypeIdField;
            }
            set {
                if ((this.IncidentTypeIdField.Equals(value) != true)) {
                    this.IncidentTypeIdField = value;
                    this.RaisePropertyChanged("IncidentTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IncidentTypeName {
            get {
                return this.IncidentTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IncidentTypeNameField, value) != true)) {
                    this.IncidentTypeNameField = value;
                    this.RaisePropertyChanged("IncidentTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IntersectionId {
            get {
                return this.IntersectionIdField;
            }
            set {
                if ((this.IntersectionIdField.Equals(value) != true)) {
                    this.IntersectionIdField = value;
                    this.RaisePropertyChanged("IntersectionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IntersectionName {
            get {
                return this.IntersectionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IntersectionNameField, value) != true)) {
                    this.IntersectionNameField = value;
                    this.RaisePropertyChanged("IntersectionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCritical {
            get {
                return this.IsCriticalField;
            }
            set {
                if ((this.IsCriticalField.Equals(value) != true)) {
                    this.IsCriticalField = value;
                    this.RaisePropertyChanged("IsCritical");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNoticed {
            get {
                return this.IsNoticedField;
            }
            set {
                if ((this.IsNoticedField.Equals(value) != true)) {
                    this.IsNoticedField = value;
                    this.RaisePropertyChanged("IsNoticed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LanesCount {
            get {
                return this.LanesCountField;
            }
            set {
                if ((this.LanesCountField.Equals(value) != true)) {
                    this.LanesCountField = value;
                    this.RaisePropertyChanged("LanesCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LightingId {
            get {
                return this.LightingIdField;
            }
            set {
                if ((this.LightingIdField.Equals(value) != true)) {
                    this.LightingIdField = value;
                    this.RaisePropertyChanged("LightingId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LightingName {
            get {
                return this.LightingNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LightingNameField, value) != true)) {
                    this.LightingNameField = value;
                    this.RaisePropertyChanged("LightingName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LocationDescription {
            get {
                return this.LocationDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationDescriptionField, value) != true)) {
                    this.LocationDescriptionField = value;
                    this.RaisePropertyChanged("LocationDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LocationId {
            get {
                return this.LocationIdField;
            }
            set {
                if ((this.LocationIdField.Equals(value) != true)) {
                    this.LocationIdField = value;
                    this.RaisePropertyChanged("LocationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LocationName {
            get {
                return this.LocationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationNameField, value) != true)) {
                    this.LocationNameField = value;
                    this.RaisePropertyChanged("LocationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LocationTypeId {
            get {
                return this.LocationTypeIdField;
            }
            set {
                if ((this.LocationTypeIdField.Equals(value) != true)) {
                    this.LocationTypeIdField = value;
                    this.RaisePropertyChanged("LocationTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LocationTypeName {
            get {
                return this.LocationTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationTypeNameField, value) != true)) {
                    this.LocationTypeNameField = value;
                    this.RaisePropertyChanged("LocationTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MediumInjuries {
            get {
                return this.MediumInjuriesField;
            }
            set {
                if ((this.MediumInjuriesField.Equals(value) != true)) {
                    this.MediumInjuriesField = value;
                    this.RaisePropertyChanged("MediumInjuries");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageId {
            get {
                return this.MessageIdField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageIdField, value) != true)) {
                    this.MessageIdField = value;
                    this.RaisePropertyChanged("MessageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageText {
            get {
                return this.MessageTextField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageTextField, value) != true)) {
                    this.MessageTextField = value;
                    this.RaisePropertyChanged("MessageText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.NotificationDTO Notification {
            get {
                return this.NotificationField;
            }
            set {
                if ((object.ReferenceEquals(this.NotificationField, value) != true)) {
                    this.NotificationField = value;
                    this.RaisePropertyChanged("Notification");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long NotificationId {
            get {
                return this.NotificationIdField;
            }
            set {
                if ((this.NotificationIdField.Equals(value) != true)) {
                    this.NotificationIdField = value;
                    this.RaisePropertyChanged("NotificationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PConditionId {
            get {
                return this.PConditionIdField;
            }
            set {
                if ((this.PConditionIdField.Equals(value) != true)) {
                    this.PConditionIdField = value;
                    this.RaisePropertyChanged("PConditionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PConditionName {
            get {
                return this.PConditionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PConditionNameField, value) != true)) {
                    this.PConditionNameField = value;
                    this.RaisePropertyChanged("PConditionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PoliceStation {
            get {
                return this.PoliceStationField;
            }
            set {
                if ((object.ReferenceEquals(this.PoliceStationField, value) != true)) {
                    this.PoliceStationField = value;
                    this.RaisePropertyChanged("PoliceStation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoadTypeId {
            get {
                return this.RoadTypeIdField;
            }
            set {
                if ((this.RoadTypeIdField.Equals(value) != true)) {
                    this.RoadTypeIdField = value;
                    this.RaisePropertyChanged("RoadTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoadTypeName {
            get {
                return this.RoadTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RoadTypeNameField, value) != true)) {
                    this.RoadTypeNameField = value;
                    this.RaisePropertyChanged("RoadTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SevereInjuries {
            get {
                return this.SevereInjuriesField;
            }
            set {
                if ((this.SevereInjuriesField.Equals(value) != true)) {
                    this.SevereInjuriesField = value;
                    this.RaisePropertyChanged("SevereInjuries");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SlightInjuries {
            get {
                return this.SlightInjuriesField;
            }
            set {
                if ((this.SlightInjuriesField.Equals(value) != true)) {
                    this.SlightInjuriesField = value;
                    this.RaisePropertyChanged("SlightInjuries");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Speed {
            get {
                return this.SpeedField;
            }
            set {
                if ((this.SpeedField.Equals(value) != true)) {
                    this.SpeedField = value;
                    this.RaisePropertyChanged("Speed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StatusId {
            get {
                return this.StatusIdField;
            }
            set {
                if ((this.StatusIdField.Equals(value) != true)) {
                    this.StatusIdField = value;
                    this.RaisePropertyChanged("StatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusName {
            get {
                return this.StatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusNameField, value) != true)) {
                    this.StatusNameField = value;
                    this.RaisePropertyChanged("StatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalInjuriesFatalities {
            get {
                return this.TotalInjuriesFatalitiesField;
            }
            set {
                if ((this.TotalInjuriesFatalitiesField.Equals(value) != true)) {
                    this.TotalInjuriesFatalitiesField = value;
                    this.RaisePropertyChanged("TotalInjuriesFatalities");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WeatherId {
            get {
                return this.WeatherIdField;
            }
            set {
                if ((this.WeatherIdField.Equals(value) != true)) {
                    this.WeatherIdField = value;
                    this.RaisePropertyChanged("WeatherId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WeatherName {
            get {
                return this.WeatherNameField;
            }
            set {
                if ((object.ReferenceEquals(this.WeatherNameField, value) != true)) {
                    this.WeatherNameField = value;
                    this.RaisePropertyChanged("WeatherName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZoneDescription {
            get {
                return this.ZoneDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ZoneDescriptionField, value) != true)) {
                    this.ZoneDescriptionField = value;
                    this.RaisePropertyChanged("ZoneDescription");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ViolationsDetailsByLocationDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class ViolationsDetailsByLocationDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AltitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AssetCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AssetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ViolationTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ViolationTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ViolationsCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Altitude {
            get {
                return this.AltitudeField;
            }
            set {
                if ((this.AltitudeField.Equals(value) != true)) {
                    this.AltitudeField = value;
                    this.RaisePropertyChanged("Altitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AssetCode {
            get {
                return this.AssetCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.AssetCodeField, value) != true)) {
                    this.AssetCodeField = value;
                    this.RaisePropertyChanged("AssetCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AssetId {
            get {
                return this.AssetIdField;
            }
            set {
                if ((object.ReferenceEquals(this.AssetIdField, value) != true)) {
                    this.AssetIdField = value;
                    this.RaisePropertyChanged("AssetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LocationCode {
            get {
                return this.LocationCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationCodeField, value) != true)) {
                    this.LocationCodeField = value;
                    this.RaisePropertyChanged("LocationCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ViolationTypeId {
            get {
                return this.ViolationTypeIdField;
            }
            set {
                if ((this.ViolationTypeIdField.Equals(value) != true)) {
                    this.ViolationTypeIdField = value;
                    this.RaisePropertyChanged("ViolationTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ViolationTypeName {
            get {
                return this.ViolationTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ViolationTypeNameField, value) != true)) {
                    this.ViolationTypeNameField = value;
                    this.RaisePropertyChanged("ViolationTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ViolationsCount {
            get {
                return this.ViolationsCountField;
            }
            set {
                if ((this.ViolationsCountField.Equals(value) != true)) {
                    this.ViolationsCountField = value;
                    this.RaisePropertyChanged("ViolationsCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AssetLastStatusDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class AssetLastStatusDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AssetCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AssetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AssetLastStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AssetStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AssetStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AssetTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AssetTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateChangedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNoticedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AssetCode {
            get {
                return this.AssetCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.AssetCodeField, value) != true)) {
                    this.AssetCodeField = value;
                    this.RaisePropertyChanged("AssetCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AssetId {
            get {
                return this.AssetIdField;
            }
            set {
                if ((object.ReferenceEquals(this.AssetIdField, value) != true)) {
                    this.AssetIdField = value;
                    this.RaisePropertyChanged("AssetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AssetLastStatusId {
            get {
                return this.AssetLastStatusIdField;
            }
            set {
                if ((this.AssetLastStatusIdField.Equals(value) != true)) {
                    this.AssetLastStatusIdField = value;
                    this.RaisePropertyChanged("AssetLastStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AssetStatusId {
            get {
                return this.AssetStatusIdField;
            }
            set {
                if ((this.AssetStatusIdField.Equals(value) != true)) {
                    this.AssetStatusIdField = value;
                    this.RaisePropertyChanged("AssetStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AssetStatusName {
            get {
                return this.AssetStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AssetStatusNameField, value) != true)) {
                    this.AssetStatusNameField = value;
                    this.RaisePropertyChanged("AssetStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AssetTypeId {
            get {
                return this.AssetTypeIdField;
            }
            set {
                if ((this.AssetTypeIdField.Equals(value) != true)) {
                    this.AssetTypeIdField = value;
                    this.RaisePropertyChanged("AssetTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AssetTypeName {
            get {
                return this.AssetTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AssetTypeNameField, value) != true)) {
                    this.AssetTypeNameField = value;
                    this.RaisePropertyChanged("AssetTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateChanged {
            get {
                return this.DateChangedField;
            }
            set {
                if ((this.DateChangedField.Equals(value) != true)) {
                    this.DateChangedField = value;
                    this.RaisePropertyChanged("DateChanged");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNoticed {
            get {
                return this.IsNoticedField;
            }
            set {
                if ((this.IsNoticedField.Equals(value) != true)) {
                    this.IsNoticedField = value;
                    this.RaisePropertyChanged("IsNoticed");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatrolLastLocationDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class PatrolLastLocationDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> AltitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long CurrentTaskIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> ETATimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsBusyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNoticedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRecommendedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LocationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> LongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberOfAssignedIncidentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OfficerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatrolCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long PatrolIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] PatrolImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long PatrolLatLocationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid PatrolOriginalIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatrolPlateNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> StatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isPatrolField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Altitude {
            get {
                return this.AltitudeField;
            }
            set {
                if ((this.AltitudeField.Equals(value) != true)) {
                    this.AltitudeField = value;
                    this.RaisePropertyChanged("Altitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long CurrentTaskId {
            get {
                return this.CurrentTaskIdField;
            }
            set {
                if ((this.CurrentTaskIdField.Equals(value) != true)) {
                    this.CurrentTaskIdField = value;
                    this.RaisePropertyChanged("CurrentTaskId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> ETATime {
            get {
                return this.ETATimeField;
            }
            set {
                if ((this.ETATimeField.Equals(value) != true)) {
                    this.ETATimeField = value;
                    this.RaisePropertyChanged("ETATime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsBusy {
            get {
                return this.IsBusyField;
            }
            set {
                if ((this.IsBusyField.Equals(value) != true)) {
                    this.IsBusyField = value;
                    this.RaisePropertyChanged("IsBusy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNoticed {
            get {
                return this.IsNoticedField;
            }
            set {
                if ((this.IsNoticedField.Equals(value) != true)) {
                    this.IsNoticedField = value;
                    this.RaisePropertyChanged("IsNoticed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRecommended {
            get {
                return this.IsRecommendedField;
            }
            set {
                if ((this.IsRecommendedField.Equals(value) != true)) {
                    this.IsRecommendedField = value;
                    this.RaisePropertyChanged("IsRecommended");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LocationDate {
            get {
                return this.LocationDateField;
            }
            set {
                if ((this.LocationDateField.Equals(value) != true)) {
                    this.LocationDateField = value;
                    this.RaisePropertyChanged("LocationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberOfAssignedIncident {
            get {
                return this.NumberOfAssignedIncidentField;
            }
            set {
                if ((this.NumberOfAssignedIncidentField.Equals(value) != true)) {
                    this.NumberOfAssignedIncidentField = value;
                    this.RaisePropertyChanged("NumberOfAssignedIncident");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OfficerName {
            get {
                return this.OfficerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OfficerNameField, value) != true)) {
                    this.OfficerNameField = value;
                    this.RaisePropertyChanged("OfficerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatrolCode {
            get {
                return this.PatrolCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.PatrolCodeField, value) != true)) {
                    this.PatrolCodeField = value;
                    this.RaisePropertyChanged("PatrolCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long PatrolId {
            get {
                return this.PatrolIdField;
            }
            set {
                if ((this.PatrolIdField.Equals(value) != true)) {
                    this.PatrolIdField = value;
                    this.RaisePropertyChanged("PatrolId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] PatrolImage {
            get {
                return this.PatrolImageField;
            }
            set {
                if ((object.ReferenceEquals(this.PatrolImageField, value) != true)) {
                    this.PatrolImageField = value;
                    this.RaisePropertyChanged("PatrolImage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long PatrolLatLocationId {
            get {
                return this.PatrolLatLocationIdField;
            }
            set {
                if ((this.PatrolLatLocationIdField.Equals(value) != true)) {
                    this.PatrolLatLocationIdField = value;
                    this.RaisePropertyChanged("PatrolLatLocationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid PatrolOriginalId {
            get {
                return this.PatrolOriginalIdField;
            }
            set {
                if ((this.PatrolOriginalIdField.Equals(value) != true)) {
                    this.PatrolOriginalIdField = value;
                    this.RaisePropertyChanged("PatrolOriginalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatrolPlateNo {
            get {
                return this.PatrolPlateNoField;
            }
            set {
                if ((object.ReferenceEquals(this.PatrolPlateNoField, value) != true)) {
                    this.PatrolPlateNoField = value;
                    this.RaisePropertyChanged("PatrolPlateNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Speed {
            get {
                return this.SpeedField;
            }
            set {
                if ((this.SpeedField.Equals(value) != true)) {
                    this.SpeedField = value;
                    this.RaisePropertyChanged("Speed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> StatusId {
            get {
                return this.StatusIdField;
            }
            set {
                if ((this.StatusIdField.Equals(value) != true)) {
                    this.StatusIdField = value;
                    this.RaisePropertyChanged("StatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusName {
            get {
                return this.StatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusNameField, value) != true)) {
                    this.StatusNameField = value;
                    this.RaisePropertyChanged("StatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isDeleted {
            get {
                return this.isDeletedField;
            }
            set {
                if ((this.isDeletedField.Equals(value) != true)) {
                    this.isDeletedField = value;
                    this.RaisePropertyChanged("isDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isPatrol {
            get {
                return this.isPatrolField;
            }
            set {
                if ((this.isPatrolField.Equals(value) != true)) {
                    this.isPatrolField = value;
                    this.RaisePropertyChanged("isPatrol");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatrolStatusDimDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class PatrolStatusDimDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatrolStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatrolStatusIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatrolStatus {
            get {
                return this.PatrolStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.PatrolStatusField, value) != true)) {
                    this.PatrolStatusField = value;
                    this.RaisePropertyChanged("PatrolStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatrolStatusId {
            get {
                return this.PatrolStatusIdField;
            }
            set {
                if ((this.PatrolStatusIdField.Equals(value) != true)) {
                    this.PatrolStatusIdField = value;
                    this.RaisePropertyChanged("PatrolStatusId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AssetTypeDimDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class AssetTypeDimDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AssetTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AssetTypeIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AssetType {
            get {
                return this.AssetTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.AssetTypeField, value) != true)) {
                    this.AssetTypeField = value;
                    this.RaisePropertyChanged("AssetType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AssetTypeId {
            get {
                return this.AssetTypeIdField;
            }
            set {
                if ((this.AssetTypeIdField.Equals(value) != true)) {
                    this.AssetTypeIdField = value;
                    this.RaisePropertyChanged("AssetTypeId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AssetStatusDimDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class AssetStatusDimDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AssetStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AssetStatusIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AssetStatus {
            get {
                return this.AssetStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.AssetStatusField, value) != true)) {
                    this.AssetStatusField = value;
                    this.RaisePropertyChanged("AssetStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AssetStatusId {
            get {
                return this.AssetStatusIdField;
            }
            set {
                if ((this.AssetStatusIdField.Equals(value) != true)) {
                    this.AssetStatusIdField = value;
                    this.RaisePropertyChanged("AssetStatusId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ViolationTypeDimDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class ViolationTypeDimDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ViolationTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ViolationTypeIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ViolationType {
            get {
                return this.ViolationTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ViolationTypeField, value) != true)) {
                    this.ViolationTypeField = value;
                    this.RaisePropertyChanged("ViolationType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ViolationTypeId {
            get {
                return this.ViolationTypeIdField;
            }
            set {
                if ((this.ViolationTypeIdField.Equals(value) != true)) {
                    this.ViolationTypeIdField = value;
                    this.RaisePropertyChanged("ViolationTypeId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ViolationsCountPerDayOfWeekDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class ViolationsCountPerDayOfWeekDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DayOfWeekField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DayOfWeek {
            get {
                return this.DayOfWeekField;
            }
            set {
                if ((object.ReferenceEquals(this.DayOfWeekField, value) != true)) {
                    this.DayOfWeekField = value;
                    this.RaisePropertyChanged("DayOfWeek");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ViolationsCountPerDayOfWeekAndHourDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class ViolationsCountPerDayOfWeekAndHourDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DayOfWeekField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ViolationHourField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DayOfWeek {
            get {
                return this.DayOfWeekField;
            }
            set {
                if ((object.ReferenceEquals(this.DayOfWeekField, value) != true)) {
                    this.DayOfWeekField = value;
                    this.RaisePropertyChanged("DayOfWeek");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ViolationHour {
            get {
                return this.ViolationHourField;
            }
            set {
                if ((this.ViolationHourField.Equals(value) != true)) {
                    this.ViolationHourField = value;
                    this.RaisePropertyChanged("ViolationHour");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ViolationsCountGroupedByTypeDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class ViolationsCountGroupedByTypeDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ViolationTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ViolationTypeNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ViolationTypeId {
            get {
                return this.ViolationTypeIdField;
            }
            set {
                if ((this.ViolationTypeIdField.Equals(value) != true)) {
                    this.ViolationTypeIdField = value;
                    this.RaisePropertyChanged("ViolationTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ViolationTypeName {
            get {
                return this.ViolationTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ViolationTypeNameField, value) != true)) {
                    this.ViolationTypeNameField = value;
                    this.RaisePropertyChanged("ViolationTypeName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ViolationsCountGroupedByLocationDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class ViolationsCountGroupedByLocationDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LongitudeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LocationCode {
            get {
                return this.LocationCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationCodeField, value) != true)) {
                    this.LocationCodeField = value;
                    this.RaisePropertyChanged("LocationCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IncidentDetailsDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class IncidentDetailsDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AssignedPatrolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DispatchingTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IncidentAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IncidentFinishTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IncidentStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IncidentTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IncidentTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatrolArrivedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string XMLField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AssignedPatrol {
            get {
                return this.AssignedPatrolField;
            }
            set {
                if ((object.ReferenceEquals(this.AssignedPatrolField, value) != true)) {
                    this.AssignedPatrolField = value;
                    this.RaisePropertyChanged("AssignedPatrol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comments {
            get {
                return this.CommentsField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentsField, value) != true)) {
                    this.CommentsField = value;
                    this.RaisePropertyChanged("Comments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DispatchingTime {
            get {
                return this.DispatchingTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.DispatchingTimeField, value) != true)) {
                    this.DispatchingTimeField = value;
                    this.RaisePropertyChanged("DispatchingTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IncidentAddress {
            get {
                return this.IncidentAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.IncidentAddressField, value) != true)) {
                    this.IncidentAddressField = value;
                    this.RaisePropertyChanged("IncidentAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IncidentFinishTime {
            get {
                return this.IncidentFinishTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.IncidentFinishTimeField, value) != true)) {
                    this.IncidentFinishTimeField = value;
                    this.RaisePropertyChanged("IncidentFinishTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IncidentStatus {
            get {
                return this.IncidentStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.IncidentStatusField, value) != true)) {
                    this.IncidentStatusField = value;
                    this.RaisePropertyChanged("IncidentStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IncidentTime {
            get {
                return this.IncidentTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.IncidentTimeField, value) != true)) {
                    this.IncidentTimeField = value;
                    this.RaisePropertyChanged("IncidentTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IncidentType {
            get {
                return this.IncidentTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.IncidentTypeField, value) != true)) {
                    this.IncidentTypeField = value;
                    this.RaisePropertyChanged("IncidentType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Lat {
            get {
                return this.LatField;
            }
            set {
                if ((this.LatField.Equals(value) != true)) {
                    this.LatField = value;
                    this.RaisePropertyChanged("Lat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Lon {
            get {
                return this.LonField;
            }
            set {
                if ((this.LonField.Equals(value) != true)) {
                    this.LonField = value;
                    this.RaisePropertyChanged("Lon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatrolArrived {
            get {
                return this.PatrolArrivedField;
            }
            set {
                if ((object.ReferenceEquals(this.PatrolArrivedField, value) != true)) {
                    this.PatrolArrivedField = value;
                    this.RaisePropertyChanged("PatrolArrived");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string XML {
            get {
                return this.XMLField;
            }
            set {
                if ((object.ReferenceEquals(this.XMLField, value) != true)) {
                    this.XMLField = value;
                    this.RaisePropertyChanged("XML");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ViolationDetailsDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class ViolationDetailsDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetDetailsForViolation AssetsDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.TotalViolationValuesByStatus[] TotalsByStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.TotalViolationValuesByTypes[] TotalsByTypesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string XMLField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetDetailsForViolation AssetsDetails {
            get {
                return this.AssetsDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.AssetsDetailsField, value) != true)) {
                    this.AssetsDetailsField = value;
                    this.RaisePropertyChanged("AssetsDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Lat {
            get {
                return this.LatField;
            }
            set {
                if ((this.LatField.Equals(value) != true)) {
                    this.LatField = value;
                    this.RaisePropertyChanged("Lat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Lon {
            get {
                return this.LonField;
            }
            set {
                if ((this.LonField.Equals(value) != true)) {
                    this.LonField = value;
                    this.RaisePropertyChanged("Lon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.TotalViolationValuesByStatus[] TotalsByStatus {
            get {
                return this.TotalsByStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.TotalsByStatusField, value) != true)) {
                    this.TotalsByStatusField = value;
                    this.RaisePropertyChanged("TotalsByStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.TotalViolationValuesByTypes[] TotalsByTypes {
            get {
                return this.TotalsByTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.TotalsByTypesField, value) != true)) {
                    this.TotalsByTypesField = value;
                    this.RaisePropertyChanged("TotalsByTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string XML {
            get {
                return this.XMLField;
            }
            set {
                if ((object.ReferenceEquals(this.XMLField, value) != true)) {
                    this.XMLField = value;
                    this.RaisePropertyChanged("XML");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AssetDetailsForViolation", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class AssetDetailsForViolation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AssetNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AssetStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastMainteanceDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VendorNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AssetName {
            get {
                return this.AssetNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AssetNameField, value) != true)) {
                    this.AssetNameField = value;
                    this.RaisePropertyChanged("AssetName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AssetStatus {
            get {
                return this.AssetStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.AssetStatusField, value) != true)) {
                    this.AssetStatusField = value;
                    this.RaisePropertyChanged("AssetStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastMainteanceDate {
            get {
                return this.LastMainteanceDateField;
            }
            set {
                if ((object.ReferenceEquals(this.LastMainteanceDateField, value) != true)) {
                    this.LastMainteanceDateField = value;
                    this.RaisePropertyChanged("LastMainteanceDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VendorName {
            get {
                return this.VendorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VendorNameField, value) != true)) {
                    this.VendorNameField = value;
                    this.RaisePropertyChanged("VendorName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TotalViolationValuesByStatus", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class TotalViolationValuesByStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalCountOfViolationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VioltionStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VioltionStatusNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalCountOfViolations {
            get {
                return this.TotalCountOfViolationsField;
            }
            set {
                if ((this.TotalCountOfViolationsField.Equals(value) != true)) {
                    this.TotalCountOfViolationsField = value;
                    this.RaisePropertyChanged("TotalCountOfViolations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int VioltionStatusId {
            get {
                return this.VioltionStatusIdField;
            }
            set {
                if ((this.VioltionStatusIdField.Equals(value) != true)) {
                    this.VioltionStatusIdField = value;
                    this.RaisePropertyChanged("VioltionStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VioltionStatusName {
            get {
                return this.VioltionStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VioltionStatusNameField, value) != true)) {
                    this.VioltionStatusNameField = value;
                    this.RaisePropertyChanged("VioltionStatusName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TotalViolationValuesByTypes", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class TotalViolationValuesByTypes : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalCountOfViolationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VioltionTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VioltionTypeNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalCountOfViolations {
            get {
                return this.TotalCountOfViolationsField;
            }
            set {
                if ((this.TotalCountOfViolationsField.Equals(value) != true)) {
                    this.TotalCountOfViolationsField = value;
                    this.RaisePropertyChanged("TotalCountOfViolations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int VioltionTypeId {
            get {
                return this.VioltionTypeIdField;
            }
            set {
                if ((this.VioltionTypeIdField.Equals(value) != true)) {
                    this.VioltionTypeIdField = value;
                    this.RaisePropertyChanged("VioltionTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VioltionTypeName {
            get {
                return this.VioltionTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VioltionTypeNameField, value) != true)) {
                    this.VioltionTypeNameField = value;
                    this.RaisePropertyChanged("VioltionTypeName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatrolOfficersDetailsDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class PatrolOfficersDetailsDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAvailableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.StaffPatrolModel[] OfficersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatrolAllocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatrolCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatrolPlateNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusArabicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusEnglishField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAvailable {
            get {
                return this.IsAvailableField;
            }
            set {
                if ((this.IsAvailableField.Equals(value) != true)) {
                    this.IsAvailableField = value;
                    this.RaisePropertyChanged("IsAvailable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.StaffPatrolModel[] Officers {
            get {
                return this.OfficersField;
            }
            set {
                if ((object.ReferenceEquals(this.OfficersField, value) != true)) {
                    this.OfficersField = value;
                    this.RaisePropertyChanged("Officers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatrolAllocation {
            get {
                return this.PatrolAllocationField;
            }
            set {
                if ((object.ReferenceEquals(this.PatrolAllocationField, value) != true)) {
                    this.PatrolAllocationField = value;
                    this.RaisePropertyChanged("PatrolAllocation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatrolCode {
            get {
                return this.PatrolCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.PatrolCodeField, value) != true)) {
                    this.PatrolCodeField = value;
                    this.RaisePropertyChanged("PatrolCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatrolPlateNumber {
            get {
                return this.PatrolPlateNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PatrolPlateNumberField, value) != true)) {
                    this.PatrolPlateNumberField = value;
                    this.RaisePropertyChanged("PatrolPlateNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusArabic {
            get {
                return this.StatusArabicField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusArabicField, value) != true)) {
                    this.StatusArabicField = value;
                    this.RaisePropertyChanged("StatusArabic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusEnglish {
            get {
                return this.StatusEnglishField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusEnglishField, value) != true)) {
                    this.StatusEnglishField = value;
                    this.RaisePropertyChanged("StatusEnglish");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StaffPatrolModel", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class StaffPatrolModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImagePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MilitaryNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullName {
            get {
                return this.FullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNameField, value) != true)) {
                    this.FullNameField = value;
                    this.RaisePropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImagePath {
            get {
                return this.ImagePathField;
            }
            set {
                if ((object.ReferenceEquals(this.ImagePathField, value) != true)) {
                    this.ImagePathField = value;
                    this.RaisePropertyChanged("ImagePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MilitaryNumber {
            get {
                return this.MilitaryNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.MilitaryNumberField, value) != true)) {
                    this.MilitaryNumberField = value;
                    this.RaisePropertyChanged("MilitaryNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageTypeSOPDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class MessageTypeSOPDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MessageTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PriorityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RankField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SOPContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SOPControlNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SOPDetailsControlNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SOPDetailsDataMessageTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SOPDetailsXSLTField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SOPIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SOPListDataMessageTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SOPListXSLTField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SOPViewDetailsMessageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SOPViewListMessageIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDone {
            get {
                return this.IsDoneField;
            }
            set {
                if ((this.IsDoneField.Equals(value) != true)) {
                    this.IsDoneField = value;
                    this.RaisePropertyChanged("IsDone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MessageTypeId {
            get {
                return this.MessageTypeIdField;
            }
            set {
                if ((this.MessageTypeIdField.Equals(value) != true)) {
                    this.MessageTypeIdField = value;
                    this.RaisePropertyChanged("MessageTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageTypeName {
            get {
                return this.MessageTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageTypeNameField, value) != true)) {
                    this.MessageTypeNameField = value;
                    this.RaisePropertyChanged("MessageTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PriorityId {
            get {
                return this.PriorityIdField;
            }
            set {
                if ((this.PriorityIdField.Equals(value) != true)) {
                    this.PriorityIdField = value;
                    this.RaisePropertyChanged("PriorityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Rank {
            get {
                return this.RankField;
            }
            set {
                if ((this.RankField.Equals(value) != true)) {
                    this.RankField = value;
                    this.RaisePropertyChanged("Rank");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SOPContent {
            get {
                return this.SOPContentField;
            }
            set {
                if ((object.ReferenceEquals(this.SOPContentField, value) != true)) {
                    this.SOPContentField = value;
                    this.RaisePropertyChanged("SOPContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SOPControlName {
            get {
                return this.SOPControlNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SOPControlNameField, value) != true)) {
                    this.SOPControlNameField = value;
                    this.RaisePropertyChanged("SOPControlName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SOPDetailsControlName {
            get {
                return this.SOPDetailsControlNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SOPDetailsControlNameField, value) != true)) {
                    this.SOPDetailsControlNameField = value;
                    this.RaisePropertyChanged("SOPDetailsControlName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SOPDetailsDataMessageType {
            get {
                return this.SOPDetailsDataMessageTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.SOPDetailsDataMessageTypeField, value) != true)) {
                    this.SOPDetailsDataMessageTypeField = value;
                    this.RaisePropertyChanged("SOPDetailsDataMessageType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SOPDetailsXSLT {
            get {
                return this.SOPDetailsXSLTField;
            }
            set {
                if ((object.ReferenceEquals(this.SOPDetailsXSLTField, value) != true)) {
                    this.SOPDetailsXSLTField = value;
                    this.RaisePropertyChanged("SOPDetailsXSLT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SOPId {
            get {
                return this.SOPIdField;
            }
            set {
                if ((this.SOPIdField.Equals(value) != true)) {
                    this.SOPIdField = value;
                    this.RaisePropertyChanged("SOPId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SOPListDataMessageType {
            get {
                return this.SOPListDataMessageTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.SOPListDataMessageTypeField, value) != true)) {
                    this.SOPListDataMessageTypeField = value;
                    this.RaisePropertyChanged("SOPListDataMessageType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SOPListXSLT {
            get {
                return this.SOPListXSLTField;
            }
            set {
                if ((object.ReferenceEquals(this.SOPListXSLTField, value) != true)) {
                    this.SOPListXSLTField = value;
                    this.RaisePropertyChanged("SOPListXSLT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SOPViewDetailsMessageId {
            get {
                return this.SOPViewDetailsMessageIdField;
            }
            set {
                if ((this.SOPViewDetailsMessageIdField.Equals(value) != true)) {
                    this.SOPViewDetailsMessageIdField = value;
                    this.RaisePropertyChanged("SOPViewDetailsMessageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SOPViewListMessageId {
            get {
                return this.SOPViewListMessageIdField;
            }
            set {
                if ((this.SOPViewListMessageIdField.Equals(value) != true)) {
                    this.SOPViewListMessageIdField = value;
                    this.RaisePropertyChanged("SOPViewListMessageId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TowerActionsDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class TowerActionsDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TowerActionIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TowerActionId {
            get {
                return this.TowerActionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.TowerActionIdField, value) != true)) {
                    this.TowerActionIdField = value;
                    this.RaisePropertyChanged("TowerActionId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageTypeConvertOutput", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class MessageTypeConvertOutput : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NewXMLField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageName {
            get {
                return this.MessageNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageNameField, value) != true)) {
                    this.MessageNameField = value;
                    this.RaisePropertyChanged("MessageName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NewXML {
            get {
                return this.NewXMLField;
            }
            set {
                if ((object.ReferenceEquals(this.NewXMLField, value) != true)) {
                    this.NewXMLField = value;
                    this.RaisePropertyChanged("NewXML");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OfficersLastLocationViewDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class OfficersLastLocationViewDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AltitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CameraURLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNoticedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LocationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OfficerCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double OfficerHeartPulseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OfficerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OfficerLastLocationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OfficerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SpeedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Altitude {
            get {
                return this.AltitudeField;
            }
            set {
                if ((this.AltitudeField.Equals(value) != true)) {
                    this.AltitudeField = value;
                    this.RaisePropertyChanged("Altitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CameraURL {
            get {
                return this.CameraURLField;
            }
            set {
                if ((object.ReferenceEquals(this.CameraURLField, value) != true)) {
                    this.CameraURLField = value;
                    this.RaisePropertyChanged("CameraURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNoticed {
            get {
                return this.IsNoticedField;
            }
            set {
                if ((this.IsNoticedField.Equals(value) != true)) {
                    this.IsNoticedField = value;
                    this.RaisePropertyChanged("IsNoticed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LocationDate {
            get {
                return this.LocationDateField;
            }
            set {
                if ((this.LocationDateField.Equals(value) != true)) {
                    this.LocationDateField = value;
                    this.RaisePropertyChanged("LocationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OfficerCode {
            get {
                return this.OfficerCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.OfficerCodeField, value) != true)) {
                    this.OfficerCodeField = value;
                    this.RaisePropertyChanged("OfficerCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double OfficerHeartPulse {
            get {
                return this.OfficerHeartPulseField;
            }
            set {
                if ((this.OfficerHeartPulseField.Equals(value) != true)) {
                    this.OfficerHeartPulseField = value;
                    this.RaisePropertyChanged("OfficerHeartPulse");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OfficerId {
            get {
                return this.OfficerIdField;
            }
            set {
                if ((this.OfficerIdField.Equals(value) != true)) {
                    this.OfficerIdField = value;
                    this.RaisePropertyChanged("OfficerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OfficerLastLocationId {
            get {
                return this.OfficerLastLocationIdField;
            }
            set {
                if ((this.OfficerLastLocationIdField.Equals(value) != true)) {
                    this.OfficerLastLocationIdField = value;
                    this.RaisePropertyChanged("OfficerLastLocationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OfficerName {
            get {
                return this.OfficerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OfficerNameField, value) != true)) {
                    this.OfficerNameField = value;
                    this.RaisePropertyChanged("OfficerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Speed {
            get {
                return this.SpeedField;
            }
            set {
                if ((this.SpeedField.Equals(value) != true)) {
                    this.SpeedField = value;
                    this.RaisePropertyChanged("Speed");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PeriodCategory", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    public enum PeriodCategory : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Daily = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Weekly = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Monthly = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Yearly = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ViolationsHistoricalDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class ViolationsHistoricalDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PeriodCategory ScheduleTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsGroupedByLocationsDTO[] ViolationsByLocationsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PeriodCategory ScheduleType {
            get {
                return this.ScheduleTypeField;
            }
            set {
                if ((this.ScheduleTypeField.Equals(value) != true)) {
                    this.ScheduleTypeField = value;
                    this.RaisePropertyChanged("ScheduleType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsGroupedByLocationsDTO[] ViolationsByLocations {
            get {
                return this.ViolationsByLocationsField;
            }
            set {
                if ((object.ReferenceEquals(this.ViolationsByLocationsField, value) != true)) {
                    this.ViolationsByLocationsField = value;
                    this.RaisePropertyChanged("ViolationsByLocations");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IncidentHistoricalDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class IncidentHistoricalDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentsDTO[] IncidentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PeriodCategory ScheduleTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentsDTO[] Incidents {
            get {
                return this.IncidentsField;
            }
            set {
                if ((object.ReferenceEquals(this.IncidentsField, value) != true)) {
                    this.IncidentsField = value;
                    this.RaisePropertyChanged("Incidents");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PeriodCategory ScheduleType {
            get {
                return this.ScheduleTypeField;
            }
            set {
                if ((this.ScheduleTypeField.Equals(value) != true)) {
                    this.ScheduleTypeField = value;
                    this.RaisePropertyChanged("ScheduleType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VehicleLiveTrackingDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class VehicleLiveTrackingDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CaptureTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LicenseExpiryDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LicenseNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> LongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short OwnerAgeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerMobileNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerNationalityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateKindField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateSourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long TowerIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CaptureTime {
            get {
                return this.CaptureTimeField;
            }
            set {
                if ((this.CaptureTimeField.Equals(value) != true)) {
                    this.CaptureTimeField = value;
                    this.RaisePropertyChanged("CaptureTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LicenseExpiryDate {
            get {
                return this.LicenseExpiryDateField;
            }
            set {
                if ((this.LicenseExpiryDateField.Equals(value) != true)) {
                    this.LicenseExpiryDateField = value;
                    this.RaisePropertyChanged("LicenseExpiryDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LicenseNumber {
            get {
                return this.LicenseNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.LicenseNumberField, value) != true)) {
                    this.LicenseNumberField = value;
                    this.RaisePropertyChanged("LicenseNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short OwnerAge {
            get {
                return this.OwnerAgeField;
            }
            set {
                if ((this.OwnerAgeField.Equals(value) != true)) {
                    this.OwnerAgeField = value;
                    this.RaisePropertyChanged("OwnerAge");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnerMobileNumber {
            get {
                return this.OwnerMobileNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerMobileNumberField, value) != true)) {
                    this.OwnerMobileNumberField = value;
                    this.RaisePropertyChanged("OwnerMobileNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnerName {
            get {
                return this.OwnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerNameField, value) != true)) {
                    this.OwnerNameField = value;
                    this.RaisePropertyChanged("OwnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnerNationality {
            get {
                return this.OwnerNationalityField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerNationalityField, value) != true)) {
                    this.OwnerNationalityField = value;
                    this.RaisePropertyChanged("OwnerNationality");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateColor {
            get {
                return this.PlateColorField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateColorField, value) != true)) {
                    this.PlateColorField = value;
                    this.RaisePropertyChanged("PlateColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateKind {
            get {
                return this.PlateKindField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateKindField, value) != true)) {
                    this.PlateKindField = value;
                    this.RaisePropertyChanged("PlateKind");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateNumber {
            get {
                return this.PlateNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateNumberField, value) != true)) {
                    this.PlateNumberField = value;
                    this.RaisePropertyChanged("PlateNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateSource {
            get {
                return this.PlateSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateSourceField, value) != true)) {
                    this.PlateSourceField = value;
                    this.RaisePropertyChanged("PlateSource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateType {
            get {
                return this.PlateTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateTypeField, value) != true)) {
                    this.PlateTypeField = value;
                    this.RaisePropertyChanged("PlateType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TowerId {
            get {
                return this.TowerIdField;
            }
            set {
                if ((this.TowerIdField.Equals(value) != true)) {
                    this.TowerIdField = value;
                    this.RaisePropertyChanged("TowerId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserUserControlDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class UserUserControlDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNoticedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.NotificationDTO NotificationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long NotificationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MapNotificationPopUpDTO PopupContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PriorityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long UserUserControlsIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string XMLField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNoticed {
            get {
                return this.IsNoticedField;
            }
            set {
                if ((this.IsNoticedField.Equals(value) != true)) {
                    this.IsNoticedField = value;
                    this.RaisePropertyChanged("IsNoticed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.NotificationDTO Notification {
            get {
                return this.NotificationField;
            }
            set {
                if ((object.ReferenceEquals(this.NotificationField, value) != true)) {
                    this.NotificationField = value;
                    this.RaisePropertyChanged("Notification");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long NotificationId {
            get {
                return this.NotificationIdField;
            }
            set {
                if ((this.NotificationIdField.Equals(value) != true)) {
                    this.NotificationIdField = value;
                    this.RaisePropertyChanged("NotificationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MapNotificationPopUpDTO PopupContent {
            get {
                return this.PopupContentField;
            }
            set {
                if ((object.ReferenceEquals(this.PopupContentField, value) != true)) {
                    this.PopupContentField = value;
                    this.RaisePropertyChanged("PopupContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PriorityId {
            get {
                return this.PriorityIdField;
            }
            set {
                if ((this.PriorityIdField.Equals(value) != true)) {
                    this.PriorityIdField = value;
                    this.RaisePropertyChanged("PriorityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long UserUserControlsID {
            get {
                return this.UserUserControlsIDField;
            }
            set {
                if ((this.UserUserControlsIDField.Equals(value) != true)) {
                    this.UserUserControlsIDField = value;
                    this.RaisePropertyChanged("UserUserControlsID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string XML {
            get {
                return this.XMLField;
            }
            set {
                if ((object.ReferenceEquals(this.XMLField, value) != true)) {
                    this.XMLField = value;
                    this.RaisePropertyChanged("XML");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MapNotificationPopUpDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class MapNotificationPopUpDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DiscriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GeneralTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.TabDTO[] TabsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Discription {
            get {
                return this.DiscriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DiscriptionField, value) != true)) {
                    this.DiscriptionField = value;
                    this.RaisePropertyChanged("Discription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GeneralType {
            get {
                return this.GeneralTypeField;
            }
            set {
                if ((this.GeneralTypeField.Equals(value) != true)) {
                    this.GeneralTypeField = value;
                    this.RaisePropertyChanged("GeneralType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Lat {
            get {
                return this.LatField;
            }
            set {
                if ((this.LatField.Equals(value) != true)) {
                    this.LatField = value;
                    this.RaisePropertyChanged("Lat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Lon {
            get {
                return this.LonField;
            }
            set {
                if ((this.LonField.Equals(value) != true)) {
                    this.LonField = value;
                    this.RaisePropertyChanged("Lon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.TabDTO[] Tabs {
            get {
                return this.TabsField;
            }
            set {
                if ((object.ReferenceEquals(this.TabsField, value) != true)) {
                    this.TabsField = value;
                    this.RaisePropertyChanged("Tabs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeName {
            get {
                return this.TypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeNameField, value) != true)) {
                    this.TypeNameField = value;
                    this.RaisePropertyChanged("TypeName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TabDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class TabDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.TabItemDTO[] AttributesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TabNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.TabItemDTO[] Attributes {
            get {
                return this.AttributesField;
            }
            set {
                if ((object.ReferenceEquals(this.AttributesField, value) != true)) {
                    this.AttributesField = value;
                    this.RaisePropertyChanged("Attributes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TabName {
            get {
                return this.TabNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TabNameField, value) != true)) {
                    this.TabNameField = value;
                    this.RaisePropertyChanged("TabName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TabItemDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class TabItemDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string KeyName {
            get {
                return this.KeyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyNameField, value) != true)) {
                    this.KeyNameField = value;
                    this.RaisePropertyChanged("KeyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ValueName {
            get {
                return this.ValueNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueNameField, value) != true)) {
                    this.ValueNameField = value;
                    this.RaisePropertyChanged("ValueName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BusinessRulePriorityDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class BusinessRulePriorityDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PriorityIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriorityNameArField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriorityNameEnField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PriorityID {
            get {
                return this.PriorityIDField;
            }
            set {
                if ((this.PriorityIDField.Equals(value) != true)) {
                    this.PriorityIDField = value;
                    this.RaisePropertyChanged("PriorityID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PriorityNameAr {
            get {
                return this.PriorityNameArField;
            }
            set {
                if ((object.ReferenceEquals(this.PriorityNameArField, value) != true)) {
                    this.PriorityNameArField = value;
                    this.RaisePropertyChanged("PriorityNameAr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PriorityNameEn {
            get {
                return this.PriorityNameEnField;
            }
            set {
                if ((object.ReferenceEquals(this.PriorityNameEnField, value) != true)) {
                    this.PriorityNameEnField = value;
                    this.RaisePropertyChanged("PriorityNameEn");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OverSpeedDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class OverSpeedDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OverSpeedIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OverSpeedValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OverSpeedId {
            get {
                return this.OverSpeedIdField;
            }
            set {
                if ((this.OverSpeedIdField.Equals(value) != true)) {
                    this.OverSpeedIdField = value;
                    this.RaisePropertyChanged("OverSpeedId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OverSpeedValue {
            get {
                return this.OverSpeedValueField;
            }
            set {
                if ((this.OverSpeedValueField.Equals(value) != true)) {
                    this.OverSpeedValueField = value;
                    this.RaisePropertyChanged("OverSpeedValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrafficCrossDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class TrafficCrossDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TrafficCrossIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TrafficCrossValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TrafficCrossId {
            get {
                return this.TrafficCrossIdField;
            }
            set {
                if ((this.TrafficCrossIdField.Equals(value) != true)) {
                    this.TrafficCrossIdField = value;
                    this.RaisePropertyChanged("TrafficCrossId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TrafficCrossValue {
            get {
                return this.TrafficCrossValueField;
            }
            set {
                if ((this.TrafficCrossValueField.Equals(value) != true)) {
                    this.TrafficCrossValueField = value;
                    this.RaisePropertyChanged("TrafficCrossValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VehicleTypeDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class VehicleTypeDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VehicleTypeArField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VehicleTypeEnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VehicleTypeIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VehicleTypeAr {
            get {
                return this.VehicleTypeArField;
            }
            set {
                if ((object.ReferenceEquals(this.VehicleTypeArField, value) != true)) {
                    this.VehicleTypeArField = value;
                    this.RaisePropertyChanged("VehicleTypeAr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VehicleTypeEn {
            get {
                return this.VehicleTypeEnField;
            }
            set {
                if ((object.ReferenceEquals(this.VehicleTypeEnField, value) != true)) {
                    this.VehicleTypeEnField = value;
                    this.RaisePropertyChanged("VehicleTypeEn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int VehicleTypeID {
            get {
                return this.VehicleTypeIDField;
            }
            set {
                if ((this.VehicleTypeIDField.Equals(value) != true)) {
                    this.VehicleTypeIDField = value;
                    this.RaisePropertyChanged("VehicleTypeID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatrolDTO", Namespace="http://schemas.datacontract.org/2004/07/STC.Projects.ClassLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class PatrolDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long CurrentTaskIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPatrolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OfficerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatrolCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long PatrolIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] PatrolImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid PatrolOriginalIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatrolPlateNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long CurrentTaskId {
            get {
                return this.CurrentTaskIdField;
            }
            set {
                if ((this.CurrentTaskIdField.Equals(value) != true)) {
                    this.CurrentTaskIdField = value;
                    this.RaisePropertyChanged("CurrentTaskId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPatrol {
            get {
                return this.IsPatrolField;
            }
            set {
                if ((this.IsPatrolField.Equals(value) != true)) {
                    this.IsPatrolField = value;
                    this.RaisePropertyChanged("IsPatrol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OfficerName {
            get {
                return this.OfficerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OfficerNameField, value) != true)) {
                    this.OfficerNameField = value;
                    this.RaisePropertyChanged("OfficerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatrolCode {
            get {
                return this.PatrolCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.PatrolCodeField, value) != true)) {
                    this.PatrolCodeField = value;
                    this.RaisePropertyChanged("PatrolCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long PatrolId {
            get {
                return this.PatrolIdField;
            }
            set {
                if ((this.PatrolIdField.Equals(value) != true)) {
                    this.PatrolIdField = value;
                    this.RaisePropertyChanged("PatrolId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] PatrolImage {
            get {
                return this.PatrolImageField;
            }
            set {
                if ((object.ReferenceEquals(this.PatrolImageField, value) != true)) {
                    this.PatrolImageField = value;
                    this.RaisePropertyChanged("PatrolImage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid PatrolOriginalId {
            get {
                return this.PatrolOriginalIdField;
            }
            set {
                if ((this.PatrolOriginalIdField.Equals(value) != true)) {
                    this.PatrolOriginalIdField = value;
                    this.RaisePropertyChanged("PatrolOriginalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatrolPlateNo {
            get {
                return this.PatrolPlateNoField;
            }
            set {
                if ((object.ReferenceEquals(this.PatrolPlateNoField, value) != true)) {
                    this.PatrolPlateNoField = value;
                    this.RaisePropertyChanged("PatrolPlateNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StatusId {
            get {
                return this.StatusIdField;
            }
            set {
                if ((this.StatusIdField.Equals(value) != true)) {
                    this.StatusIdField = value;
                    this.RaisePropertyChanged("StatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusName {
            get {
                return this.StatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusNameField, value) != true)) {
                    this.StatusNameField = value;
                    this.RaisePropertyChanged("StatusName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceLayerReference.IServiceLayer")]
    public interface IServiceLayer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsRegionComparisonYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsRegionComparisonYearlyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsRegionComparisonYearly(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsRegionComparisonYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsRegionComparisonYearlyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsRegionComparisonYearlyAsync(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsRegionComparisonMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsRegionComparisonMonthlyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsRegionComparisonMonthly(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsRegionComparisonMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsRegionComparisonMonthlyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsRegionComparisonMonthlyAsync(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsRegionComparisonWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsRegionComparisonWeeklyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsRegionComparisonWeekly(System.DateTime firstWeek, System.DateTime secondWeek);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsRegionComparisonWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsRegionComparisonWeeklyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsRegionComparisonWeeklyAsync(System.DateTime firstWeek, System.DateTime secondWeek);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsRegionComparisonDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsRegionComparisonDailyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsRegionComparisonDaily(System.DateTime firstDay, System.DateTime secondDay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsRegionComparisonDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsRegionComparisonDailyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsRegionComparisonDailyAsync(System.DateTime firstDay, System.DateTime secondDay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsRegionComparisonYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsRegionComparisonYearlyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsRegionComparisonYearly(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsRegionComparisonYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsRegionComparisonYearlyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsRegionComparisonYearlyAsync(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsRegionComparisonMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsRegionComparisonMonthlyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsRegionComparisonMonthly(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsRegionComparisonMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsRegionComparisonMonthlyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsRegionComparisonMonthlyAsync(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsRegionComparisonWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsRegionComparisonWeeklyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsRegionComparisonWeekly(System.DateTime firstWeek, System.DateTime secondWeek);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsRegionComparisonWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsRegionComparisonWeeklyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsRegionComparisonWeeklyAsync(System.DateTime firstWeek, System.DateTime secondWeek);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsRegionComparisonDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsRegionComparisonDailyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsRegionComparisonDaily(System.DateTime firstDay, System.DateTime secondDay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsRegionComparisonDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsRegionComparisonDailyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsRegionComparisonDailyAsync(System.DateTime firstDay, System.DateTime secondDay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationsRegionComparisonYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationsRegionComparisonYearlyResp" +
            "onse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationsRegionComparisonYearly(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationsRegionComparisonYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationsRegionComparisonYearlyResp" +
            "onse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationsRegionComparisonYearlyAsync(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationsRegionComparisonMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationsRegionComparisonMonthlyRes" +
            "ponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationsRegionComparisonMonthly(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationsRegionComparisonMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationsRegionComparisonMonthlyRes" +
            "ponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationsRegionComparisonMonthlyAsync(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationsRegionComparisonWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationsRegionComparisonWeeklyResp" +
            "onse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationsRegionComparisonWeekly(System.DateTime firstWeek, System.DateTime secondWeek);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationsRegionComparisonWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationsRegionComparisonWeeklyResp" +
            "onse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationsRegionComparisonWeeklyAsync(System.DateTime firstWeek, System.DateTime secondWeek);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationsRegionComparisonDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationsRegionComparisonDailyRespo" +
            "nse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationsRegionComparisonDaily(System.DateTime firstDay, System.DateTime secondDay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationsRegionComparisonDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationsRegionComparisonDailyRespo" +
            "nse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationsRegionComparisonDailyAsync(System.DateTime firstDay, System.DateTime secondDay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsStatisticalYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsStatisticalYearlyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsStatisticalYearly();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsStatisticalYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsStatisticalYearlyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsStatisticalYearlyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsStaticsticalMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsStaticsticalMonthlyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsStaticsticalMonthly(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsStaticsticalMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsStaticsticalMonthlyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsStaticsticalMonthlyAsync(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsStaticsticalWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsStaticsticalWeeklyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsStaticsticalWeekly(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsStaticsticalWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsStaticsticalWeeklyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsStaticsticalWeeklyAsync(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsStatisticalDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsStatisticalDailyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsStatisticalDaily(System.DateTime weekStartDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsStatisticalDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsStatisticalDailyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsStatisticalDailyAsync(System.DateTime weekStartDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsStatisticalYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsStatisticalYearlyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsStatisticalYearly();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsStatisticalYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsStatisticalYearlyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsStatisticalYearlyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsStaticsticalMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsStaticsticalMonthlyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsStaticsticalMonthly(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsStaticsticalMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsStaticsticalMonthlyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsStaticsticalMonthlyAsync(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsStaticsticalWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsStaticsticalWeeklyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsStaticsticalWeekly(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsStaticsticalWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsStaticsticalWeeklyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsStaticsticalWeeklyAsync(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsStatisticalDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsStatisticalDailyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsStatisticalDaily(System.DateTime weekStartDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsStatisticalDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsStatisticalDailyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsStatisticalDailyAsync(System.DateTime weekStartDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsStatisticalYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsStatisticalYearlyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsStatisticalYearly();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsStatisticalYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsStatisticalYearlyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsStatisticalYearlyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsStaticsticalMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsStaticsticalMonthlyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsStaticsticalMonthly(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsStaticsticalMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsStaticsticalMonthlyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsStaticsticalMonthlyAsync(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsStaticsticalWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsStaticsticalWeeklyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsStaticsticalWeekly(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsStaticsticalWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsStaticsticalWeeklyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsStaticsticalWeeklyAsync(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsStatisticalDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsStatisticalDailyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsStatisticalDaily(System.DateTime weekStartDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsStatisticalDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsStatisticalDailyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsStatisticalDailyAsync(System.DateTime weekStartDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationsStatisticalYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationsStatisticalYearlyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationsStatisticalYearly();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationsStatisticalYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationsStatisticalYearlyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationsStatisticalYearlyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationsStaticsticalMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationsStaticsticalMonthlyRespons" +
            "e")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationsStaticsticalMonthly(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationsStaticsticalMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationsStaticsticalMonthlyRespons" +
            "e")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationsStaticsticalMonthlyAsync(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationsStaticsticalWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationsStaticsticalWeeklyResponse" +
            "")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationsStaticsticalWeekly(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationsStaticsticalWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationsStaticsticalWeeklyResponse" +
            "")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationsStaticsticalWeeklyAsync(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationsStatisticalDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationsStatisticalDailyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationsStatisticalDaily(System.DateTime weekStartDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationsStatisticalDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationsStatisticalDailyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationsStatisticalDailyAsync(System.DateTime weekStartDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsComparisonYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsComparisonYearlyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsComparisonYearly(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsComparisonYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsComparisonYearlyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsComparisonYearlyAsync(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsComparisonMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsComparisonMonthlyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsComparisonMonthly(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsComparisonMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsComparisonMonthlyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsComparisonMonthlyAsync(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsComparisonWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsComparisonWeeklyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsComparisonWeekly(System.DateTime firstWeek, System.DateTime secondWeek);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsComparisonWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsComparisonWeeklyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsComparisonWeeklyAsync(System.DateTime firstWeek, System.DateTime secondWeek);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsComparisonDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsComparisonDailyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsComparisonDaily(System.DateTime firstDay, System.DateTime secondDay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsComparisonDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsComparisonDailyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsComparisonDailyAsync(System.DateTime firstDay, System.DateTime secondDay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsComparisonYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsComparisonYearlyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsComparisonYearly(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsComparisonYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsComparisonYearlyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsComparisonYearlyAsync(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsComparisonMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsComparisonMonthlyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsComparisonMonthly(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsComparisonMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsComparisonMonthlyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsComparisonMonthlyAsync(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsComparisonWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsComparisonWeeklyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsComparisonWeekly(System.DateTime firstWeek, System.DateTime secondWeek);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsComparisonWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsComparisonWeeklyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsComparisonWeeklyAsync(System.DateTime firstWeek, System.DateTime secondWeek);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsComparisonDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsComparisonDailyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsComparisonDaily(System.DateTime firstDay, System.DateTime secondDay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsComparisonDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsComparisonDailyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsComparisonDailyAsync(System.DateTime firstDay, System.DateTime secondDay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsComparisonYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsComparisonYearlyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsComparisonYearly(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsComparisonYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsComparisonYearlyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsComparisonYearlyAsync(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsComparisonMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsComparisonMonthlyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsComparisonMonthly(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsComparisonMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsComparisonMonthlyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsComparisonMonthlyAsync(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsComparisonWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsComparisonWeeklyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsComparisonWeekly(System.DateTime firstWeek, System.DateTime secondWeek);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsComparisonWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsComparisonWeeklyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsComparisonWeeklyAsync(System.DateTime firstWeek, System.DateTime secondWeek);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsComparisonDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsComparisonDailyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsComparisonDaily(System.DateTime firstDay, System.DateTime secondDay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsComparisonDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsComparisonDailyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsComparisonDailyAsync(System.DateTime firstDay, System.DateTime secondDay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationsComparisonYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationsComparisonYearlyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationsComparisonYearly(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationsComparisonYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationsComparisonYearlyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationsComparisonYearlyAsync(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationsComparisonMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationsComparisonMonthlyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationsComparisonMonthly(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationsComparisonMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationsComparisonMonthlyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationsComparisonMonthlyAsync(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationsComparisonWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationsComparisonWeeklyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationsComparisonWeekly(System.DateTime firstWeek, System.DateTime secondWeek);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationsComparisonWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationsComparisonWeeklyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationsComparisonWeeklyAsync(System.DateTime firstWeek, System.DateTime secondWeek);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationsComparisonDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationsComparisonDailyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationsComparisonDaily(System.DateTime firstDay, System.DateTime secondDay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationsComparisonDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationsComparisonDailyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationsComparisonDailyAsync(System.DateTime firstDay, System.DateTime secondDay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsTarget", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsTargetResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsTarget();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsTarget", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsTargetResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsTargetAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationTarget", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationTargetResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationTarget();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationTarget", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationTargetResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationTargetAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsTarget", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsTargetResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsTarget();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsTarget", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsTargetResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsTargetAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationTarget", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationTargetResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationTarget();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationTarget", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationTargetResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationTargetAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetMainDashboard", ReplyAction="http://tempuri.org/IServiceLayer/GetMainDashboardResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDetailsDTO[] GetMainDashboard(string language);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetMainDashboard", ReplyAction="http://tempuri.org/IServiceLayer/GetMainDashboardResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDetailsDTO[]> GetMainDashboardAsync(string language);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetFatalitiyTarget", ReplyAction="http://tempuri.org/IServiceLayer/GetFatalitiyTargetResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetFatalitiyTarget();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetFatalitiyTarget", ReplyAction="http://tempuri.org/IServiceLayer/GetFatalitiyTargetResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetFatalitiyTargetAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsCountPerAsset", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsCountPerAssetResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountForMapDTO[] GetViolationsCountPerAsset(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PeriodType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsCountPerAsset", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsCountPerAssetResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountForMapDTO[]> GetViolationsCountPerAssetAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PeriodType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsAvailableYears", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsAvailableYearsResponse")]
        int[] GetViolationsAvailableYears();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsAvailableYears", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsAvailableYearsResponse")]
        System.Threading.Tasks.Task<int[]> GetViolationsAvailableYearsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsAvailableYears", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsAvailableYearsResponse")]
        int[] GetIncidentsAvailableYears();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsAvailableYears", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsAvailableYearsResponse")]
        System.Threading.Tasks.Task<int[]> GetIncidentsAvailableYearsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentFirstDate", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentFirstDateResponse")]
        System.DateTime GetIncidentFirstDate();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentFirstDate", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentFirstDateResponse")]
        System.Threading.Tasks.Task<System.DateTime> GetIncidentFirstDateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/PublishToFacebook", ReplyAction="http://tempuri.org/IServiceLayer/PublishToFacebookResponse")]
        bool PublishToFacebook(string post, byte[] imageBytes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/PublishToFacebook", ReplyAction="http://tempuri.org/IServiceLayer/PublishToFacebookResponse")]
        System.Threading.Tasks.Task<bool> PublishToFacebookAsync(string post, byte[] imageBytes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/PublishToTwitter", ReplyAction="http://tempuri.org/IServiceLayer/PublishToTwitterResponse")]
        bool PublishToTwitter(string post, byte[] imageBytes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/PublishToTwitter", ReplyAction="http://tempuri.org/IServiceLayer/PublishToTwitterResponse")]
        System.Threading.Tasks.Task<bool> PublishToTwitterAsync(string post, byte[] imageBytes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAllUsersList", ReplyAction="http://tempuri.org/IServiceLayer/GetAllUsersListResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UsersDTO[] GetAllUsersList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAllUsersList", ReplyAction="http://tempuri.org/IServiceLayer/GetAllUsersListResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UsersDTO[]> GetAllUsersListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/AddUser", ReplyAction="http://tempuri.org/IServiceLayer/AddUserResponse")]
        bool AddUser(string userPassword, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UsersDTO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/AddUser", ReplyAction="http://tempuri.org/IServiceLayer/AddUserResponse")]
        System.Threading.Tasks.Task<bool> AddUserAsync(string userPassword, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UsersDTO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/UpdateUser", ReplyAction="http://tempuri.org/IServiceLayer/UpdateUserResponse")]
        bool UpdateUser(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UsersDTO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/UpdateUser", ReplyAction="http://tempuri.org/IServiceLayer/UpdateUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UsersDTO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/DeactivateUser", ReplyAction="http://tempuri.org/IServiceLayer/DeactivateUserResponse")]
        bool DeactivateUser(int userId, bool isActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/DeactivateUser", ReplyAction="http://tempuri.org/IServiceLayer/DeactivateUserResponse")]
        System.Threading.Tasks.Task<bool> DeactivateUserAsync(int userId, bool isActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/DeleteUser", ReplyAction="http://tempuri.org/IServiceLayer/DeleteUserResponse")]
        bool DeleteUser(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UsersDTO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/DeleteUser", ReplyAction="http://tempuri.org/IServiceLayer/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UsersDTO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/AddRank", ReplyAction="http://tempuri.org/IServiceLayer/AddRankResponse")]
        bool AddRank(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.RanksDTO Rank);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/AddRank", ReplyAction="http://tempuri.org/IServiceLayer/AddRankResponse")]
        System.Threading.Tasks.Task<bool> AddRankAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.RanksDTO Rank);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/UpdateRank", ReplyAction="http://tempuri.org/IServiceLayer/UpdateRankResponse")]
        bool UpdateRank(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.RanksDTO Rank);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/UpdateRank", ReplyAction="http://tempuri.org/IServiceLayer/UpdateRankResponse")]
        System.Threading.Tasks.Task<bool> UpdateRankAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.RanksDTO Rank);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/DeleteRank", ReplyAction="http://tempuri.org/IServiceLayer/DeleteRankResponse")]
        bool DeleteRank(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.RanksDTO Rank);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/DeleteRank", ReplyAction="http://tempuri.org/IServiceLayer/DeleteRankResponse")]
        System.Threading.Tasks.Task<bool> DeleteRankAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.RanksDTO Rank);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/AddFeature", ReplyAction="http://tempuri.org/IServiceLayer/AddFeatureResponse")]
        bool AddFeature(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.FeaturesDTO Feature);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/AddFeature", ReplyAction="http://tempuri.org/IServiceLayer/AddFeatureResponse")]
        System.Threading.Tasks.Task<bool> AddFeatureAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.FeaturesDTO Feature);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/UpdateFeature", ReplyAction="http://tempuri.org/IServiceLayer/UpdateFeatureResponse")]
        bool UpdateFeature(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.FeaturesDTO Feature);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/UpdateFeature", ReplyAction="http://tempuri.org/IServiceLayer/UpdateFeatureResponse")]
        System.Threading.Tasks.Task<bool> UpdateFeatureAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.FeaturesDTO Feature);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/DeleteFeature", ReplyAction="http://tempuri.org/IServiceLayer/DeleteFeatureResponse")]
        bool DeleteFeature(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.FeaturesDTO Feature);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/DeleteFeature", ReplyAction="http://tempuri.org/IServiceLayer/DeleteFeatureResponse")]
        System.Threading.Tasks.Task<bool> DeleteFeatureAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.FeaturesDTO Feature);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetRanksList", ReplyAction="http://tempuri.org/IServiceLayer/GetRanksListResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.RanksDTO[] GetRanksList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetRanksList", ReplyAction="http://tempuri.org/IServiceLayer/GetRanksListResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.RanksDTO[]> GetRanksListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetFeaturesList", ReplyAction="http://tempuri.org/IServiceLayer/GetFeaturesListResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.FeaturesDTO[] GetFeaturesList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetFeaturesList", ReplyAction="http://tempuri.org/IServiceLayer/GetFeaturesListResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.FeaturesDTO[]> GetFeaturesListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/AddUserRole", ReplyAction="http://tempuri.org/IServiceLayer/AddUserRoleResponse")]
        bool AddUserRole(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UserRolesDTO role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/AddUserRole", ReplyAction="http://tempuri.org/IServiceLayer/AddUserRoleResponse")]
        System.Threading.Tasks.Task<bool> AddUserRoleAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UserRolesDTO role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/UpdateUserRole", ReplyAction="http://tempuri.org/IServiceLayer/UpdateUserRoleResponse")]
        bool UpdateUserRole(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UserRolesDTO role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/UpdateUserRole", ReplyAction="http://tempuri.org/IServiceLayer/UpdateUserRoleResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserRoleAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UserRolesDTO role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/DeleteUserRole", ReplyAction="http://tempuri.org/IServiceLayer/DeleteUserRoleResponse")]
        bool DeleteUserRole(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UserRolesDTO role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/DeleteUserRole", ReplyAction="http://tempuri.org/IServiceLayer/DeleteUserRoleResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserRoleAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UserRolesDTO role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetUserRolesList", ReplyAction="http://tempuri.org/IServiceLayer/GetUserRolesListResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UserRolesDTO[] GetUserRolesList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetUserRolesList", ReplyAction="http://tempuri.org/IServiceLayer/GetUserRolesListResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UserRolesDTO[]> GetUserRolesListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetUserById", ReplyAction="http://tempuri.org/IServiceLayer/GetUserByIdResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UsersDTO GetUserById(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetUserById", ReplyAction="http://tempuri.org/IServiceLayer/GetUserByIdResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UsersDTO> GetUserByIdAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/Login", ReplyAction="http://tempuri.org/IServiceLayer/LoginResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UsersDTO Login(string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/Login", ReplyAction="http://tempuri.org/IServiceLayer/LoginResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UsersDTO> LoginAsync(string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetSupervisorId", ReplyAction="http://tempuri.org/IServiceLayer/GetSupervisorIdResponse")]
        int GetSupervisorId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetSupervisorId", ReplyAction="http://tempuri.org/IServiceLayer/GetSupervisorIdResponse")]
        System.Threading.Tasks.Task<int> GetSupervisorIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/SendNotification", ReplyAction="http://tempuri.org/IServiceLayer/SendNotificationResponse")]
        string SendNotification(string[] deviceRegIds, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/SendNotification", ReplyAction="http://tempuri.org/IServiceLayer/SendNotificationResponse")]
        System.Threading.Tasks.Task<string> SendNotificationAsync(string[] deviceRegIds, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetActivePublicUsers", ReplyAction="http://tempuri.org/IServiceLayer/GetActivePublicUsersResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PublicUserDTO[] GetActivePublicUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetActivePublicUsers", ReplyAction="http://tempuri.org/IServiceLayer/GetActivePublicUsersResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PublicUserDTO[]> GetActivePublicUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/SaveSupervisorNotification", ReplyAction="http://tempuri.org/IServiceLayer/SaveSupervisorNotificationResponse")]
        bool SaveSupervisorNotification(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.SupervisorNotificationDTO supervisorNotification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/SaveSupervisorNotification", ReplyAction="http://tempuri.org/IServiceLayer/SaveSupervisorNotificationResponse")]
        System.Threading.Tasks.Task<bool> SaveSupervisorNotificationAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.SupervisorNotificationDTO supervisorNotification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetSupervisorNotificationById", ReplyAction="http://tempuri.org/IServiceLayer/GetSupervisorNotificationByIdResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.SupervisorNotificationDTO GetSupervisorNotificationById(int supervisorNotificationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetSupervisorNotificationById", ReplyAction="http://tempuri.org/IServiceLayer/GetSupervisorNotificationByIdResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.SupervisorNotificationDTO> GetSupervisorNotificationByIdAsync(int supervisorNotificationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetSupervisorNotificationsByUserId", ReplyAction="http://tempuri.org/IServiceLayer/GetSupervisorNotificationsByUserIdResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.SupervisorNotificationDTO[] GetSupervisorNotificationsByUserId(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetSupervisorNotificationsByUserId", ReplyAction="http://tempuri.org/IServiceLayer/GetSupervisorNotificationsByUserIdResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.SupervisorNotificationDTO[]> GetSupervisorNotificationsByUserIdAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/SetSupervisorNotificationNoticed", ReplyAction="http://tempuri.org/IServiceLayer/SetSupervisorNotificationNoticedResponse")]
        bool SetSupervisorNotificationNoticed(long notificationId, bool isNoticed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/SetSupervisorNotificationNoticed", ReplyAction="http://tempuri.org/IServiceLayer/SetSupervisorNotificationNoticedResponse")]
        System.Threading.Tasks.Task<bool> SetSupervisorNotificationNoticedAsync(long notificationId, bool isNoticed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetCorrelationLogByVehicleDetails", ReplyAction="http://tempuri.org/IServiceLayer/GetCorrelationLogByVehicleDetailsResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CorrelationMessagesLogDTO[] GetCorrelationLogByVehicleDetails(string plateNumber, string plateColor, string plateSource, string plateKind);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetCorrelationLogByVehicleDetails", ReplyAction="http://tempuri.org/IServiceLayer/GetCorrelationLogByVehicleDetailsResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CorrelationMessagesLogDTO[]> GetCorrelationLogByVehicleDetailsAsync(string plateNumber, string plateColor, string plateSource, string plateKind);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetCorelationsLogByBusinessRule", ReplyAction="http://tempuri.org/IServiceLayer/GetCorelationsLogByBusinessRuleResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CorrelationMessagesLogDTO[] GetCorelationsLogByBusinessRule(int businessRuleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetCorelationsLogByBusinessRule", ReplyAction="http://tempuri.org/IServiceLayer/GetCorelationsLogByBusinessRuleResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CorrelationMessagesLogDTO[]> GetCorelationsLogByBusinessRuleAsync(int businessRuleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/IsDangerousVehicleActive", ReplyAction="http://tempuri.org/IServiceLayer/IsDangerousVehicleActiveResponse")]
        bool IsDangerousVehicleActive(string plateNumber, string plateColor, string plateSource, string plateKind);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/IsDangerousVehicleActive", ReplyAction="http://tempuri.org/IServiceLayer/IsDangerousVehicleActiveResponse")]
        System.Threading.Tasks.Task<bool> IsDangerousVehicleActiveAsync(string plateNumber, string plateColor, string plateSource, string plateKind);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/DeactivateDangeriousVehicle", ReplyAction="http://tempuri.org/IServiceLayer/DeactivateDangeriousVehicleResponse")]
        void DeactivateDangeriousVehicle(string plateNumber, string plateColor, string plateSource, string plateKind);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/DeactivateDangeriousVehicle", ReplyAction="http://tempuri.org/IServiceLayer/DeactivateDangeriousVehicleResponse")]
        System.Threading.Tasks.Task DeactivateDangeriousVehicleAsync(string plateNumber, string plateColor, string plateSource, string plateKind);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/DeactivateDangerousViolatorList", ReplyAction="http://tempuri.org/IServiceLayer/DeactivateDangerousViolatorListResponse")]
        void DeactivateDangerousViolatorList(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PlateDetailsDTO[] vehicles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/DeactivateDangerousViolatorList", ReplyAction="http://tempuri.org/IServiceLayer/DeactivateDangerousViolatorListResponse")]
        System.Threading.Tasks.Task DeactivateDangerousViolatorListAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PlateDetailsDTO[] vehicles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAssetLocation", ReplyAction="http://tempuri.org/IServiceLayer/GetAssetLocationResponse")]
        string GetAssetLocation(int assetId, bool isArabic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAssetLocation", ReplyAction="http://tempuri.org/IServiceLayer/GetAssetLocationResponse")]
        System.Threading.Tasks.Task<string> GetAssetLocationAsync(int assetId, bool isArabic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAssetSerialNumber", ReplyAction="http://tempuri.org/IServiceLayer/GetAssetSerialNumberResponse")]
        string GetAssetSerialNumber(long assetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAssetSerialNumber", ReplyAction="http://tempuri.org/IServiceLayer/GetAssetSerialNumberResponse")]
        System.Threading.Tasks.Task<string> GetAssetSerialNumberAsync(long assetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAllTargetsList", ReplyAction="http://tempuri.org/IServiceLayer/GetAllTargetsListResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.KpiDTO[] GetAllTargetsList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAllTargetsList", ReplyAction="http://tempuri.org/IServiceLayer/GetAllTargetsListResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.KpiDTO[]> GetAllTargetsListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAllTargets", ReplyAction="http://tempuri.org/IServiceLayer/GetAllTargetsResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.KPITargetDTO[] GetAllTargets();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAllTargets", ReplyAction="http://tempuri.org/IServiceLayer/GetAllTargetsResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.KPITargetDTO[]> GetAllTargetsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/UpdateKPITarget", ReplyAction="http://tempuri.org/IServiceLayer/UpdateKPITargetResponse")]
        bool UpdateKPITarget(string keyname, double newValue, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/UpdateKPITarget", ReplyAction="http://tempuri.org/IServiceLayer/UpdateKPITargetResponse")]
        System.Threading.Tasks.Task<bool> UpdateKPITargetAsync(string keyname, double newValue, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/AddToViolationQueue", ReplyAction="http://tempuri.org/IServiceLayer/AddToViolationQueueResponse")]
        void AddToViolationQueue(string ViolationTypeName, int ViolationTypeId, string PlateNumber, string PlateKind, string PlateColor, string PlateSource, double Latitude, double Longitude, int VehicleType, bool IsInsideCity, int SpeedLimit, int SpeedTolerance, int CurrentSpeed, int TrafficCrossElapsedTimeSecs, string SerialNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/AddToViolationQueue", ReplyAction="http://tempuri.org/IServiceLayer/AddToViolationQueueResponse")]
        System.Threading.Tasks.Task AddToViolationQueueAsync(string ViolationTypeName, int ViolationTypeId, string PlateNumber, string PlateKind, string PlateColor, string PlateSource, double Latitude, double Longitude, int VehicleType, bool IsInsideCity, int SpeedLimit, int SpeedTolerance, int CurrentSpeed, int TrafficCrossElapsedTimeSecs, string SerialNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAssetViolations", ReplyAction="http://tempuri.org/IServiceLayer/GetAssetViolationsResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetViolationDetailsDTO GetAssetViolations(string originalIdent, string lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAssetViolations", ReplyAction="http://tempuri.org/IServiceLayer/GetAssetViolationsResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetViolationDetailsDTO> GetAssetViolationsAsync(string originalIdent, string lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAllAssets", ReplyAction="http://tempuri.org/IServiceLayer/GetAllAssetsResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsViewDTO[] GetAllAssets();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAllAssets", ReplyAction="http://tempuri.org/IServiceLayer/GetAllAssetsResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsViewDTO[]> GetAllAssetsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousVehicleViolations", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousVehicleViolationsResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[] GetDangerousVehicleViolations(System.Nullable<System.DateTime> StartDateTime, System.Nullable<System.DateTime> EndDateTime, string PlateNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousVehicleViolations", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousVehicleViolationsResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[]> GetDangerousVehicleViolationsAsync(System.Nullable<System.DateTime> StartDateTime, System.Nullable<System.DateTime> EndDateTime, string PlateNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousVehicleDetailsByPlateNumber", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousVehicleDetailsByPlateNumberResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.DangerousVehicleDetailsDTO GetDangerousVehicleDetailsByPlateNumber(string plateNumber, string lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousVehicleDetailsByPlateNumber", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousVehicleDetailsByPlateNumberResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.DangerousVehicleDetailsDTO> GetDangerousVehicleDetailsByPlateNumberAsync(string plateNumber, string lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/AddNewEvent", ReplyAction="http://tempuri.org/IServiceLayer/AddNewEventResponse")]
        bool AddNewEvent(string XmlToSend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/AddNewEvent", ReplyAction="http://tempuri.org/IServiceLayer/AddNewEventResponse")]
        System.Threading.Tasks.Task<bool> AddNewEventAsync(string XmlToSend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetMessageBusinessRule", ReplyAction="http://tempuri.org/IServiceLayer/GetMessageBusinessRuleResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.BusinessRulesDTO GetMessageBusinessRule(long messageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetMessageBusinessRule", ReplyAction="http://tempuri.org/IServiceLayer/GetMessageBusinessRuleResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.BusinessRulesDTO> GetMessageBusinessRuleAsync(long messageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/AddWantedCarEventManualy", ReplyAction="http://tempuri.org/IServiceLayer/AddWantedCarEventManualyResponse")]
        void AddWantedCarEventManualy(string plateNumber, string plateCategory, string plateSource, string plateColor, System.DateTime violationDate, string lang, string ruleName, string ruleId, double lat, double lon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/AddWantedCarEventManualy", ReplyAction="http://tempuri.org/IServiceLayer/AddWantedCarEventManualyResponse")]
        System.Threading.Tasks.Task AddWantedCarEventManualyAsync(string plateNumber, string plateCategory, string plateSource, string plateColor, System.DateTime violationDate, string lang, string ruleName, string ruleId, double lat, double lon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/AddWantedCarEvent", ReplyAction="http://tempuri.org/IServiceLayer/AddWantedCarEventResponse")]
        void AddWantedCarEvent(string plateNumber, System.DateTime violationDate, string lang, string ruleName, string ruleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/AddWantedCarEvent", ReplyAction="http://tempuri.org/IServiceLayer/AddWantedCarEventResponse")]
        System.Threading.Tasks.Task AddWantedCarEventAsync(string plateNumber, System.DateTime violationDate, string lang, string ruleName, string ruleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationCountMonthAndCity", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationCountMonthAndCityResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationCountMonthAndCity();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationCountMonthAndCity", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationCountMonthAndCityResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationCountMonthAndCityAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetWantedCarRadius", ReplyAction="http://tempuri.org/IServiceLayer/GetWantedCarRadiusResponse")]
        decimal GetWantedCarRadius();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetWantedCarRadius", ReplyAction="http://tempuri.org/IServiceLayer/GetWantedCarRadiusResponse")]
        System.Threading.Tasks.Task<decimal> GetWantedCarRadiusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsListGroupedByLocation", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsListGroupedByLocationResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsGroupedByLocationsDTO[] GetViolationsListGroupedByLocation(System.Nullable<System.DateTime> StartDateTime, System.Nullable<int> ViolationTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsListGroupedByLocation", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsListGroupedByLocationResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsGroupedByLocationsDTO[]> GetViolationsListGroupedByLocationAsync(System.Nullable<System.DateTime> StartDateTime, System.Nullable<int> ViolationTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetUpdatedViolationsList", ReplyAction="http://tempuri.org/IServiceLayer/GetUpdatedViolationsListResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[] GetUpdatedViolationsList(System.Nullable<bool> IsNoticed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetUpdatedViolationsList", ReplyAction="http://tempuri.org/IServiceLayer/GetUpdatedViolationsListResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[]> GetUpdatedViolationsListAsync(System.Nullable<bool> IsNoticed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationListByVehicle", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationListByVehicleResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[] GetViolationListByVehicle(string plateNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationListByVehicle", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationListByVehicleResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[]> GetViolationListByVehicleAsync(string plateNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsListByDate", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsListByDateResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[] GetViolationsListByDate(System.Nullable<System.DateTime> StartDateTime, System.Nullable<System.DateTime> EndDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsListByDate", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsListByDateResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[]> GetViolationsListByDateAsync(System.Nullable<System.DateTime> StartDateTime, System.Nullable<System.DateTime> EndDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsListByDate", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsListByDateResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentsDTO[] GetIncidentsListByDate(System.Nullable<System.DateTime> StartDateTime, System.Nullable<System.DateTime> EndDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsListByDate", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsListByDateResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentsDTO[]> GetIncidentsListByDateAsync(System.Nullable<System.DateTime> StartDateTime, System.Nullable<System.DateTime> EndDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsDetailsForLocation", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsDetailsForLocationResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsDetailsByLocationDTO[] GetViolationsDetailsForLocation(string LocationCode, System.Nullable<System.DateTime> StartDateTime, System.Nullable<int> ViolationTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsDetailsForLocation", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsDetailsForLocationResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsDetailsByLocationDTO[]> GetViolationsDetailsForLocationAsync(string LocationCode, System.Nullable<System.DateTime> StartDateTime, System.Nullable<int> ViolationTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetActiveIncidentsList", ReplyAction="http://tempuri.org/IServiceLayer/GetActiveIncidentsListResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentsDTO[] GetActiveIncidentsList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetActiveIncidentsList", ReplyAction="http://tempuri.org/IServiceLayer/GetActiveIncidentsListResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentsDTO[]> GetActiveIncidentsListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentDetails", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentDetailsResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentsDTO GetIncidentDetails(int IncidentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentDetails", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentDetailsResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentsDTO> GetIncidentDetailsAsync(int IncidentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAssetsList", ReplyAction="http://tempuri.org/IServiceLayer/GetAssetsListResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsViewDTO[] GetAssetsList(System.Nullable<int> AssetStatusId, System.Nullable<int> AssetTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAssetsList", ReplyAction="http://tempuri.org/IServiceLayer/GetAssetsListResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsViewDTO[]> GetAssetsListAsync(System.Nullable<int> AssetStatusId, System.Nullable<int> AssetTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAssetsListBySource", ReplyAction="http://tempuri.org/IServiceLayer/GetAssetsListBySourceResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsViewDTO[] GetAssetsListBySource(System.Nullable<int> AssetStatusId, System.Nullable<int> AssetTypeId, System.Nullable<int> sourceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAssetsListBySource", ReplyAction="http://tempuri.org/IServiceLayer/GetAssetsListBySourceResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsViewDTO[]> GetAssetsListBySourceAsync(System.Nullable<int> AssetStatusId, System.Nullable<int> AssetTypeId, System.Nullable<int> sourceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAssetsLastStatusList", ReplyAction="http://tempuri.org/IServiceLayer/GetAssetsLastStatusListResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetLastStatusDTO[] GetAssetsLastStatusList(System.Nullable<bool> IsNoticed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAssetsLastStatusList", ReplyAction="http://tempuri.org/IServiceLayer/GetAssetsLastStatusListResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetLastStatusDTO[]> GetAssetsLastStatusListAsync(System.Nullable<bool> IsNoticed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetPatrolsList", ReplyAction="http://tempuri.org/IServiceLayer/GetPatrolsListResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PatrolLastLocationDTO[] GetPatrolsList(System.Nullable<int> PatrolStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetPatrolsList", ReplyAction="http://tempuri.org/IServiceLayer/GetPatrolsListResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PatrolLastLocationDTO[]> GetPatrolsListAsync(System.Nullable<int> PatrolStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAllPatrolsList", ReplyAction="http://tempuri.org/IServiceLayer/GetAllPatrolsListResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PatrolLastLocationDTO[] GetAllPatrolsList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAllPatrolsList", ReplyAction="http://tempuri.org/IServiceLayer/GetAllPatrolsListResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PatrolLastLocationDTO[]> GetAllPatrolsListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetEventsList", ReplyAction="http://tempuri.org/IServiceLayer/GetEventsListResponse")]
        void GetEventsList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetEventsList", ReplyAction="http://tempuri.org/IServiceLayer/GetEventsListResponse")]
        System.Threading.Tasks.Task GetEventsListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetPatrolStatusList", ReplyAction="http://tempuri.org/IServiceLayer/GetPatrolStatusListResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PatrolStatusDimDTO[] GetPatrolStatusList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetPatrolStatusList", ReplyAction="http://tempuri.org/IServiceLayer/GetPatrolStatusListResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PatrolStatusDimDTO[]> GetPatrolStatusListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAssetTypesList", ReplyAction="http://tempuri.org/IServiceLayer/GetAssetTypesListResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetTypeDimDTO[] GetAssetTypesList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAssetTypesList", ReplyAction="http://tempuri.org/IServiceLayer/GetAssetTypesListResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetTypeDimDTO[]> GetAssetTypesListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAssetStatusList", ReplyAction="http://tempuri.org/IServiceLayer/GetAssetStatusListResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetStatusDimDTO[] GetAssetStatusList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAssetStatusList", ReplyAction="http://tempuri.org/IServiceLayer/GetAssetStatusListResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetStatusDimDTO[]> GetAssetStatusListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationTypesList", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationTypesListResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationTypeDimDTO[] GetViolationTypesList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationTypesList", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationTypesListResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationTypeDimDTO[]> GetViolationTypesListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsCountPerDayOfWeek", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsCountPerDayOfWeekResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountPerDayOfWeekDTO[] GetViolationsCountPerDayOfWeek();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsCountPerDayOfWeek", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsCountPerDayOfWeekResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountPerDayOfWeekDTO[]> GetViolationsCountPerDayOfWeekAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsCountPerDayOfWeekAndHour", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsCountPerDayOfWeekAndHourResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountPerDayOfWeekAndHourDTO[] GetViolationsCountPerDayOfWeekAndHour();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsCountPerDayOfWeekAndHour", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsCountPerDayOfWeekAndHourResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountPerDayOfWeekAndHourDTO[]> GetViolationsCountPerDayOfWeekAndHourAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsCountGroupedByType", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsCountGroupedByTypeResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountGroupedByTypeDTO[] GetViolationsCountGroupedByType();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsCountGroupedByType", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsCountGroupedByTypeResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountGroupedByTypeDTO[]> GetViolationsCountGroupedByTypeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsCountGroupedByTypePerDayOfWeek", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsCountGroupedByTypePerDayOfWeekRespo" +
            "nse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountGroupedByTypeDTO[] GetViolationsCountGroupedByTypePerDayOfWeek(string dayofWeek);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsCountGroupedByTypePerDayOfWeek", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsCountGroupedByTypePerDayOfWeekRespo" +
            "nse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountGroupedByTypeDTO[]> GetViolationsCountGroupedByTypePerDayOfWeekAsync(string dayofWeek);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsCountGroupedByTypePerDayOfWeekAndHo" +
            "ur", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsCountGroupedByTypePerDayOfWeekAndHo" +
            "urResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountGroupedByTypeDTO[] GetViolationsCountGroupedByTypePerDayOfWeekAndHour(string dayofWeek, int hour);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsCountGroupedByTypePerDayOfWeekAndHo" +
            "ur", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsCountGroupedByTypePerDayOfWeekAndHo" +
            "urResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountGroupedByTypeDTO[]> GetViolationsCountGroupedByTypePerDayOfWeekAndHourAsync(string dayofWeek, int hour);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsCountGroupedByLocation", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsCountGroupedByLocationResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountGroupedByLocationDTO[] GetViolationsCountGroupedByLocation();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsCountGroupedByLocation", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsCountGroupedByLocationResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountGroupedByLocationDTO[]> GetViolationsCountGroupedByLocationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsCountGroupedByLocationPerDayOfWeek", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsCountGroupedByLocationPerDayOfWeekR" +
            "esponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountGroupedByLocationDTO[] GetViolationsCountGroupedByLocationPerDayOfWeek(string dayofWeek);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsCountGroupedByLocationPerDayOfWeek", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsCountGroupedByLocationPerDayOfWeekR" +
            "esponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountGroupedByLocationDTO[]> GetViolationsCountGroupedByLocationPerDayOfWeekAsync(string dayofWeek);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsCountGroupedByLocationPerDayOfWeekA" +
            "ndHour", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsCountGroupedByLocationPerDayOfWeekA" +
            "ndHourResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountGroupedByLocationDTO[] GetViolationsCountGroupedByLocationPerDayOfWeekAndHour(string dayofWeek, int hour);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsCountGroupedByLocationPerDayOfWeekA" +
            "ndHour", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsCountGroupedByLocationPerDayOfWeekA" +
            "ndHourResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountGroupedByLocationDTO[]> GetViolationsCountGroupedByLocationPerDayOfWeekAndHourAsync(string dayofWeek, int hour);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetMaxNotificationsCount", ReplyAction="http://tempuri.org/IServiceLayer/GetMaxNotificationsCountResponse")]
        int GetMaxNotificationsCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetMaxNotificationsCount", ReplyAction="http://tempuri.org/IServiceLayer/GetMaxNotificationsCountResponse")]
        System.Threading.Tasks.Task<int> GetMaxNotificationsCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentFullDetails", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentFullDetailsResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentDetailsDTO GetIncidentFullDetails(int IncidentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentFullDetails", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentFullDetailsResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentDetailsDTO> GetIncidentFullDetailsAsync(int IncidentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationDetailsByAsset", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationDetailsByAssetResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationDetailsDTO GetViolationDetailsByAsset(string LocationCode, System.Nullable<System.DateTime> StartDateTime, System.Nullable<int> ViolationTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationDetailsByAsset", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationDetailsByAssetResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationDetailsDTO> GetViolationDetailsByAssetAsync(string LocationCode, System.Nullable<System.DateTime> StartDateTime, System.Nullable<int> ViolationTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetPatrolDetails", ReplyAction="http://tempuri.org/IServiceLayer/GetPatrolDetailsResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PatrolOfficersDetailsDTO GetPatrolDetails(int PatrolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetPatrolDetails", ReplyAction="http://tempuri.org/IServiceLayer/GetPatrolDetailsResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PatrolOfficersDetailsDTO> GetPatrolDetailsAsync(int PatrolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/SaveSendControlToUsers", ReplyAction="http://tempuri.org/IServiceLayer/SaveSendControlToUsersResponse")]
        bool SaveSendControlToUsers(string xmlToSend, string[] Usernames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/SaveSendControlToUsers", ReplyAction="http://tempuri.org/IServiceLayer/SaveSendControlToUsersResponse")]
        System.Threading.Tasks.Task<bool> SaveSendControlToUsersAsync(string xmlToSend, string[] Usernames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetMessageTypeSOP", ReplyAction="http://tempuri.org/IServiceLayer/GetMessageTypeSOPResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MessageTypeSOPDTO[] GetMessageTypeSOP(int MessageType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetMessageTypeSOP", ReplyAction="http://tempuri.org/IServiceLayer/GetMessageTypeSOPResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MessageTypeSOPDTO[]> GetMessageTypeSOPAsync(int MessageType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetMessageTypeSOPs", ReplyAction="http://tempuri.org/IServiceLayer/GetMessageTypeSOPsResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MessageTypeSOPDTO[] GetMessageTypeSOPs(int MessageType, int MessageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetMessageTypeSOPs", ReplyAction="http://tempuri.org/IServiceLayer/GetMessageTypeSOPsResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MessageTypeSOPDTO[]> GetMessageTypeSOPsAsync(int MessageType, int MessageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetNearByTowersByLatLon", ReplyAction="http://tempuri.org/IServiceLayer/GetNearByTowersByLatLonResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsViewDTO[] GetNearByTowersByLatLon(double longitude, double latitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetNearByTowersByLatLon", ReplyAction="http://tempuri.org/IServiceLayer/GetNearByTowersByLatLonResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsViewDTO[]> GetNearByTowersByLatLonAsync(double longitude, double latitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetNearByRadarsByLatLon", ReplyAction="http://tempuri.org/IServiceLayer/GetNearByRadarsByLatLonResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsViewDTO[] GetNearByRadarsByLatLon(double longitude, double latitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetNearByRadarsByLatLon", ReplyAction="http://tempuri.org/IServiceLayer/GetNearByRadarsByLatLonResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsViewDTO[]> GetNearByRadarsByLatLonAsync(double longitude, double latitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetNearByCamerasByLatLon", ReplyAction="http://tempuri.org/IServiceLayer/GetNearByCamerasByLatLonResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsViewDTO[] GetNearByCamerasByLatLon(double longitude, double latitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetNearByCamerasByLatLon", ReplyAction="http://tempuri.org/IServiceLayer/GetNearByCamerasByLatLonResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsViewDTO[]> GetNearByCamerasByLatLonAsync(double longitude, double latitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAllTowerActions", ReplyAction="http://tempuri.org/IServiceLayer/GetAllTowerActionsResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.TowerActionsDTO[] GetAllTowerActions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAllTowerActions", ReplyAction="http://tempuri.org/IServiceLayer/GetAllTowerActionsResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.TowerActionsDTO[]> GetAllTowerActionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetRadiusForNearByAssets", ReplyAction="http://tempuri.org/IServiceLayer/GetRadiusForNearByAssetsResponse")]
        double GetRadiusForNearByAssets();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetRadiusForNearByAssets", ReplyAction="http://tempuri.org/IServiceLayer/GetRadiusForNearByAssetsResponse")]
        System.Threading.Tasks.Task<double> GetRadiusForNearByAssetsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/ConvertXML", ReplyAction="http://tempuri.org/IServiceLayer/ConvertXMLResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MessageTypeConvertOutput ConvertXML(string xml, int generalTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/ConvertXML", ReplyAction="http://tempuri.org/IServiceLayer/ConvertXMLResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MessageTypeConvertOutput> ConvertXMLAsync(string xml, int generalTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAllTowerCameras", ReplyAction="http://tempuri.org/IServiceLayer/GetAllTowerCamerasResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsDetailsViewDTO[] GetAllTowerCameras(long TowerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAllTowerCameras", ReplyAction="http://tempuri.org/IServiceLayer/GetAllTowerCamerasResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsDetailsViewDTO[]> GetAllTowerCamerasAsync(long TowerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetOfficersList", ReplyAction="http://tempuri.org/IServiceLayer/GetOfficersListResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.OfficersLastLocationViewDTO[] GetOfficersList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetOfficersList", ReplyAction="http://tempuri.org/IServiceLayer/GetOfficersListResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.OfficersLastLocationViewDTO[]> GetOfficersListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetNearByPatrolsByLatLon", ReplyAction="http://tempuri.org/IServiceLayer/GetNearByPatrolsByLatLonResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PatrolLastLocationDTO[] GetNearByPatrolsByLatLon(double longitude, double latitude, int patrolsCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetNearByPatrolsByLatLon", ReplyAction="http://tempuri.org/IServiceLayer/GetNearByPatrolsByLatLonResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PatrolLastLocationDTO[]> GetNearByPatrolsByLatLonAsync(double longitude, double latitude, int patrolsCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationHistoricalViewByDate", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationHistoricalViewByDateResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsHistoricalDTO[] GetViolationHistoricalViewByDate(System.DateTime StartDateTime, System.Nullable<System.DateTime> EndDateTime, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PeriodCategory ScheduleType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationHistoricalViewByDate", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationHistoricalViewByDateResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsHistoricalDTO[]> GetViolationHistoricalViewByDateAsync(System.DateTime StartDateTime, System.Nullable<System.DateTime> EndDateTime, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PeriodCategory ScheduleType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentHistoricalViewByDate", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentHistoricalViewByDateResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentHistoricalDTO[] GetIncidentHistoricalViewByDate(System.DateTime StartDateTime, System.Nullable<System.DateTime> EndDateTime, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PeriodCategory ScheduleType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentHistoricalViewByDate", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentHistoricalViewByDateResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentHistoricalDTO[]> GetIncidentHistoricalViewByDateAsync(System.DateTime StartDateTime, System.Nullable<System.DateTime> EndDateTime, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PeriodCategory ScheduleType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsHistoricalListByDate", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsHistoricalListByDateResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentsDTO[] GetIncidentsHistoricalListByDate(System.DateTime StartDateTime, System.Nullable<System.DateTime> EndDateTime, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PeriodCategory ScheduleType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsHistoricalListByDate", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsHistoricalListByDateResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentsDTO[]> GetIncidentsHistoricalListByDateAsync(System.DateTime StartDateTime, System.Nullable<System.DateTime> EndDateTime, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PeriodCategory ScheduleType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentHistoricalDetails", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentHistoricalDetailsResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentsDTO GetIncidentHistoricalDetails(int IncidentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentHistoricalDetails", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentHistoricalDetailsResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentsDTO> GetIncidentHistoricalDetailsAsync(int IncidentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsHistorySearchByDate", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsHistorySearchByDateResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[] GetViolationsHistorySearchByDate(System.Nullable<System.DateTime> StartDateTime, System.Nullable<System.DateTime> EndDateTime, string PlateNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsHistorySearchByDate", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsHistorySearchByDateResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[]> GetViolationsHistorySearchByDateAsync(System.Nullable<System.DateTime> StartDateTime, System.Nullable<System.DateTime> EndDateTime, string PlateNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetVehicleDetailsByPlateNumber", ReplyAction="http://tempuri.org/IServiceLayer/GetVehicleDetailsByPlateNumberResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.VehicleLiveTrackingDTO GetVehicleDetailsByPlateNumber(string plateNumer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetVehicleDetailsByPlateNumber", ReplyAction="http://tempuri.org/IServiceLayer/GetVehicleDetailsByPlateNumberResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.VehicleLiveTrackingDTO> GetVehicleDetailsByPlateNumberAsync(string plateNumer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsDetailsByAsset", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsDetailsByAssetResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[] GetViolationsDetailsByAsset(string serialNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsDetailsByAsset", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsDetailsByAssetResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[]> GetViolationsDetailsByAssetAsync(string serialNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsCountByAsset", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsCountByAssetResponse")]
        int GetViolationsCountByAsset(System.Nullable<System.DateTime> StartDateTime, System.Nullable<System.DateTime> EndDateTime, string serialNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsCountByAsset", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsCountByAssetResponse")]
        System.Threading.Tasks.Task<int> GetViolationsCountByAssetAsync(System.Nullable<System.DateTime> StartDateTime, System.Nullable<System.DateTime> EndDateTime, string serialNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetHistoricalViolationsListGroupedByLocation", ReplyAction="http://tempuri.org/IServiceLayer/GetHistoricalViolationsListGroupedByLocationResp" +
            "onse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsGroupedByLocationsDTO[] GetHistoricalViolationsListGroupedByLocation(System.Nullable<System.DateTime> StartDateTime, System.Nullable<System.DateTime> EndDateTime, System.Nullable<int> ViolationTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetHistoricalViolationsListGroupedByLocation", ReplyAction="http://tempuri.org/IServiceLayer/GetHistoricalViolationsListGroupedByLocationResp" +
            "onse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsGroupedByLocationsDTO[]> GetHistoricalViolationsListGroupedByLocationAsync(System.Nullable<System.DateTime> StartDateTime, System.Nullable<System.DateTime> EndDateTime, System.Nullable<int> ViolationTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationImageURLsById", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationImageURLsByIdResponse")]
        string[] GetViolationImageURLsById(long ViolationNotificationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationImageURLsById", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationImageURLsByIdResponse")]
        System.Threading.Tasks.Task<string[]> GetViolationImageURLsByIdAsync(long ViolationNotificationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationImagesById", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationImagesByIdResponse")]
        byte[][] GetViolationImagesById(long ViolationNotificationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationImagesById", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationImagesByIdResponse")]
        System.Threading.Tasks.Task<byte[][]> GetViolationImagesByIdAsync(long ViolationNotificationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationVideoURLById", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationVideoURLByIdResponse")]
        string GetViolationVideoURLById(long ViolationNotificationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationVideoURLById", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationVideoURLByIdResponse")]
        System.Threading.Tasks.Task<string> GetViolationVideoURLByIdAsync(long ViolationNotificationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationCountPerSpeedAndTime", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationCountPerSpeedAndTimeResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationCountPerSpeedAndTime();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationCountPerSpeedAndTime", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationCountPerSpeedAndTimeResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationCountPerSpeedAndTimeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationPerMonthAndViolationType", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationPerMonthAndViolationTypeResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationPerMonthAndViolationType();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationPerMonthAndViolationType", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationPerMonthAndViolationTypeResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationPerMonthAndViolationTypeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationPerVehicleTypeAndDayOfWeek", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationPerVehicleTypeAndDayOfWeekResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationPerVehicleTypeAndDayOfWeek();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationPerVehicleTypeAndDayOfWeek", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationPerVehicleTypeAndDayOfWeekResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationPerVehicleTypeAndDayOfWeekAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/ChangeNotificationStatus", ReplyAction="http://tempuri.org/IServiceLayer/ChangeNotificationStatusResponse")]
        bool ChangeNotificationStatus(long NotificationId, int NewStatus, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/ChangeNotificationStatus", ReplyAction="http://tempuri.org/IServiceLayer/ChangeNotificationStatusResponse")]
        System.Threading.Tasks.Task<bool> ChangeNotificationStatusAsync(long NotificationId, int NewStatus, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetLatestViolationNotification", ReplyAction="http://tempuri.org/IServiceLayer/GetLatestViolationNotificationResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[] GetLatestViolationNotification();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetLatestViolationNotification", ReplyAction="http://tempuri.org/IServiceLayer/GetLatestViolationNotificationResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[]> GetLatestViolationNotificationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetLatestIncidents", ReplyAction="http://tempuri.org/IServiceLayer/GetLatestIncidentsResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentsDTO[] GetLatestIncidents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetLatestIncidents", ReplyAction="http://tempuri.org/IServiceLayer/GetLatestIncidentsResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentsDTO[]> GetLatestIncidentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetLatestEvents", ReplyAction="http://tempuri.org/IServiceLayer/GetLatestEventsResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UserUserControlDTO[] GetLatestEvents(int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetLatestEvents", ReplyAction="http://tempuri.org/IServiceLayer/GetLatestEventsResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UserUserControlDTO[]> GetLatestEventsAsync(int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/UpdateAssetValue", ReplyAction="http://tempuri.org/IServiceLayer/UpdateAssetValueResponse")]
        bool UpdateAssetValue(long AssetId, string NewValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/UpdateAssetValue", ReplyAction="http://tempuri.org/IServiceLayer/UpdateAssetValueResponse")]
        System.Threading.Tasks.Task<bool> UpdateAssetValueAsync(long AssetId, string NewValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/SaveSOPNotificationLog", ReplyAction="http://tempuri.org/IServiceLayer/SaveSOPNotificationLogResponse")]
        bool SaveSOPNotificationLog(int sopStepId, long notificationId, System.Nullable<int> sopCommandId, int userId, string previousValue, string currentValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/SaveSOPNotificationLog", ReplyAction="http://tempuri.org/IServiceLayer/SaveSOPNotificationLogResponse")]
        System.Threading.Tasks.Task<bool> SaveSOPNotificationLogAsync(int sopStepId, long notificationId, System.Nullable<int> sopCommandId, int userId, string previousValue, string currentValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/AddTruckViolationEvent", ReplyAction="http://tempuri.org/IServiceLayer/AddTruckViolationEventResponse")]
        void AddTruckViolationEvent(string plateNumber, System.DateTime violationDate, double lat, double lon, string lang, string assetSerial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/AddTruckViolationEvent", ReplyAction="http://tempuri.org/IServiceLayer/AddTruckViolationEventResponse")]
        System.Threading.Tasks.Task AddTruckViolationEventAsync(string plateNumber, System.DateTime violationDate, double lat, double lon, string lang, string assetSerial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAllBusinessRules", ReplyAction="http://tempuri.org/IServiceLayer/GetAllBusinessRulesResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.BusinessRulesDTO[] GetAllBusinessRules(bool IsAcivatedOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAllBusinessRules", ReplyAction="http://tempuri.org/IServiceLayer/GetAllBusinessRulesResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.BusinessRulesDTO[]> GetAllBusinessRulesAsync(bool IsAcivatedOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/SaveBusinessRule", ReplyAction="http://tempuri.org/IServiceLayer/SaveBusinessRuleResponse")]
        bool SaveBusinessRule(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.BusinessRulesDTO businessRule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/SaveBusinessRule", ReplyAction="http://tempuri.org/IServiceLayer/SaveBusinessRuleResponse")]
        System.Threading.Tasks.Task<bool> SaveBusinessRuleAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.BusinessRulesDTO businessRule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetBusinessRuleByID", ReplyAction="http://tempuri.org/IServiceLayer/GetBusinessRuleByIDResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.BusinessRulesDTO GetBusinessRuleByID(int businessRuleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetBusinessRuleByID", ReplyAction="http://tempuri.org/IServiceLayer/GetBusinessRuleByIDResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.BusinessRulesDTO> GetBusinessRuleByIDAsync(int businessRuleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAllPriorities", ReplyAction="http://tempuri.org/IServiceLayer/GetAllPrioritiesResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.BusinessRulePriorityDTO[] GetAllPriorities();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAllPriorities", ReplyAction="http://tempuri.org/IServiceLayer/GetAllPrioritiesResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.BusinessRulePriorityDTO[]> GetAllPrioritiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAllOverSpeed", ReplyAction="http://tempuri.org/IServiceLayer/GetAllOverSpeedResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.OverSpeedDTO[] GetAllOverSpeed();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAllOverSpeed", ReplyAction="http://tempuri.org/IServiceLayer/GetAllOverSpeedResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.OverSpeedDTO[]> GetAllOverSpeedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAllTrafficCrossTimes", ReplyAction="http://tempuri.org/IServiceLayer/GetAllTrafficCrossTimesResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.TrafficCrossDTO[] GetAllTrafficCrossTimes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAllTrafficCrossTimes", ReplyAction="http://tempuri.org/IServiceLayer/GetAllTrafficCrossTimesResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.TrafficCrossDTO[]> GetAllTrafficCrossTimesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAllVehicleTypes", ReplyAction="http://tempuri.org/IServiceLayer/GetAllVehicleTypesResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.VehicleTypeDTO[] GetAllVehicleTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAllVehicleTypes", ReplyAction="http://tempuri.org/IServiceLayer/GetAllVehicleTypesResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.VehicleTypeDTO[]> GetAllVehicleTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationKPIs", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationKPIsResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.KpiDTO[] GetViolationKPIs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationKPIs", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationKPIsResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.KpiDTO[]> GetViolationKPIsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAccidentKPIs", ReplyAction="http://tempuri.org/IServiceLayer/GetAccidentKPIsResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.KpiDTO[] GetAccidentKPIs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAccidentKPIs", ReplyAction="http://tempuri.org/IServiceLayer/GetAccidentKPIsResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.KpiDTO[]> GetAccidentKPIsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAssignedPatrols", ReplyAction="http://tempuri.org/IServiceLayer/GetAssignedPatrolsResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PatrolDTO[] GetAssignedPatrols(long notificationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAssignedPatrols", ReplyAction="http://tempuri.org/IServiceLayer/GetAssignedPatrolsResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PatrolDTO[]> GetAssignedPatrolsAsync(long notificationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAllWantedCarLiveTrack", ReplyAction="http://tempuri.org/IServiceLayer/GetAllWantedCarLiveTrackResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.VehicleLiveTrackingDTO[] GetAllWantedCarLiveTrack(string plateNumber, int maxHours);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetAllWantedCarLiveTrack", ReplyAction="http://tempuri.org/IServiceLayer/GetAllWantedCarLiveTrackResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.VehicleLiveTrackingDTO[]> GetAllWantedCarLiveTrackAsync(string plateNumber, int maxHours);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/ChangePatrolActivation", ReplyAction="http://tempuri.org/IServiceLayer/ChangePatrolActivationResponse")]
        bool ChangePatrolActivation(int patrolId, bool isDeleted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/ChangePatrolActivation", ReplyAction="http://tempuri.org/IServiceLayer/ChangePatrolActivationResponse")]
        System.Threading.Tasks.Task<bool> ChangePatrolActivationAsync(int patrolId, bool isDeleted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationTypeTrendDaysOfWeek", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationTypeTrendDaysOfWeekResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationTypeTrendDaysOfWeek(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationTypeTrendDaysOfWeek", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationTypeTrendDaysOfWeekResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationTypeTrendDaysOfWeekAsync(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationTypeTrendWeekOfYear", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationTypeTrendWeekOfYearResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationTypeTrendWeekOfYear(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationTypeTrendWeekOfYear", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationTypeTrendWeekOfYearResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationTypeTrendWeekOfYearAsync(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationTypeTrendMonthOfYear", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationTypeTrendMonthOfYearResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationTypeTrendMonthOfYear(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationTypeTrendMonthOfYear", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationTypeTrendMonthOfYearResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationTypeTrendMonthOfYearAsync(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationTypeTrendQuarterOfYear", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationTypeTrendQuarterOfYearResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationTypeTrendQuarterOfYear(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationTypeTrendQuarterOfYear", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationTypeTrendQuarterOfYearResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationTypeTrendQuarterOfYearAsync(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentTrendDaysOfWeek", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentTrendDaysOfWeekResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentTrendDaysOfWeek(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentTrendDaysOfWeek", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentTrendDaysOfWeekResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentTrendDaysOfWeekAsync(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentTrendWeekOfYear", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentTrendWeekOfYearResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentTrendWeekOfYear(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentTrendWeekOfYear", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentTrendWeekOfYearResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentTrendWeekOfYearAsync(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentTrendMonthOfYear", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentTrendMonthOfYearResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentTrendMonthOfYear(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentTrendMonthOfYear", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentTrendMonthOfYearResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentTrendMonthOfYearAsync(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentTrendQuarterOfYear", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentTrendQuarterOfYearResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentTrendQuarterOfYear(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentTrendQuarterOfYear", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentTrendQuarterOfYearResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentTrendQuarterOfYearAsync(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsTrendDaysOfWeek", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsTrendDaysOfWeekResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsTrendDaysOfWeek(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsTrendDaysOfWeek", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsTrendDaysOfWeekResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsTrendDaysOfWeekAsync(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsTrendWeekOfYear", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsTrendWeekOfYearResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsTrendWeekOfYear(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsTrendWeekOfYear", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsTrendWeekOfYearResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsTrendWeekOfYearAsync(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsTrendMonthOfYear", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsTrendMonthOfYearResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsTrendMonthOfYear(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsTrendMonthOfYear", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsTrendMonthOfYearResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsTrendMonthOfYearAsync(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsTrendQuarterOfYear", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsTrendQuarterOfYearResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsTrendQuarterOfYear(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsTrendQuarterOfYear", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsTrendQuarterOfYearResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsTrendQuarterOfYearAsync(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationTrendDaysOfWeek", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationTrendDaysOfWeekResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationTrendDaysOfWeek(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationTrendDaysOfWeek", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationTrendDaysOfWeekResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationTrendDaysOfWeekAsync(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationTrendWeekOfYear", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationTrendWeekOfYearResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationTrendWeekOfYear(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationTrendWeekOfYear", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationTrendWeekOfYearResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationTrendWeekOfYearAsync(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationTrendMonthOfYear", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationTrendMonthOfYearResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationTrendMonthOfYear(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationTrendMonthOfYear", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationTrendMonthOfYearResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationTrendMonthOfYearAsync(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationTrendQuarterOfYear", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationTrendQuarterOfYearResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationTrendQuarterOfYear(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationTrendQuarterOfYear", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationTrendQuarterOfYearResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationTrendQuarterOfYearAsync(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationRegionYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationRegionYearlyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationRegionYearly();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationRegionYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationRegionYearlyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationRegionYearlyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationRegionMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationRegionMonthlyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationRegionMonthly(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationRegionMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationRegionMonthlyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationRegionMonthlyAsync(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationRegionWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationRegionWeeklyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationRegionWeekly(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationRegionWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationRegionWeeklyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationRegionWeeklyAsync(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationRegionDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationRegionDailyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationRegionDaily(System.DateTime WeekStartDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationRegionDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationRegionDailyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationRegionDailyAsync(System.DateTime WeekStartDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationRegionWiseYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationRegionWiseYearlyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationRegionWiseYearly();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationRegionWiseYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationRegionWiseYearlyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationRegionWiseYearlyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationRegionWiseDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationRegionWiseDailyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationRegionWiseDaily(System.DateTime WeekStartDate, System.DateTime WeekEndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationRegionWiseDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationRegionWiseDailyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationRegionWiseDailyAsync(System.DateTime WeekStartDate, System.DateTime WeekEndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationRegionWiseMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationRegionWiseMonthlyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationRegionWiseMonthly(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationRegionWiseMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationRegionWiseMonthlyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationRegionWiseMonthlyAsync(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationRegionWiseWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationRegionWiseWeeklyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationRegionWiseWeekly(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetDangerousViolationRegionWiseWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetDangerousViolationRegionWiseWeeklyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationRegionWiseWeeklyAsync(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsRegionWiseYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsRegionWiseYearlyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsRegionWiseYearly();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsRegionWiseYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsRegionWiseYearlyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsRegionWiseYearlyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsRegionWiseDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsRegionWiseDailyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsRegionWiseDaily(System.DateTime WeekStartDate, System.DateTime WeekEndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsRegionWiseDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsRegionWiseDailyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsRegionWiseDailyAsync(System.DateTime WeekStartDate, System.DateTime WeekEndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsRegionWiseMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsRegionWiseMonthlyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsRegionWiseMonthly(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsRegionWiseMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsRegionWiseMonthlyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsRegionWiseMonthlyAsync(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsRegionWiseWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsRegionWiseWeeklyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsRegionWiseWeekly(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetIncidentsRegionWiseWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetIncidentsRegionWiseWeeklyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsRegionWiseWeeklyAsync(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsRegionWiseYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsRegionWiseYearlyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsRegionWiseYearly();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsRegionWiseYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsRegionWiseYearlyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsRegionWiseYearlyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsRegionWiseDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsRegionWiseDailyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsRegionWiseDaily(System.DateTime WeekStartDate, System.DateTime WeekEndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsRegionWiseDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsRegionWiseDailyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsRegionWiseDailyAsync(System.DateTime WeekStartDate, System.DateTime WeekEndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsRegionWiseMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsRegionWiseMonthlyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsRegionWiseMonthly(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsRegionWiseMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsRegionWiseMonthlyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsRegionWiseMonthlyAsync(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsRegionWiseWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsRegionWiseWeeklyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsRegionWiseWeekly(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetViolationsRegionWiseWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetViolationsRegionWiseWeeklyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsRegionWiseWeeklyAsync(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsRegionComparisonYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsRegionComparisonYearlyResponse" +
            "")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsRegionComparisonYearly(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsRegionComparisonYearly", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsRegionComparisonYearlyResponse" +
            "")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsRegionComparisonYearlyAsync(int startYear, int endYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsRegionComparisonMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsRegionComparisonMonthlyRespons" +
            "e")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsRegionComparisonMonthly(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsRegionComparisonMonthly", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsRegionComparisonMonthlyRespons" +
            "e")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsRegionComparisonMonthlyAsync(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsRegionComparisonWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsRegionComparisonWeeklyResponse" +
            "")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsRegionComparisonWeekly(System.DateTime firstWeek, System.DateTime secondWeek);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsRegionComparisonWeekly", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsRegionComparisonWeeklyResponse" +
            "")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsRegionComparisonWeeklyAsync(System.DateTime firstWeek, System.DateTime secondWeek);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsRegionComparisonDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsRegionComparisonDailyResponse")]
        STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsRegionComparisonDaily(System.DateTime firstDay, System.DateTime secondDay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLayer/GetTruckViolationsRegionComparisonDaily", ReplyAction="http://tempuri.org/IServiceLayer/GetTruckViolationsRegionComparisonDailyResponse")]
        System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsRegionComparisonDailyAsync(System.DateTime firstDay, System.DateTime secondDay);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceLayerChannel : STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IServiceLayer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceLayerClient : System.ServiceModel.ClientBase<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IServiceLayer>, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IServiceLayer {
        
        public ServiceLayerClient() {
        }
        
        public ServiceLayerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceLayerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceLayerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceLayerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsRegionComparisonYearly(int startYear, int endYear) {
            return base.Channel.GetViolationsRegionComparisonYearly(startYear, endYear);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsRegionComparisonYearlyAsync(int startYear, int endYear) {
            return base.Channel.GetViolationsRegionComparisonYearlyAsync(startYear, endYear);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsRegionComparisonMonthly(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth) {
            return base.Channel.GetViolationsRegionComparisonMonthly(year, startMonth, endMonth);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsRegionComparisonMonthlyAsync(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth) {
            return base.Channel.GetViolationsRegionComparisonMonthlyAsync(year, startMonth, endMonth);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsRegionComparisonWeekly(System.DateTime firstWeek, System.DateTime secondWeek) {
            return base.Channel.GetViolationsRegionComparisonWeekly(firstWeek, secondWeek);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsRegionComparisonWeeklyAsync(System.DateTime firstWeek, System.DateTime secondWeek) {
            return base.Channel.GetViolationsRegionComparisonWeeklyAsync(firstWeek, secondWeek);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsRegionComparisonDaily(System.DateTime firstDay, System.DateTime secondDay) {
            return base.Channel.GetViolationsRegionComparisonDaily(firstDay, secondDay);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsRegionComparisonDailyAsync(System.DateTime firstDay, System.DateTime secondDay) {
            return base.Channel.GetViolationsRegionComparisonDailyAsync(firstDay, secondDay);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsRegionComparisonYearly(int startYear, int endYear) {
            return base.Channel.GetIncidentsRegionComparisonYearly(startYear, endYear);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsRegionComparisonYearlyAsync(int startYear, int endYear) {
            return base.Channel.GetIncidentsRegionComparisonYearlyAsync(startYear, endYear);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsRegionComparisonMonthly(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth) {
            return base.Channel.GetIncidentsRegionComparisonMonthly(year, startMonth, endMonth);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsRegionComparisonMonthlyAsync(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth) {
            return base.Channel.GetIncidentsRegionComparisonMonthlyAsync(year, startMonth, endMonth);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsRegionComparisonWeekly(System.DateTime firstWeek, System.DateTime secondWeek) {
            return base.Channel.GetIncidentsRegionComparisonWeekly(firstWeek, secondWeek);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsRegionComparisonWeeklyAsync(System.DateTime firstWeek, System.DateTime secondWeek) {
            return base.Channel.GetIncidentsRegionComparisonWeeklyAsync(firstWeek, secondWeek);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsRegionComparisonDaily(System.DateTime firstDay, System.DateTime secondDay) {
            return base.Channel.GetIncidentsRegionComparisonDaily(firstDay, secondDay);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsRegionComparisonDailyAsync(System.DateTime firstDay, System.DateTime secondDay) {
            return base.Channel.GetIncidentsRegionComparisonDailyAsync(firstDay, secondDay);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationsRegionComparisonYearly(int startYear, int endYear) {
            return base.Channel.GetDangerousViolationsRegionComparisonYearly(startYear, endYear);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationsRegionComparisonYearlyAsync(int startYear, int endYear) {
            return base.Channel.GetDangerousViolationsRegionComparisonYearlyAsync(startYear, endYear);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationsRegionComparisonMonthly(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth) {
            return base.Channel.GetDangerousViolationsRegionComparisonMonthly(year, startMonth, endMonth);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationsRegionComparisonMonthlyAsync(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth) {
            return base.Channel.GetDangerousViolationsRegionComparisonMonthlyAsync(year, startMonth, endMonth);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationsRegionComparisonWeekly(System.DateTime firstWeek, System.DateTime secondWeek) {
            return base.Channel.GetDangerousViolationsRegionComparisonWeekly(firstWeek, secondWeek);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationsRegionComparisonWeeklyAsync(System.DateTime firstWeek, System.DateTime secondWeek) {
            return base.Channel.GetDangerousViolationsRegionComparisonWeeklyAsync(firstWeek, secondWeek);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationsRegionComparisonDaily(System.DateTime firstDay, System.DateTime secondDay) {
            return base.Channel.GetDangerousViolationsRegionComparisonDaily(firstDay, secondDay);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationsRegionComparisonDailyAsync(System.DateTime firstDay, System.DateTime secondDay) {
            return base.Channel.GetDangerousViolationsRegionComparisonDailyAsync(firstDay, secondDay);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsStatisticalYearly() {
            return base.Channel.GetTruckViolationsStatisticalYearly();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsStatisticalYearlyAsync() {
            return base.Channel.GetTruckViolationsStatisticalYearlyAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsStaticsticalMonthly(int year) {
            return base.Channel.GetTruckViolationsStaticsticalMonthly(year);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsStaticsticalMonthlyAsync(int year) {
            return base.Channel.GetTruckViolationsStaticsticalMonthlyAsync(year);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsStaticsticalWeekly(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear month) {
            return base.Channel.GetTruckViolationsStaticsticalWeekly(year, month);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsStaticsticalWeeklyAsync(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear month) {
            return base.Channel.GetTruckViolationsStaticsticalWeeklyAsync(year, month);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsStatisticalDaily(System.DateTime weekStartDate) {
            return base.Channel.GetTruckViolationsStatisticalDaily(weekStartDate);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsStatisticalDailyAsync(System.DateTime weekStartDate) {
            return base.Channel.GetTruckViolationsStatisticalDailyAsync(weekStartDate);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsStatisticalYearly() {
            return base.Channel.GetViolationsStatisticalYearly();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsStatisticalYearlyAsync() {
            return base.Channel.GetViolationsStatisticalYearlyAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsStaticsticalMonthly(int year) {
            return base.Channel.GetViolationsStaticsticalMonthly(year);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsStaticsticalMonthlyAsync(int year) {
            return base.Channel.GetViolationsStaticsticalMonthlyAsync(year);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsStaticsticalWeekly(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear month) {
            return base.Channel.GetViolationsStaticsticalWeekly(year, month);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsStaticsticalWeeklyAsync(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear month) {
            return base.Channel.GetViolationsStaticsticalWeeklyAsync(year, month);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsStatisticalDaily(System.DateTime weekStartDate) {
            return base.Channel.GetViolationsStatisticalDaily(weekStartDate);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsStatisticalDailyAsync(System.DateTime weekStartDate) {
            return base.Channel.GetViolationsStatisticalDailyAsync(weekStartDate);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsStatisticalYearly() {
            return base.Channel.GetIncidentsStatisticalYearly();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsStatisticalYearlyAsync() {
            return base.Channel.GetIncidentsStatisticalYearlyAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsStaticsticalMonthly(int year) {
            return base.Channel.GetIncidentsStaticsticalMonthly(year);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsStaticsticalMonthlyAsync(int year) {
            return base.Channel.GetIncidentsStaticsticalMonthlyAsync(year);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsStaticsticalWeekly(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear month) {
            return base.Channel.GetIncidentsStaticsticalWeekly(year, month);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsStaticsticalWeeklyAsync(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear month) {
            return base.Channel.GetIncidentsStaticsticalWeeklyAsync(year, month);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsStatisticalDaily(System.DateTime weekStartDate) {
            return base.Channel.GetIncidentsStatisticalDaily(weekStartDate);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsStatisticalDailyAsync(System.DateTime weekStartDate) {
            return base.Channel.GetIncidentsStatisticalDailyAsync(weekStartDate);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationsStatisticalYearly() {
            return base.Channel.GetDangerousViolationsStatisticalYearly();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationsStatisticalYearlyAsync() {
            return base.Channel.GetDangerousViolationsStatisticalYearlyAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationsStaticsticalMonthly(int year) {
            return base.Channel.GetDangerousViolationsStaticsticalMonthly(year);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationsStaticsticalMonthlyAsync(int year) {
            return base.Channel.GetDangerousViolationsStaticsticalMonthlyAsync(year);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationsStaticsticalWeekly(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear month) {
            return base.Channel.GetDangerousViolationsStaticsticalWeekly(year, month);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationsStaticsticalWeeklyAsync(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear month) {
            return base.Channel.GetDangerousViolationsStaticsticalWeeklyAsync(year, month);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationsStatisticalDaily(System.DateTime weekStartDate) {
            return base.Channel.GetDangerousViolationsStatisticalDaily(weekStartDate);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationsStatisticalDailyAsync(System.DateTime weekStartDate) {
            return base.Channel.GetDangerousViolationsStatisticalDailyAsync(weekStartDate);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsComparisonYearly(int startYear, int endYear) {
            return base.Channel.GetTruckViolationsComparisonYearly(startYear, endYear);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsComparisonYearlyAsync(int startYear, int endYear) {
            return base.Channel.GetTruckViolationsComparisonYearlyAsync(startYear, endYear);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsComparisonMonthly(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth) {
            return base.Channel.GetTruckViolationsComparisonMonthly(year, startMonth, endMonth);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsComparisonMonthlyAsync(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth) {
            return base.Channel.GetTruckViolationsComparisonMonthlyAsync(year, startMonth, endMonth);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsComparisonWeekly(System.DateTime firstWeek, System.DateTime secondWeek) {
            return base.Channel.GetTruckViolationsComparisonWeekly(firstWeek, secondWeek);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsComparisonWeeklyAsync(System.DateTime firstWeek, System.DateTime secondWeek) {
            return base.Channel.GetTruckViolationsComparisonWeeklyAsync(firstWeek, secondWeek);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsComparisonDaily(System.DateTime firstDay, System.DateTime secondDay) {
            return base.Channel.GetTruckViolationsComparisonDaily(firstDay, secondDay);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsComparisonDailyAsync(System.DateTime firstDay, System.DateTime secondDay) {
            return base.Channel.GetTruckViolationsComparisonDailyAsync(firstDay, secondDay);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsComparisonYearly(int startYear, int endYear) {
            return base.Channel.GetViolationsComparisonYearly(startYear, endYear);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsComparisonYearlyAsync(int startYear, int endYear) {
            return base.Channel.GetViolationsComparisonYearlyAsync(startYear, endYear);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsComparisonMonthly(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth) {
            return base.Channel.GetViolationsComparisonMonthly(year, startMonth, endMonth);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsComparisonMonthlyAsync(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth) {
            return base.Channel.GetViolationsComparisonMonthlyAsync(year, startMonth, endMonth);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsComparisonWeekly(System.DateTime firstWeek, System.DateTime secondWeek) {
            return base.Channel.GetViolationsComparisonWeekly(firstWeek, secondWeek);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsComparisonWeeklyAsync(System.DateTime firstWeek, System.DateTime secondWeek) {
            return base.Channel.GetViolationsComparisonWeeklyAsync(firstWeek, secondWeek);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsComparisonDaily(System.DateTime firstDay, System.DateTime secondDay) {
            return base.Channel.GetViolationsComparisonDaily(firstDay, secondDay);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsComparisonDailyAsync(System.DateTime firstDay, System.DateTime secondDay) {
            return base.Channel.GetViolationsComparisonDailyAsync(firstDay, secondDay);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsComparisonYearly(int startYear, int endYear) {
            return base.Channel.GetIncidentsComparisonYearly(startYear, endYear);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsComparisonYearlyAsync(int startYear, int endYear) {
            return base.Channel.GetIncidentsComparisonYearlyAsync(startYear, endYear);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsComparisonMonthly(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth) {
            return base.Channel.GetIncidentsComparisonMonthly(year, startMonth, endMonth);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsComparisonMonthlyAsync(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth) {
            return base.Channel.GetIncidentsComparisonMonthlyAsync(year, startMonth, endMonth);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsComparisonWeekly(System.DateTime firstWeek, System.DateTime secondWeek) {
            return base.Channel.GetIncidentsComparisonWeekly(firstWeek, secondWeek);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsComparisonWeeklyAsync(System.DateTime firstWeek, System.DateTime secondWeek) {
            return base.Channel.GetIncidentsComparisonWeeklyAsync(firstWeek, secondWeek);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsComparisonDaily(System.DateTime firstDay, System.DateTime secondDay) {
            return base.Channel.GetIncidentsComparisonDaily(firstDay, secondDay);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsComparisonDailyAsync(System.DateTime firstDay, System.DateTime secondDay) {
            return base.Channel.GetIncidentsComparisonDailyAsync(firstDay, secondDay);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationsComparisonYearly(int startYear, int endYear) {
            return base.Channel.GetDangerousViolationsComparisonYearly(startYear, endYear);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationsComparisonYearlyAsync(int startYear, int endYear) {
            return base.Channel.GetDangerousViolationsComparisonYearlyAsync(startYear, endYear);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationsComparisonMonthly(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth) {
            return base.Channel.GetDangerousViolationsComparisonMonthly(year, startMonth, endMonth);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationsComparisonMonthlyAsync(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth) {
            return base.Channel.GetDangerousViolationsComparisonMonthlyAsync(year, startMonth, endMonth);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationsComparisonWeekly(System.DateTime firstWeek, System.DateTime secondWeek) {
            return base.Channel.GetDangerousViolationsComparisonWeekly(firstWeek, secondWeek);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationsComparisonWeeklyAsync(System.DateTime firstWeek, System.DateTime secondWeek) {
            return base.Channel.GetDangerousViolationsComparisonWeeklyAsync(firstWeek, secondWeek);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationsComparisonDaily(System.DateTime firstDay, System.DateTime secondDay) {
            return base.Channel.GetDangerousViolationsComparisonDaily(firstDay, secondDay);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationsComparisonDailyAsync(System.DateTime firstDay, System.DateTime secondDay) {
            return base.Channel.GetDangerousViolationsComparisonDailyAsync(firstDay, secondDay);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsTarget() {
            return base.Channel.GetViolationsTarget();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsTargetAsync() {
            return base.Channel.GetViolationsTargetAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationTarget() {
            return base.Channel.GetTruckViolationTarget();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationTargetAsync() {
            return base.Channel.GetTruckViolationTargetAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsTarget() {
            return base.Channel.GetIncidentsTarget();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsTargetAsync() {
            return base.Channel.GetIncidentsTargetAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationTarget() {
            return base.Channel.GetDangerousViolationTarget();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationTargetAsync() {
            return base.Channel.GetDangerousViolationTargetAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDetailsDTO[] GetMainDashboard(string language) {
            return base.Channel.GetMainDashboard(language);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDetailsDTO[]> GetMainDashboardAsync(string language) {
            return base.Channel.GetMainDashboardAsync(language);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetFatalitiyTarget() {
            return base.Channel.GetFatalitiyTarget();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetFatalitiyTargetAsync() {
            return base.Channel.GetFatalitiyTargetAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountForMapDTO[] GetViolationsCountPerAsset(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PeriodType type) {
            return base.Channel.GetViolationsCountPerAsset(type);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountForMapDTO[]> GetViolationsCountPerAssetAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PeriodType type) {
            return base.Channel.GetViolationsCountPerAssetAsync(type);
        }
        
        public int[] GetViolationsAvailableYears() {
            return base.Channel.GetViolationsAvailableYears();
        }
        
        public System.Threading.Tasks.Task<int[]> GetViolationsAvailableYearsAsync() {
            return base.Channel.GetViolationsAvailableYearsAsync();
        }
        
        public int[] GetIncidentsAvailableYears() {
            return base.Channel.GetIncidentsAvailableYears();
        }
        
        public System.Threading.Tasks.Task<int[]> GetIncidentsAvailableYearsAsync() {
            return base.Channel.GetIncidentsAvailableYearsAsync();
        }
        
        public System.DateTime GetIncidentFirstDate() {
            return base.Channel.GetIncidentFirstDate();
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetIncidentFirstDateAsync() {
            return base.Channel.GetIncidentFirstDateAsync();
        }
        
        public bool PublishToFacebook(string post, byte[] imageBytes) {
            return base.Channel.PublishToFacebook(post, imageBytes);
        }
        
        public System.Threading.Tasks.Task<bool> PublishToFacebookAsync(string post, byte[] imageBytes) {
            return base.Channel.PublishToFacebookAsync(post, imageBytes);
        }
        
        public bool PublishToTwitter(string post, byte[] imageBytes) {
            return base.Channel.PublishToTwitter(post, imageBytes);
        }
        
        public System.Threading.Tasks.Task<bool> PublishToTwitterAsync(string post, byte[] imageBytes) {
            return base.Channel.PublishToTwitterAsync(post, imageBytes);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UsersDTO[] GetAllUsersList() {
            return base.Channel.GetAllUsersList();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UsersDTO[]> GetAllUsersListAsync() {
            return base.Channel.GetAllUsersListAsync();
        }
        
        public bool AddUser(string userPassword, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UsersDTO user) {
            return base.Channel.AddUser(userPassword, user);
        }
        
        public System.Threading.Tasks.Task<bool> AddUserAsync(string userPassword, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UsersDTO user) {
            return base.Channel.AddUserAsync(userPassword, user);
        }
        
        public bool UpdateUser(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UsersDTO user) {
            return base.Channel.UpdateUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UsersDTO user) {
            return base.Channel.UpdateUserAsync(user);
        }
        
        public bool DeactivateUser(int userId, bool isActive) {
            return base.Channel.DeactivateUser(userId, isActive);
        }
        
        public System.Threading.Tasks.Task<bool> DeactivateUserAsync(int userId, bool isActive) {
            return base.Channel.DeactivateUserAsync(userId, isActive);
        }
        
        public bool DeleteUser(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UsersDTO user) {
            return base.Channel.DeleteUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UsersDTO user) {
            return base.Channel.DeleteUserAsync(user);
        }
        
        public bool AddRank(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.RanksDTO Rank) {
            return base.Channel.AddRank(Rank);
        }
        
        public System.Threading.Tasks.Task<bool> AddRankAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.RanksDTO Rank) {
            return base.Channel.AddRankAsync(Rank);
        }
        
        public bool UpdateRank(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.RanksDTO Rank) {
            return base.Channel.UpdateRank(Rank);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateRankAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.RanksDTO Rank) {
            return base.Channel.UpdateRankAsync(Rank);
        }
        
        public bool DeleteRank(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.RanksDTO Rank) {
            return base.Channel.DeleteRank(Rank);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteRankAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.RanksDTO Rank) {
            return base.Channel.DeleteRankAsync(Rank);
        }
        
        public bool AddFeature(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.FeaturesDTO Feature) {
            return base.Channel.AddFeature(Feature);
        }
        
        public System.Threading.Tasks.Task<bool> AddFeatureAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.FeaturesDTO Feature) {
            return base.Channel.AddFeatureAsync(Feature);
        }
        
        public bool UpdateFeature(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.FeaturesDTO Feature) {
            return base.Channel.UpdateFeature(Feature);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateFeatureAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.FeaturesDTO Feature) {
            return base.Channel.UpdateFeatureAsync(Feature);
        }
        
        public bool DeleteFeature(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.FeaturesDTO Feature) {
            return base.Channel.DeleteFeature(Feature);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteFeatureAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.FeaturesDTO Feature) {
            return base.Channel.DeleteFeatureAsync(Feature);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.RanksDTO[] GetRanksList() {
            return base.Channel.GetRanksList();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.RanksDTO[]> GetRanksListAsync() {
            return base.Channel.GetRanksListAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.FeaturesDTO[] GetFeaturesList() {
            return base.Channel.GetFeaturesList();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.FeaturesDTO[]> GetFeaturesListAsync() {
            return base.Channel.GetFeaturesListAsync();
        }
        
        public bool AddUserRole(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UserRolesDTO role) {
            return base.Channel.AddUserRole(role);
        }
        
        public System.Threading.Tasks.Task<bool> AddUserRoleAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UserRolesDTO role) {
            return base.Channel.AddUserRoleAsync(role);
        }
        
        public bool UpdateUserRole(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UserRolesDTO role) {
            return base.Channel.UpdateUserRole(role);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserRoleAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UserRolesDTO role) {
            return base.Channel.UpdateUserRoleAsync(role);
        }
        
        public bool DeleteUserRole(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UserRolesDTO role) {
            return base.Channel.DeleteUserRole(role);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserRoleAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UserRolesDTO role) {
            return base.Channel.DeleteUserRoleAsync(role);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UserRolesDTO[] GetUserRolesList() {
            return base.Channel.GetUserRolesList();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UserRolesDTO[]> GetUserRolesListAsync() {
            return base.Channel.GetUserRolesListAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UsersDTO GetUserById(int userId) {
            return base.Channel.GetUserById(userId);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UsersDTO> GetUserByIdAsync(int userId) {
            return base.Channel.GetUserByIdAsync(userId);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UsersDTO Login(string Username, string Password) {
            return base.Channel.Login(Username, Password);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UsersDTO> LoginAsync(string Username, string Password) {
            return base.Channel.LoginAsync(Username, Password);
        }
        
        public int GetSupervisorId() {
            return base.Channel.GetSupervisorId();
        }
        
        public System.Threading.Tasks.Task<int> GetSupervisorIdAsync() {
            return base.Channel.GetSupervisorIdAsync();
        }
        
        public string SendNotification(string[] deviceRegIds, string message) {
            return base.Channel.SendNotification(deviceRegIds, message);
        }
        
        public System.Threading.Tasks.Task<string> SendNotificationAsync(string[] deviceRegIds, string message) {
            return base.Channel.SendNotificationAsync(deviceRegIds, message);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PublicUserDTO[] GetActivePublicUsers() {
            return base.Channel.GetActivePublicUsers();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PublicUserDTO[]> GetActivePublicUsersAsync() {
            return base.Channel.GetActivePublicUsersAsync();
        }
        
        public bool SaveSupervisorNotification(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.SupervisorNotificationDTO supervisorNotification) {
            return base.Channel.SaveSupervisorNotification(supervisorNotification);
        }
        
        public System.Threading.Tasks.Task<bool> SaveSupervisorNotificationAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.SupervisorNotificationDTO supervisorNotification) {
            return base.Channel.SaveSupervisorNotificationAsync(supervisorNotification);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.SupervisorNotificationDTO GetSupervisorNotificationById(int supervisorNotificationId) {
            return base.Channel.GetSupervisorNotificationById(supervisorNotificationId);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.SupervisorNotificationDTO> GetSupervisorNotificationByIdAsync(int supervisorNotificationId) {
            return base.Channel.GetSupervisorNotificationByIdAsync(supervisorNotificationId);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.SupervisorNotificationDTO[] GetSupervisorNotificationsByUserId(int userId) {
            return base.Channel.GetSupervisorNotificationsByUserId(userId);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.SupervisorNotificationDTO[]> GetSupervisorNotificationsByUserIdAsync(int userId) {
            return base.Channel.GetSupervisorNotificationsByUserIdAsync(userId);
        }
        
        public bool SetSupervisorNotificationNoticed(long notificationId, bool isNoticed) {
            return base.Channel.SetSupervisorNotificationNoticed(notificationId, isNoticed);
        }
        
        public System.Threading.Tasks.Task<bool> SetSupervisorNotificationNoticedAsync(long notificationId, bool isNoticed) {
            return base.Channel.SetSupervisorNotificationNoticedAsync(notificationId, isNoticed);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CorrelationMessagesLogDTO[] GetCorrelationLogByVehicleDetails(string plateNumber, string plateColor, string plateSource, string plateKind) {
            return base.Channel.GetCorrelationLogByVehicleDetails(plateNumber, plateColor, plateSource, plateKind);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CorrelationMessagesLogDTO[]> GetCorrelationLogByVehicleDetailsAsync(string plateNumber, string plateColor, string plateSource, string plateKind) {
            return base.Channel.GetCorrelationLogByVehicleDetailsAsync(plateNumber, plateColor, plateSource, plateKind);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CorrelationMessagesLogDTO[] GetCorelationsLogByBusinessRule(int businessRuleId) {
            return base.Channel.GetCorelationsLogByBusinessRule(businessRuleId);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CorrelationMessagesLogDTO[]> GetCorelationsLogByBusinessRuleAsync(int businessRuleId) {
            return base.Channel.GetCorelationsLogByBusinessRuleAsync(businessRuleId);
        }
        
        public bool IsDangerousVehicleActive(string plateNumber, string plateColor, string plateSource, string plateKind) {
            return base.Channel.IsDangerousVehicleActive(plateNumber, plateColor, plateSource, plateKind);
        }
        
        public System.Threading.Tasks.Task<bool> IsDangerousVehicleActiveAsync(string plateNumber, string plateColor, string plateSource, string plateKind) {
            return base.Channel.IsDangerousVehicleActiveAsync(plateNumber, plateColor, plateSource, plateKind);
        }
        
        public void DeactivateDangeriousVehicle(string plateNumber, string plateColor, string plateSource, string plateKind) {
            base.Channel.DeactivateDangeriousVehicle(plateNumber, plateColor, plateSource, plateKind);
        }
        
        public System.Threading.Tasks.Task DeactivateDangeriousVehicleAsync(string plateNumber, string plateColor, string plateSource, string plateKind) {
            return base.Channel.DeactivateDangeriousVehicleAsync(plateNumber, plateColor, plateSource, plateKind);
        }
        
        public void DeactivateDangerousViolatorList(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PlateDetailsDTO[] vehicles) {
            base.Channel.DeactivateDangerousViolatorList(vehicles);
        }
        
        public System.Threading.Tasks.Task DeactivateDangerousViolatorListAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PlateDetailsDTO[] vehicles) {
            return base.Channel.DeactivateDangerousViolatorListAsync(vehicles);
        }
        
        public string GetAssetLocation(int assetId, bool isArabic) {
            return base.Channel.GetAssetLocation(assetId, isArabic);
        }
        
        public System.Threading.Tasks.Task<string> GetAssetLocationAsync(int assetId, bool isArabic) {
            return base.Channel.GetAssetLocationAsync(assetId, isArabic);
        }
        
        public string GetAssetSerialNumber(long assetId) {
            return base.Channel.GetAssetSerialNumber(assetId);
        }
        
        public System.Threading.Tasks.Task<string> GetAssetSerialNumberAsync(long assetId) {
            return base.Channel.GetAssetSerialNumberAsync(assetId);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.KpiDTO[] GetAllTargetsList() {
            return base.Channel.GetAllTargetsList();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.KpiDTO[]> GetAllTargetsListAsync() {
            return base.Channel.GetAllTargetsListAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.KPITargetDTO[] GetAllTargets() {
            return base.Channel.GetAllTargets();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.KPITargetDTO[]> GetAllTargetsAsync() {
            return base.Channel.GetAllTargetsAsync();
        }
        
        public bool UpdateKPITarget(string keyname, double newValue, int userId) {
            return base.Channel.UpdateKPITarget(keyname, newValue, userId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateKPITargetAsync(string keyname, double newValue, int userId) {
            return base.Channel.UpdateKPITargetAsync(keyname, newValue, userId);
        }
        
        public void AddToViolationQueue(string ViolationTypeName, int ViolationTypeId, string PlateNumber, string PlateKind, string PlateColor, string PlateSource, double Latitude, double Longitude, int VehicleType, bool IsInsideCity, int SpeedLimit, int SpeedTolerance, int CurrentSpeed, int TrafficCrossElapsedTimeSecs, string SerialNumber) {
            base.Channel.AddToViolationQueue(ViolationTypeName, ViolationTypeId, PlateNumber, PlateKind, PlateColor, PlateSource, Latitude, Longitude, VehicleType, IsInsideCity, SpeedLimit, SpeedTolerance, CurrentSpeed, TrafficCrossElapsedTimeSecs, SerialNumber);
        }
        
        public System.Threading.Tasks.Task AddToViolationQueueAsync(string ViolationTypeName, int ViolationTypeId, string PlateNumber, string PlateKind, string PlateColor, string PlateSource, double Latitude, double Longitude, int VehicleType, bool IsInsideCity, int SpeedLimit, int SpeedTolerance, int CurrentSpeed, int TrafficCrossElapsedTimeSecs, string SerialNumber) {
            return base.Channel.AddToViolationQueueAsync(ViolationTypeName, ViolationTypeId, PlateNumber, PlateKind, PlateColor, PlateSource, Latitude, Longitude, VehicleType, IsInsideCity, SpeedLimit, SpeedTolerance, CurrentSpeed, TrafficCrossElapsedTimeSecs, SerialNumber);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetViolationDetailsDTO GetAssetViolations(string originalIdent, string lang) {
            return base.Channel.GetAssetViolations(originalIdent, lang);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetViolationDetailsDTO> GetAssetViolationsAsync(string originalIdent, string lang) {
            return base.Channel.GetAssetViolationsAsync(originalIdent, lang);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsViewDTO[] GetAllAssets() {
            return base.Channel.GetAllAssets();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsViewDTO[]> GetAllAssetsAsync() {
            return base.Channel.GetAllAssetsAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[] GetDangerousVehicleViolations(System.Nullable<System.DateTime> StartDateTime, System.Nullable<System.DateTime> EndDateTime, string PlateNumber) {
            return base.Channel.GetDangerousVehicleViolations(StartDateTime, EndDateTime, PlateNumber);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[]> GetDangerousVehicleViolationsAsync(System.Nullable<System.DateTime> StartDateTime, System.Nullable<System.DateTime> EndDateTime, string PlateNumber) {
            return base.Channel.GetDangerousVehicleViolationsAsync(StartDateTime, EndDateTime, PlateNumber);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.DangerousVehicleDetailsDTO GetDangerousVehicleDetailsByPlateNumber(string plateNumber, string lang) {
            return base.Channel.GetDangerousVehicleDetailsByPlateNumber(plateNumber, lang);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.DangerousVehicleDetailsDTO> GetDangerousVehicleDetailsByPlateNumberAsync(string plateNumber, string lang) {
            return base.Channel.GetDangerousVehicleDetailsByPlateNumberAsync(plateNumber, lang);
        }
        
        public bool AddNewEvent(string XmlToSend) {
            return base.Channel.AddNewEvent(XmlToSend);
        }
        
        public System.Threading.Tasks.Task<bool> AddNewEventAsync(string XmlToSend) {
            return base.Channel.AddNewEventAsync(XmlToSend);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.BusinessRulesDTO GetMessageBusinessRule(long messageId) {
            return base.Channel.GetMessageBusinessRule(messageId);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.BusinessRulesDTO> GetMessageBusinessRuleAsync(long messageId) {
            return base.Channel.GetMessageBusinessRuleAsync(messageId);
        }
        
        public void AddWantedCarEventManualy(string plateNumber, string plateCategory, string plateSource, string plateColor, System.DateTime violationDate, string lang, string ruleName, string ruleId, double lat, double lon) {
            base.Channel.AddWantedCarEventManualy(plateNumber, plateCategory, plateSource, plateColor, violationDate, lang, ruleName, ruleId, lat, lon);
        }
        
        public System.Threading.Tasks.Task AddWantedCarEventManualyAsync(string plateNumber, string plateCategory, string plateSource, string plateColor, System.DateTime violationDate, string lang, string ruleName, string ruleId, double lat, double lon) {
            return base.Channel.AddWantedCarEventManualyAsync(plateNumber, plateCategory, plateSource, plateColor, violationDate, lang, ruleName, ruleId, lat, lon);
        }
        
        public void AddWantedCarEvent(string plateNumber, System.DateTime violationDate, string lang, string ruleName, string ruleId) {
            base.Channel.AddWantedCarEvent(plateNumber, violationDate, lang, ruleName, ruleId);
        }
        
        public System.Threading.Tasks.Task AddWantedCarEventAsync(string plateNumber, System.DateTime violationDate, string lang, string ruleName, string ruleId) {
            return base.Channel.AddWantedCarEventAsync(plateNumber, violationDate, lang, ruleName, ruleId);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationCountMonthAndCity() {
            return base.Channel.GetViolationCountMonthAndCity();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationCountMonthAndCityAsync() {
            return base.Channel.GetViolationCountMonthAndCityAsync();
        }
        
        public decimal GetWantedCarRadius() {
            return base.Channel.GetWantedCarRadius();
        }
        
        public System.Threading.Tasks.Task<decimal> GetWantedCarRadiusAsync() {
            return base.Channel.GetWantedCarRadiusAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsGroupedByLocationsDTO[] GetViolationsListGroupedByLocation(System.Nullable<System.DateTime> StartDateTime, System.Nullable<int> ViolationTypeId) {
            return base.Channel.GetViolationsListGroupedByLocation(StartDateTime, ViolationTypeId);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsGroupedByLocationsDTO[]> GetViolationsListGroupedByLocationAsync(System.Nullable<System.DateTime> StartDateTime, System.Nullable<int> ViolationTypeId) {
            return base.Channel.GetViolationsListGroupedByLocationAsync(StartDateTime, ViolationTypeId);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[] GetUpdatedViolationsList(System.Nullable<bool> IsNoticed) {
            return base.Channel.GetUpdatedViolationsList(IsNoticed);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[]> GetUpdatedViolationsListAsync(System.Nullable<bool> IsNoticed) {
            return base.Channel.GetUpdatedViolationsListAsync(IsNoticed);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[] GetViolationListByVehicle(string plateNumber) {
            return base.Channel.GetViolationListByVehicle(plateNumber);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[]> GetViolationListByVehicleAsync(string plateNumber) {
            return base.Channel.GetViolationListByVehicleAsync(plateNumber);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[] GetViolationsListByDate(System.Nullable<System.DateTime> StartDateTime, System.Nullable<System.DateTime> EndDateTime) {
            return base.Channel.GetViolationsListByDate(StartDateTime, EndDateTime);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[]> GetViolationsListByDateAsync(System.Nullable<System.DateTime> StartDateTime, System.Nullable<System.DateTime> EndDateTime) {
            return base.Channel.GetViolationsListByDateAsync(StartDateTime, EndDateTime);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentsDTO[] GetIncidentsListByDate(System.Nullable<System.DateTime> StartDateTime, System.Nullable<System.DateTime> EndDateTime) {
            return base.Channel.GetIncidentsListByDate(StartDateTime, EndDateTime);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentsDTO[]> GetIncidentsListByDateAsync(System.Nullable<System.DateTime> StartDateTime, System.Nullable<System.DateTime> EndDateTime) {
            return base.Channel.GetIncidentsListByDateAsync(StartDateTime, EndDateTime);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsDetailsByLocationDTO[] GetViolationsDetailsForLocation(string LocationCode, System.Nullable<System.DateTime> StartDateTime, System.Nullable<int> ViolationTypeId) {
            return base.Channel.GetViolationsDetailsForLocation(LocationCode, StartDateTime, ViolationTypeId);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsDetailsByLocationDTO[]> GetViolationsDetailsForLocationAsync(string LocationCode, System.Nullable<System.DateTime> StartDateTime, System.Nullable<int> ViolationTypeId) {
            return base.Channel.GetViolationsDetailsForLocationAsync(LocationCode, StartDateTime, ViolationTypeId);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentsDTO[] GetActiveIncidentsList() {
            return base.Channel.GetActiveIncidentsList();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentsDTO[]> GetActiveIncidentsListAsync() {
            return base.Channel.GetActiveIncidentsListAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentsDTO GetIncidentDetails(int IncidentId) {
            return base.Channel.GetIncidentDetails(IncidentId);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentsDTO> GetIncidentDetailsAsync(int IncidentId) {
            return base.Channel.GetIncidentDetailsAsync(IncidentId);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsViewDTO[] GetAssetsList(System.Nullable<int> AssetStatusId, System.Nullable<int> AssetTypeId) {
            return base.Channel.GetAssetsList(AssetStatusId, AssetTypeId);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsViewDTO[]> GetAssetsListAsync(System.Nullable<int> AssetStatusId, System.Nullable<int> AssetTypeId) {
            return base.Channel.GetAssetsListAsync(AssetStatusId, AssetTypeId);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsViewDTO[] GetAssetsListBySource(System.Nullable<int> AssetStatusId, System.Nullable<int> AssetTypeId, System.Nullable<int> sourceId) {
            return base.Channel.GetAssetsListBySource(AssetStatusId, AssetTypeId, sourceId);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsViewDTO[]> GetAssetsListBySourceAsync(System.Nullable<int> AssetStatusId, System.Nullable<int> AssetTypeId, System.Nullable<int> sourceId) {
            return base.Channel.GetAssetsListBySourceAsync(AssetStatusId, AssetTypeId, sourceId);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetLastStatusDTO[] GetAssetsLastStatusList(System.Nullable<bool> IsNoticed) {
            return base.Channel.GetAssetsLastStatusList(IsNoticed);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetLastStatusDTO[]> GetAssetsLastStatusListAsync(System.Nullable<bool> IsNoticed) {
            return base.Channel.GetAssetsLastStatusListAsync(IsNoticed);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PatrolLastLocationDTO[] GetPatrolsList(System.Nullable<int> PatrolStatusId) {
            return base.Channel.GetPatrolsList(PatrolStatusId);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PatrolLastLocationDTO[]> GetPatrolsListAsync(System.Nullable<int> PatrolStatusId) {
            return base.Channel.GetPatrolsListAsync(PatrolStatusId);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PatrolLastLocationDTO[] GetAllPatrolsList() {
            return base.Channel.GetAllPatrolsList();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PatrolLastLocationDTO[]> GetAllPatrolsListAsync() {
            return base.Channel.GetAllPatrolsListAsync();
        }
        
        public void GetEventsList() {
            base.Channel.GetEventsList();
        }
        
        public System.Threading.Tasks.Task GetEventsListAsync() {
            return base.Channel.GetEventsListAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PatrolStatusDimDTO[] GetPatrolStatusList() {
            return base.Channel.GetPatrolStatusList();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PatrolStatusDimDTO[]> GetPatrolStatusListAsync() {
            return base.Channel.GetPatrolStatusListAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetTypeDimDTO[] GetAssetTypesList() {
            return base.Channel.GetAssetTypesList();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetTypeDimDTO[]> GetAssetTypesListAsync() {
            return base.Channel.GetAssetTypesListAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetStatusDimDTO[] GetAssetStatusList() {
            return base.Channel.GetAssetStatusList();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetStatusDimDTO[]> GetAssetStatusListAsync() {
            return base.Channel.GetAssetStatusListAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationTypeDimDTO[] GetViolationTypesList() {
            return base.Channel.GetViolationTypesList();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationTypeDimDTO[]> GetViolationTypesListAsync() {
            return base.Channel.GetViolationTypesListAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountPerDayOfWeekDTO[] GetViolationsCountPerDayOfWeek() {
            return base.Channel.GetViolationsCountPerDayOfWeek();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountPerDayOfWeekDTO[]> GetViolationsCountPerDayOfWeekAsync() {
            return base.Channel.GetViolationsCountPerDayOfWeekAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountPerDayOfWeekAndHourDTO[] GetViolationsCountPerDayOfWeekAndHour() {
            return base.Channel.GetViolationsCountPerDayOfWeekAndHour();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountPerDayOfWeekAndHourDTO[]> GetViolationsCountPerDayOfWeekAndHourAsync() {
            return base.Channel.GetViolationsCountPerDayOfWeekAndHourAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountGroupedByTypeDTO[] GetViolationsCountGroupedByType() {
            return base.Channel.GetViolationsCountGroupedByType();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountGroupedByTypeDTO[]> GetViolationsCountGroupedByTypeAsync() {
            return base.Channel.GetViolationsCountGroupedByTypeAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountGroupedByTypeDTO[] GetViolationsCountGroupedByTypePerDayOfWeek(string dayofWeek) {
            return base.Channel.GetViolationsCountGroupedByTypePerDayOfWeek(dayofWeek);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountGroupedByTypeDTO[]> GetViolationsCountGroupedByTypePerDayOfWeekAsync(string dayofWeek) {
            return base.Channel.GetViolationsCountGroupedByTypePerDayOfWeekAsync(dayofWeek);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountGroupedByTypeDTO[] GetViolationsCountGroupedByTypePerDayOfWeekAndHour(string dayofWeek, int hour) {
            return base.Channel.GetViolationsCountGroupedByTypePerDayOfWeekAndHour(dayofWeek, hour);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountGroupedByTypeDTO[]> GetViolationsCountGroupedByTypePerDayOfWeekAndHourAsync(string dayofWeek, int hour) {
            return base.Channel.GetViolationsCountGroupedByTypePerDayOfWeekAndHourAsync(dayofWeek, hour);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountGroupedByLocationDTO[] GetViolationsCountGroupedByLocation() {
            return base.Channel.GetViolationsCountGroupedByLocation();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountGroupedByLocationDTO[]> GetViolationsCountGroupedByLocationAsync() {
            return base.Channel.GetViolationsCountGroupedByLocationAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountGroupedByLocationDTO[] GetViolationsCountGroupedByLocationPerDayOfWeek(string dayofWeek) {
            return base.Channel.GetViolationsCountGroupedByLocationPerDayOfWeek(dayofWeek);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountGroupedByLocationDTO[]> GetViolationsCountGroupedByLocationPerDayOfWeekAsync(string dayofWeek) {
            return base.Channel.GetViolationsCountGroupedByLocationPerDayOfWeekAsync(dayofWeek);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountGroupedByLocationDTO[] GetViolationsCountGroupedByLocationPerDayOfWeekAndHour(string dayofWeek, int hour) {
            return base.Channel.GetViolationsCountGroupedByLocationPerDayOfWeekAndHour(dayofWeek, hour);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsCountGroupedByLocationDTO[]> GetViolationsCountGroupedByLocationPerDayOfWeekAndHourAsync(string dayofWeek, int hour) {
            return base.Channel.GetViolationsCountGroupedByLocationPerDayOfWeekAndHourAsync(dayofWeek, hour);
        }
        
        public int GetMaxNotificationsCount() {
            return base.Channel.GetMaxNotificationsCount();
        }
        
        public System.Threading.Tasks.Task<int> GetMaxNotificationsCountAsync() {
            return base.Channel.GetMaxNotificationsCountAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentDetailsDTO GetIncidentFullDetails(int IncidentId) {
            return base.Channel.GetIncidentFullDetails(IncidentId);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentDetailsDTO> GetIncidentFullDetailsAsync(int IncidentId) {
            return base.Channel.GetIncidentFullDetailsAsync(IncidentId);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationDetailsDTO GetViolationDetailsByAsset(string LocationCode, System.Nullable<System.DateTime> StartDateTime, System.Nullable<int> ViolationTypeId) {
            return base.Channel.GetViolationDetailsByAsset(LocationCode, StartDateTime, ViolationTypeId);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationDetailsDTO> GetViolationDetailsByAssetAsync(string LocationCode, System.Nullable<System.DateTime> StartDateTime, System.Nullable<int> ViolationTypeId) {
            return base.Channel.GetViolationDetailsByAssetAsync(LocationCode, StartDateTime, ViolationTypeId);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PatrolOfficersDetailsDTO GetPatrolDetails(int PatrolId) {
            return base.Channel.GetPatrolDetails(PatrolId);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PatrolOfficersDetailsDTO> GetPatrolDetailsAsync(int PatrolId) {
            return base.Channel.GetPatrolDetailsAsync(PatrolId);
        }
        
        public bool SaveSendControlToUsers(string xmlToSend, string[] Usernames) {
            return base.Channel.SaveSendControlToUsers(xmlToSend, Usernames);
        }
        
        public System.Threading.Tasks.Task<bool> SaveSendControlToUsersAsync(string xmlToSend, string[] Usernames) {
            return base.Channel.SaveSendControlToUsersAsync(xmlToSend, Usernames);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MessageTypeSOPDTO[] GetMessageTypeSOP(int MessageType) {
            return base.Channel.GetMessageTypeSOP(MessageType);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MessageTypeSOPDTO[]> GetMessageTypeSOPAsync(int MessageType) {
            return base.Channel.GetMessageTypeSOPAsync(MessageType);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MessageTypeSOPDTO[] GetMessageTypeSOPs(int MessageType, int MessageId) {
            return base.Channel.GetMessageTypeSOPs(MessageType, MessageId);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MessageTypeSOPDTO[]> GetMessageTypeSOPsAsync(int MessageType, int MessageId) {
            return base.Channel.GetMessageTypeSOPsAsync(MessageType, MessageId);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsViewDTO[] GetNearByTowersByLatLon(double longitude, double latitude) {
            return base.Channel.GetNearByTowersByLatLon(longitude, latitude);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsViewDTO[]> GetNearByTowersByLatLonAsync(double longitude, double latitude) {
            return base.Channel.GetNearByTowersByLatLonAsync(longitude, latitude);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsViewDTO[] GetNearByRadarsByLatLon(double longitude, double latitude) {
            return base.Channel.GetNearByRadarsByLatLon(longitude, latitude);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsViewDTO[]> GetNearByRadarsByLatLonAsync(double longitude, double latitude) {
            return base.Channel.GetNearByRadarsByLatLonAsync(longitude, latitude);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsViewDTO[] GetNearByCamerasByLatLon(double longitude, double latitude) {
            return base.Channel.GetNearByCamerasByLatLon(longitude, latitude);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsViewDTO[]> GetNearByCamerasByLatLonAsync(double longitude, double latitude) {
            return base.Channel.GetNearByCamerasByLatLonAsync(longitude, latitude);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.TowerActionsDTO[] GetAllTowerActions() {
            return base.Channel.GetAllTowerActions();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.TowerActionsDTO[]> GetAllTowerActionsAsync() {
            return base.Channel.GetAllTowerActionsAsync();
        }
        
        public double GetRadiusForNearByAssets() {
            return base.Channel.GetRadiusForNearByAssets();
        }
        
        public System.Threading.Tasks.Task<double> GetRadiusForNearByAssetsAsync() {
            return base.Channel.GetRadiusForNearByAssetsAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MessageTypeConvertOutput ConvertXML(string xml, int generalTypeId) {
            return base.Channel.ConvertXML(xml, generalTypeId);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MessageTypeConvertOutput> ConvertXMLAsync(string xml, int generalTypeId) {
            return base.Channel.ConvertXMLAsync(xml, generalTypeId);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsDetailsViewDTO[] GetAllTowerCameras(long TowerId) {
            return base.Channel.GetAllTowerCameras(TowerId);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.AssetsDetailsViewDTO[]> GetAllTowerCamerasAsync(long TowerId) {
            return base.Channel.GetAllTowerCamerasAsync(TowerId);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.OfficersLastLocationViewDTO[] GetOfficersList() {
            return base.Channel.GetOfficersList();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.OfficersLastLocationViewDTO[]> GetOfficersListAsync() {
            return base.Channel.GetOfficersListAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PatrolLastLocationDTO[] GetNearByPatrolsByLatLon(double longitude, double latitude, int patrolsCount) {
            return base.Channel.GetNearByPatrolsByLatLon(longitude, latitude, patrolsCount);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PatrolLastLocationDTO[]> GetNearByPatrolsByLatLonAsync(double longitude, double latitude, int patrolsCount) {
            return base.Channel.GetNearByPatrolsByLatLonAsync(longitude, latitude, patrolsCount);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsHistoricalDTO[] GetViolationHistoricalViewByDate(System.DateTime StartDateTime, System.Nullable<System.DateTime> EndDateTime, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PeriodCategory ScheduleType) {
            return base.Channel.GetViolationHistoricalViewByDate(StartDateTime, EndDateTime, ScheduleType);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsHistoricalDTO[]> GetViolationHistoricalViewByDateAsync(System.DateTime StartDateTime, System.Nullable<System.DateTime> EndDateTime, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PeriodCategory ScheduleType) {
            return base.Channel.GetViolationHistoricalViewByDateAsync(StartDateTime, EndDateTime, ScheduleType);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentHistoricalDTO[] GetIncidentHistoricalViewByDate(System.DateTime StartDateTime, System.Nullable<System.DateTime> EndDateTime, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PeriodCategory ScheduleType) {
            return base.Channel.GetIncidentHistoricalViewByDate(StartDateTime, EndDateTime, ScheduleType);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentHistoricalDTO[]> GetIncidentHistoricalViewByDateAsync(System.DateTime StartDateTime, System.Nullable<System.DateTime> EndDateTime, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PeriodCategory ScheduleType) {
            return base.Channel.GetIncidentHistoricalViewByDateAsync(StartDateTime, EndDateTime, ScheduleType);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentsDTO[] GetIncidentsHistoricalListByDate(System.DateTime StartDateTime, System.Nullable<System.DateTime> EndDateTime, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PeriodCategory ScheduleType) {
            return base.Channel.GetIncidentsHistoricalListByDate(StartDateTime, EndDateTime, ScheduleType);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentsDTO[]> GetIncidentsHistoricalListByDateAsync(System.DateTime StartDateTime, System.Nullable<System.DateTime> EndDateTime, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PeriodCategory ScheduleType) {
            return base.Channel.GetIncidentsHistoricalListByDateAsync(StartDateTime, EndDateTime, ScheduleType);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentsDTO GetIncidentHistoricalDetails(int IncidentId) {
            return base.Channel.GetIncidentHistoricalDetails(IncidentId);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentsDTO> GetIncidentHistoricalDetailsAsync(int IncidentId) {
            return base.Channel.GetIncidentHistoricalDetailsAsync(IncidentId);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[] GetViolationsHistorySearchByDate(System.Nullable<System.DateTime> StartDateTime, System.Nullable<System.DateTime> EndDateTime, string PlateNumber) {
            return base.Channel.GetViolationsHistorySearchByDate(StartDateTime, EndDateTime, PlateNumber);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[]> GetViolationsHistorySearchByDateAsync(System.Nullable<System.DateTime> StartDateTime, System.Nullable<System.DateTime> EndDateTime, string PlateNumber) {
            return base.Channel.GetViolationsHistorySearchByDateAsync(StartDateTime, EndDateTime, PlateNumber);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.VehicleLiveTrackingDTO GetVehicleDetailsByPlateNumber(string plateNumer) {
            return base.Channel.GetVehicleDetailsByPlateNumber(plateNumer);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.VehicleLiveTrackingDTO> GetVehicleDetailsByPlateNumberAsync(string plateNumer) {
            return base.Channel.GetVehicleDetailsByPlateNumberAsync(plateNumer);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[] GetViolationsDetailsByAsset(string serialNumber) {
            return base.Channel.GetViolationsDetailsByAsset(serialNumber);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[]> GetViolationsDetailsByAssetAsync(string serialNumber) {
            return base.Channel.GetViolationsDetailsByAssetAsync(serialNumber);
        }
        
        public int GetViolationsCountByAsset(System.Nullable<System.DateTime> StartDateTime, System.Nullable<System.DateTime> EndDateTime, string serialNumber) {
            return base.Channel.GetViolationsCountByAsset(StartDateTime, EndDateTime, serialNumber);
        }
        
        public System.Threading.Tasks.Task<int> GetViolationsCountByAssetAsync(System.Nullable<System.DateTime> StartDateTime, System.Nullable<System.DateTime> EndDateTime, string serialNumber) {
            return base.Channel.GetViolationsCountByAssetAsync(StartDateTime, EndDateTime, serialNumber);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsGroupedByLocationsDTO[] GetHistoricalViolationsListGroupedByLocation(System.Nullable<System.DateTime> StartDateTime, System.Nullable<System.DateTime> EndDateTime, System.Nullable<int> ViolationTypeId) {
            return base.Channel.GetHistoricalViolationsListGroupedByLocation(StartDateTime, EndDateTime, ViolationTypeId);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationsGroupedByLocationsDTO[]> GetHistoricalViolationsListGroupedByLocationAsync(System.Nullable<System.DateTime> StartDateTime, System.Nullable<System.DateTime> EndDateTime, System.Nullable<int> ViolationTypeId) {
            return base.Channel.GetHistoricalViolationsListGroupedByLocationAsync(StartDateTime, EndDateTime, ViolationTypeId);
        }
        
        public string[] GetViolationImageURLsById(long ViolationNotificationId) {
            return base.Channel.GetViolationImageURLsById(ViolationNotificationId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetViolationImageURLsByIdAsync(long ViolationNotificationId) {
            return base.Channel.GetViolationImageURLsByIdAsync(ViolationNotificationId);
        }
        
        public byte[][] GetViolationImagesById(long ViolationNotificationId) {
            return base.Channel.GetViolationImagesById(ViolationNotificationId);
        }
        
        public System.Threading.Tasks.Task<byte[][]> GetViolationImagesByIdAsync(long ViolationNotificationId) {
            return base.Channel.GetViolationImagesByIdAsync(ViolationNotificationId);
        }
        
        public string GetViolationVideoURLById(long ViolationNotificationId) {
            return base.Channel.GetViolationVideoURLById(ViolationNotificationId);
        }
        
        public System.Threading.Tasks.Task<string> GetViolationVideoURLByIdAsync(long ViolationNotificationId) {
            return base.Channel.GetViolationVideoURLByIdAsync(ViolationNotificationId);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationCountPerSpeedAndTime() {
            return base.Channel.GetViolationCountPerSpeedAndTime();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationCountPerSpeedAndTimeAsync() {
            return base.Channel.GetViolationCountPerSpeedAndTimeAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationPerMonthAndViolationType() {
            return base.Channel.GetViolationPerMonthAndViolationType();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationPerMonthAndViolationTypeAsync() {
            return base.Channel.GetViolationPerMonthAndViolationTypeAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationPerVehicleTypeAndDayOfWeek() {
            return base.Channel.GetViolationPerVehicleTypeAndDayOfWeek();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationPerVehicleTypeAndDayOfWeekAsync() {
            return base.Channel.GetViolationPerVehicleTypeAndDayOfWeekAsync();
        }
        
        public bool ChangeNotificationStatus(long NotificationId, int NewStatus, int UserId) {
            return base.Channel.ChangeNotificationStatus(NotificationId, NewStatus, UserId);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeNotificationStatusAsync(long NotificationId, int NewStatus, int UserId) {
            return base.Channel.ChangeNotificationStatusAsync(NotificationId, NewStatus, UserId);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[] GetLatestViolationNotification() {
            return base.Channel.GetLatestViolationNotification();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.ViolationNotificationDTO[]> GetLatestViolationNotificationAsync() {
            return base.Channel.GetLatestViolationNotificationAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentsDTO[] GetLatestIncidents() {
            return base.Channel.GetLatestIncidents();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.IncidentsDTO[]> GetLatestIncidentsAsync() {
            return base.Channel.GetLatestIncidentsAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UserUserControlDTO[] GetLatestEvents(int UserId) {
            return base.Channel.GetLatestEvents(UserId);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.UserUserControlDTO[]> GetLatestEventsAsync(int UserId) {
            return base.Channel.GetLatestEventsAsync(UserId);
        }
        
        public bool UpdateAssetValue(long AssetId, string NewValue) {
            return base.Channel.UpdateAssetValue(AssetId, NewValue);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAssetValueAsync(long AssetId, string NewValue) {
            return base.Channel.UpdateAssetValueAsync(AssetId, NewValue);
        }
        
        public bool SaveSOPNotificationLog(int sopStepId, long notificationId, System.Nullable<int> sopCommandId, int userId, string previousValue, string currentValue) {
            return base.Channel.SaveSOPNotificationLog(sopStepId, notificationId, sopCommandId, userId, previousValue, currentValue);
        }
        
        public System.Threading.Tasks.Task<bool> SaveSOPNotificationLogAsync(int sopStepId, long notificationId, System.Nullable<int> sopCommandId, int userId, string previousValue, string currentValue) {
            return base.Channel.SaveSOPNotificationLogAsync(sopStepId, notificationId, sopCommandId, userId, previousValue, currentValue);
        }
        
        public void AddTruckViolationEvent(string plateNumber, System.DateTime violationDate, double lat, double lon, string lang, string assetSerial) {
            base.Channel.AddTruckViolationEvent(plateNumber, violationDate, lat, lon, lang, assetSerial);
        }
        
        public System.Threading.Tasks.Task AddTruckViolationEventAsync(string plateNumber, System.DateTime violationDate, double lat, double lon, string lang, string assetSerial) {
            return base.Channel.AddTruckViolationEventAsync(plateNumber, violationDate, lat, lon, lang, assetSerial);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.BusinessRulesDTO[] GetAllBusinessRules(bool IsAcivatedOnly) {
            return base.Channel.GetAllBusinessRules(IsAcivatedOnly);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.BusinessRulesDTO[]> GetAllBusinessRulesAsync(bool IsAcivatedOnly) {
            return base.Channel.GetAllBusinessRulesAsync(IsAcivatedOnly);
        }
        
        public bool SaveBusinessRule(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.BusinessRulesDTO businessRule) {
            return base.Channel.SaveBusinessRule(businessRule);
        }
        
        public System.Threading.Tasks.Task<bool> SaveBusinessRuleAsync(STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.BusinessRulesDTO businessRule) {
            return base.Channel.SaveBusinessRuleAsync(businessRule);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.BusinessRulesDTO GetBusinessRuleByID(int businessRuleId) {
            return base.Channel.GetBusinessRuleByID(businessRuleId);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.BusinessRulesDTO> GetBusinessRuleByIDAsync(int businessRuleId) {
            return base.Channel.GetBusinessRuleByIDAsync(businessRuleId);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.BusinessRulePriorityDTO[] GetAllPriorities() {
            return base.Channel.GetAllPriorities();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.BusinessRulePriorityDTO[]> GetAllPrioritiesAsync() {
            return base.Channel.GetAllPrioritiesAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.OverSpeedDTO[] GetAllOverSpeed() {
            return base.Channel.GetAllOverSpeed();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.OverSpeedDTO[]> GetAllOverSpeedAsync() {
            return base.Channel.GetAllOverSpeedAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.TrafficCrossDTO[] GetAllTrafficCrossTimes() {
            return base.Channel.GetAllTrafficCrossTimes();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.TrafficCrossDTO[]> GetAllTrafficCrossTimesAsync() {
            return base.Channel.GetAllTrafficCrossTimesAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.VehicleTypeDTO[] GetAllVehicleTypes() {
            return base.Channel.GetAllVehicleTypes();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.VehicleTypeDTO[]> GetAllVehicleTypesAsync() {
            return base.Channel.GetAllVehicleTypesAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.KpiDTO[] GetViolationKPIs() {
            return base.Channel.GetViolationKPIs();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.KpiDTO[]> GetViolationKPIsAsync() {
            return base.Channel.GetViolationKPIsAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.KpiDTO[] GetAccidentKPIs() {
            return base.Channel.GetAccidentKPIs();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.KpiDTO[]> GetAccidentKPIsAsync() {
            return base.Channel.GetAccidentKPIsAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PatrolDTO[] GetAssignedPatrols(long notificationId) {
            return base.Channel.GetAssignedPatrols(notificationId);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.PatrolDTO[]> GetAssignedPatrolsAsync(long notificationId) {
            return base.Channel.GetAssignedPatrolsAsync(notificationId);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.VehicleLiveTrackingDTO[] GetAllWantedCarLiveTrack(string plateNumber, int maxHours) {
            return base.Channel.GetAllWantedCarLiveTrack(plateNumber, maxHours);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.VehicleLiveTrackingDTO[]> GetAllWantedCarLiveTrackAsync(string plateNumber, int maxHours) {
            return base.Channel.GetAllWantedCarLiveTrackAsync(plateNumber, maxHours);
        }
        
        public bool ChangePatrolActivation(int patrolId, bool isDeleted) {
            return base.Channel.ChangePatrolActivation(patrolId, isDeleted);
        }
        
        public System.Threading.Tasks.Task<bool> ChangePatrolActivationAsync(int patrolId, bool isDeleted) {
            return base.Channel.ChangePatrolActivationAsync(patrolId, isDeleted);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationTypeTrendDaysOfWeek(int startYear, int endYear) {
            return base.Channel.GetViolationTypeTrendDaysOfWeek(startYear, endYear);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationTypeTrendDaysOfWeekAsync(int startYear, int endYear) {
            return base.Channel.GetViolationTypeTrendDaysOfWeekAsync(startYear, endYear);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationTypeTrendWeekOfYear(int startYear, int endYear) {
            return base.Channel.GetViolationTypeTrendWeekOfYear(startYear, endYear);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationTypeTrendWeekOfYearAsync(int startYear, int endYear) {
            return base.Channel.GetViolationTypeTrendWeekOfYearAsync(startYear, endYear);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationTypeTrendMonthOfYear(int startYear, int endYear) {
            return base.Channel.GetViolationTypeTrendMonthOfYear(startYear, endYear);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationTypeTrendMonthOfYearAsync(int startYear, int endYear) {
            return base.Channel.GetViolationTypeTrendMonthOfYearAsync(startYear, endYear);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationTypeTrendQuarterOfYear(int startYear, int endYear) {
            return base.Channel.GetViolationTypeTrendQuarterOfYear(startYear, endYear);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationTypeTrendQuarterOfYearAsync(int startYear, int endYear) {
            return base.Channel.GetViolationTypeTrendQuarterOfYearAsync(startYear, endYear);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentTrendDaysOfWeek(int startYear, int endYear) {
            return base.Channel.GetIncidentTrendDaysOfWeek(startYear, endYear);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentTrendDaysOfWeekAsync(int startYear, int endYear) {
            return base.Channel.GetIncidentTrendDaysOfWeekAsync(startYear, endYear);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentTrendWeekOfYear(int startYear, int endYear) {
            return base.Channel.GetIncidentTrendWeekOfYear(startYear, endYear);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentTrendWeekOfYearAsync(int startYear, int endYear) {
            return base.Channel.GetIncidentTrendWeekOfYearAsync(startYear, endYear);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentTrendMonthOfYear(int startYear, int endYear) {
            return base.Channel.GetIncidentTrendMonthOfYear(startYear, endYear);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentTrendMonthOfYearAsync(int startYear, int endYear) {
            return base.Channel.GetIncidentTrendMonthOfYearAsync(startYear, endYear);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentTrendQuarterOfYear(int startYear, int endYear) {
            return base.Channel.GetIncidentTrendQuarterOfYear(startYear, endYear);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentTrendQuarterOfYearAsync(int startYear, int endYear) {
            return base.Channel.GetIncidentTrendQuarterOfYearAsync(startYear, endYear);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsTrendDaysOfWeek(int startYear, int endYear) {
            return base.Channel.GetTruckViolationsTrendDaysOfWeek(startYear, endYear);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsTrendDaysOfWeekAsync(int startYear, int endYear) {
            return base.Channel.GetTruckViolationsTrendDaysOfWeekAsync(startYear, endYear);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsTrendWeekOfYear(int startYear, int endYear) {
            return base.Channel.GetTruckViolationsTrendWeekOfYear(startYear, endYear);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsTrendWeekOfYearAsync(int startYear, int endYear) {
            return base.Channel.GetTruckViolationsTrendWeekOfYearAsync(startYear, endYear);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsTrendMonthOfYear(int startYear, int endYear) {
            return base.Channel.GetTruckViolationsTrendMonthOfYear(startYear, endYear);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsTrendMonthOfYearAsync(int startYear, int endYear) {
            return base.Channel.GetTruckViolationsTrendMonthOfYearAsync(startYear, endYear);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsTrendQuarterOfYear(int startYear, int endYear) {
            return base.Channel.GetTruckViolationsTrendQuarterOfYear(startYear, endYear);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsTrendQuarterOfYearAsync(int startYear, int endYear) {
            return base.Channel.GetTruckViolationsTrendQuarterOfYearAsync(startYear, endYear);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationTrendDaysOfWeek(int startYear, int endYear) {
            return base.Channel.GetDangerousViolationTrendDaysOfWeek(startYear, endYear);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationTrendDaysOfWeekAsync(int startYear, int endYear) {
            return base.Channel.GetDangerousViolationTrendDaysOfWeekAsync(startYear, endYear);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationTrendWeekOfYear(int startYear, int endYear) {
            return base.Channel.GetDangerousViolationTrendWeekOfYear(startYear, endYear);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationTrendWeekOfYearAsync(int startYear, int endYear) {
            return base.Channel.GetDangerousViolationTrendWeekOfYearAsync(startYear, endYear);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationTrendMonthOfYear(int startYear, int endYear) {
            return base.Channel.GetDangerousViolationTrendMonthOfYear(startYear, endYear);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationTrendMonthOfYearAsync(int startYear, int endYear) {
            return base.Channel.GetDangerousViolationTrendMonthOfYearAsync(startYear, endYear);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationTrendQuarterOfYear(int startYear, int endYear) {
            return base.Channel.GetDangerousViolationTrendQuarterOfYear(startYear, endYear);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationTrendQuarterOfYearAsync(int startYear, int endYear) {
            return base.Channel.GetDangerousViolationTrendQuarterOfYearAsync(startYear, endYear);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationRegionYearly() {
            return base.Channel.GetTruckViolationRegionYearly();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationRegionYearlyAsync() {
            return base.Channel.GetTruckViolationRegionYearlyAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationRegionMonthly(int year) {
            return base.Channel.GetTruckViolationRegionMonthly(year);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationRegionMonthlyAsync(int year) {
            return base.Channel.GetTruckViolationRegionMonthlyAsync(year);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationRegionWeekly(int year) {
            return base.Channel.GetTruckViolationRegionWeekly(year);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationRegionWeeklyAsync(int year) {
            return base.Channel.GetTruckViolationRegionWeeklyAsync(year);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationRegionDaily(System.DateTime WeekStartDate) {
            return base.Channel.GetTruckViolationRegionDaily(WeekStartDate);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationRegionDailyAsync(System.DateTime WeekStartDate) {
            return base.Channel.GetTruckViolationRegionDailyAsync(WeekStartDate);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationRegionWiseYearly() {
            return base.Channel.GetDangerousViolationRegionWiseYearly();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationRegionWiseYearlyAsync() {
            return base.Channel.GetDangerousViolationRegionWiseYearlyAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationRegionWiseDaily(System.DateTime WeekStartDate, System.DateTime WeekEndDate) {
            return base.Channel.GetDangerousViolationRegionWiseDaily(WeekStartDate, WeekEndDate);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationRegionWiseDailyAsync(System.DateTime WeekStartDate, System.DateTime WeekEndDate) {
            return base.Channel.GetDangerousViolationRegionWiseDailyAsync(WeekStartDate, WeekEndDate);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationRegionWiseMonthly(int year) {
            return base.Channel.GetDangerousViolationRegionWiseMonthly(year);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationRegionWiseMonthlyAsync(int year) {
            return base.Channel.GetDangerousViolationRegionWiseMonthlyAsync(year);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetDangerousViolationRegionWiseWeekly(int year) {
            return base.Channel.GetDangerousViolationRegionWiseWeekly(year);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetDangerousViolationRegionWiseWeeklyAsync(int year) {
            return base.Channel.GetDangerousViolationRegionWiseWeeklyAsync(year);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsRegionWiseYearly() {
            return base.Channel.GetIncidentsRegionWiseYearly();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsRegionWiseYearlyAsync() {
            return base.Channel.GetIncidentsRegionWiseYearlyAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsRegionWiseDaily(System.DateTime WeekStartDate, System.DateTime WeekEndDate) {
            return base.Channel.GetIncidentsRegionWiseDaily(WeekStartDate, WeekEndDate);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsRegionWiseDailyAsync(System.DateTime WeekStartDate, System.DateTime WeekEndDate) {
            return base.Channel.GetIncidentsRegionWiseDailyAsync(WeekStartDate, WeekEndDate);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsRegionWiseMonthly(int year) {
            return base.Channel.GetIncidentsRegionWiseMonthly(year);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsRegionWiseMonthlyAsync(int year) {
            return base.Channel.GetIncidentsRegionWiseMonthlyAsync(year);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetIncidentsRegionWiseWeekly(int year) {
            return base.Channel.GetIncidentsRegionWiseWeekly(year);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetIncidentsRegionWiseWeeklyAsync(int year) {
            return base.Channel.GetIncidentsRegionWiseWeeklyAsync(year);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsRegionWiseYearly() {
            return base.Channel.GetViolationsRegionWiseYearly();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsRegionWiseYearlyAsync() {
            return base.Channel.GetViolationsRegionWiseYearlyAsync();
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsRegionWiseDaily(System.DateTime WeekStartDate, System.DateTime WeekEndDate) {
            return base.Channel.GetViolationsRegionWiseDaily(WeekStartDate, WeekEndDate);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsRegionWiseDailyAsync(System.DateTime WeekStartDate, System.DateTime WeekEndDate) {
            return base.Channel.GetViolationsRegionWiseDailyAsync(WeekStartDate, WeekEndDate);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsRegionWiseMonthly(int year) {
            return base.Channel.GetViolationsRegionWiseMonthly(year);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsRegionWiseMonthlyAsync(int year) {
            return base.Channel.GetViolationsRegionWiseMonthlyAsync(year);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetViolationsRegionWiseWeekly(int year) {
            return base.Channel.GetViolationsRegionWiseWeekly(year);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetViolationsRegionWiseWeeklyAsync(int year) {
            return base.Channel.GetViolationsRegionWiseWeeklyAsync(year);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsRegionComparisonYearly(int startYear, int endYear) {
            return base.Channel.GetTruckViolationsRegionComparisonYearly(startYear, endYear);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsRegionComparisonYearlyAsync(int startYear, int endYear) {
            return base.Channel.GetTruckViolationsRegionComparisonYearlyAsync(startYear, endYear);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsRegionComparisonMonthly(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth) {
            return base.Channel.GetTruckViolationsRegionComparisonMonthly(year, startMonth, endMonth);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsRegionComparisonMonthlyAsync(int year, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear startMonth, STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.MonthOfYear endMonth) {
            return base.Channel.GetTruckViolationsRegionComparisonMonthlyAsync(year, startMonth, endMonth);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsRegionComparisonWeekly(System.DateTime firstWeek, System.DateTime secondWeek) {
            return base.Channel.GetTruckViolationsRegionComparisonWeekly(firstWeek, secondWeek);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsRegionComparisonWeeklyAsync(System.DateTime firstWeek, System.DateTime secondWeek) {
            return base.Channel.GetTruckViolationsRegionComparisonWeeklyAsync(firstWeek, secondWeek);
        }
        
        public STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[] GetTruckViolationsRegionComparisonDaily(System.DateTime firstDay, System.DateTime secondDay) {
            return base.Channel.GetTruckViolationsRegionComparisonDaily(firstDay, secondDay);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.WPFControlLibrary.MapControl.ServiceLayerReference.CubeDTO[]> GetTruckViolationsRegionComparisonDailyAsync(System.DateTime firstDay, System.DateTime secondDay) {
            return base.Channel.GetTruckViolationsRegionComparisonDailyAsync(firstDay, secondDay);
        }
    }
}
