//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace STC.Projects.WPFControlLibrary.SOPBox.CrispService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CrispService.ICrsipServices")]
    public interface ICrsipServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/AddSession", ReplyAction="http://tempuri.org/ICrsipServices/AddSessionResponse")]
        bool AddSession(string sessionName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/AddSession", ReplyAction="http://tempuri.org/ICrsipServices/AddSessionResponse")]
        System.Threading.Tasks.Task<bool> AddSessionAsync(string sessionName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/RemoveSession", ReplyAction="http://tempuri.org/ICrsipServices/RemoveSessionResponse")]
        bool RemoveSession(string sessionName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/RemoveSession", ReplyAction="http://tempuri.org/ICrsipServices/RemoveSessionResponse")]
        System.Threading.Tasks.Task<bool> RemoveSessionAsync(string sessionName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/ParseNode", ReplyAction="http://tempuri.org/ICrsipServices/ParseNodeResponse")]
        bool ParseNode(string sessionName, string nodesXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/ParseNode", ReplyAction="http://tempuri.org/ICrsipServices/ParseNodeResponse")]
        System.Threading.Tasks.Task<bool> ParseNodeAsync(string sessionName, string nodesXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/ParseCars", ReplyAction="http://tempuri.org/ICrsipServices/ParseCarsResponse")]
        bool ParseCars(string sessionName, string carsXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/ParseCars", ReplyAction="http://tempuri.org/ICrsipServices/ParseCarsResponse")]
        System.Threading.Tasks.Task<bool> ParseCarsAsync(string sessionName, string carsXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/RecommendCar", ReplyAction="http://tempuri.org/ICrsipServices/RecommendCarResponse")]
        STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO RecommendCar(double lat, double lon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/RecommendCar", ReplyAction="http://tempuri.org/ICrsipServices/RecommendCarResponse")]
        System.Threading.Tasks.Task<STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO> RecommendCarAsync(double lat, double lon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/PositionsCars", ReplyAction="http://tempuri.org/ICrsipServices/PositionsCarsResponse")]
        STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO[] PositionsCars();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/PositionsCars", ReplyAction="http://tempuri.org/ICrsipServices/PositionsCarsResponse")]
        System.Threading.Tasks.Task<STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO[]> PositionsCarsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/HandleSessions", ReplyAction="http://tempuri.org/ICrsipServices/HandleSessionsResponse")]
        void HandleSessions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/HandleSessions", ReplyAction="http://tempuri.org/ICrsipServices/HandleSessionsResponse")]
        System.Threading.Tasks.Task HandleSessionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/HandleCars", ReplyAction="http://tempuri.org/ICrsipServices/HandleCarsResponse")]
        void HandleCars(STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO[] availableCars);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/HandleCars", ReplyAction="http://tempuri.org/ICrsipServices/HandleCarsResponse")]
        System.Threading.Tasks.Task HandleCarsAsync(STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO[] availableCars);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/PrepareCars", ReplyAction="http://tempuri.org/ICrsipServices/PrepareCarsResponse")]
        void PrepareCars();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/PrepareCars", ReplyAction="http://tempuri.org/ICrsipServices/PrepareCarsResponse")]
        System.Threading.Tasks.Task PrepareCarsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/SetMaxAllowedTime", ReplyAction="http://tempuri.org/ICrsipServices/SetMaxAllowedTimeResponse")]
        void SetMaxAllowedTime(int maxAllowedTimeInMins);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/SetMaxAllowedTime", ReplyAction="http://tempuri.org/ICrsipServices/SetMaxAllowedTimeResponse")]
        System.Threading.Tasks.Task SetMaxAllowedTimeAsync(int maxAllowedTimeInMins);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/AddPatrol", ReplyAction="http://tempuri.org/ICrsipServices/AddPatrolResponse")]
        bool AddPatrol(string patrolCode, string patrolPlateNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/AddPatrol", ReplyAction="http://tempuri.org/ICrsipServices/AddPatrolResponse")]
        System.Threading.Tasks.Task<bool> AddPatrolAsync(string patrolCode, string patrolPlateNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/RemovePatrol", ReplyAction="http://tempuri.org/ICrsipServices/RemovePatrolResponse")]
        bool RemovePatrol(int patrolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/RemovePatrol", ReplyAction="http://tempuri.org/ICrsipServices/RemovePatrolResponse")]
        System.Threading.Tasks.Task<bool> RemovePatrolAsync(int patrolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/TestCarParse", ReplyAction="http://tempuri.org/ICrsipServices/TestCarParseResponse")]
        bool TestCarParse(string sessionName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/TestCarParse", ReplyAction="http://tempuri.org/ICrsipServices/TestCarParseResponse")]
        System.Threading.Tasks.Task<bool> TestCarParseAsync(string sessionName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/GetPatrolsETA", ReplyAction="http://tempuri.org/ICrsipServices/GetPatrolsETAResponse")]
        STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO[] GetPatrolsETA(double latitude, double longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/GetPatrolsETA", ReplyAction="http://tempuri.org/ICrsipServices/GetPatrolsETAResponse")]
        System.Threading.Tasks.Task<STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO[]> GetPatrolsETAAsync(double latitude, double longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/getMaxAllowedTime", ReplyAction="http://tempuri.org/ICrsipServices/getMaxAllowedTimeResponse")]
        int getMaxAllowedTime();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/getMaxAllowedTime", ReplyAction="http://tempuri.org/ICrsipServices/getMaxAllowedTimeResponse")]
        System.Threading.Tasks.Task<int> getMaxAllowedTimeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/GetPatrolsETAs", ReplyAction="http://tempuri.org/ICrsipServices/GetPatrolsETAsResponse")]
        STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO[] GetPatrolsETAs(double latitude, double longitude, STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO[] patrols);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICrsipServices/GetPatrolsETAs", ReplyAction="http://tempuri.org/ICrsipServices/GetPatrolsETAsResponse")]
        System.Threading.Tasks.Task<STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO[]> GetPatrolsETAsAsync(double latitude, double longitude, STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO[] patrols);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICrsipServicesChannel : STC.Projects.WPFControlLibrary.SOPBox.CrispService.ICrsipServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CrsipServicesClient : System.ServiceModel.ClientBase<STC.Projects.WPFControlLibrary.SOPBox.CrispService.ICrsipServices>, STC.Projects.WPFControlLibrary.SOPBox.CrispService.ICrsipServices {
        
        public CrsipServicesClient() {
        }
        
        public CrsipServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CrsipServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CrsipServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CrsipServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddSession(string sessionName) {
            return base.Channel.AddSession(sessionName);
        }
        
        public System.Threading.Tasks.Task<bool> AddSessionAsync(string sessionName) {
            return base.Channel.AddSessionAsync(sessionName);
        }
        
        public bool RemoveSession(string sessionName) {
            return base.Channel.RemoveSession(sessionName);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveSessionAsync(string sessionName) {
            return base.Channel.RemoveSessionAsync(sessionName);
        }
        
        public bool ParseNode(string sessionName, string nodesXml) {
            return base.Channel.ParseNode(sessionName, nodesXml);
        }
        
        public System.Threading.Tasks.Task<bool> ParseNodeAsync(string sessionName, string nodesXml) {
            return base.Channel.ParseNodeAsync(sessionName, nodesXml);
        }
        
        public bool ParseCars(string sessionName, string carsXml) {
            return base.Channel.ParseCars(sessionName, carsXml);
        }
        
        public System.Threading.Tasks.Task<bool> ParseCarsAsync(string sessionName, string carsXml) {
            return base.Channel.ParseCarsAsync(sessionName, carsXml);
        }
        
        public STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO RecommendCar(double lat, double lon) {
            return base.Channel.RecommendCar(lat, lon);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO> RecommendCarAsync(double lat, double lon) {
            return base.Channel.RecommendCarAsync(lat, lon);
        }
        
        public STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO[] PositionsCars() {
            return base.Channel.PositionsCars();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO[]> PositionsCarsAsync() {
            return base.Channel.PositionsCarsAsync();
        }
        
        public void HandleSessions() {
            base.Channel.HandleSessions();
        }
        
        public System.Threading.Tasks.Task HandleSessionsAsync() {
            return base.Channel.HandleSessionsAsync();
        }
        
        public void HandleCars(STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO[] availableCars) {
            base.Channel.HandleCars(availableCars);
        }
        
        public System.Threading.Tasks.Task HandleCarsAsync(STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO[] availableCars) {
            return base.Channel.HandleCarsAsync(availableCars);
        }
        
        public void PrepareCars() {
            base.Channel.PrepareCars();
        }
        
        public System.Threading.Tasks.Task PrepareCarsAsync() {
            return base.Channel.PrepareCarsAsync();
        }
        
        public void SetMaxAllowedTime(int maxAllowedTimeInMins) {
            base.Channel.SetMaxAllowedTime(maxAllowedTimeInMins);
        }
        
        public System.Threading.Tasks.Task SetMaxAllowedTimeAsync(int maxAllowedTimeInMins) {
            return base.Channel.SetMaxAllowedTimeAsync(maxAllowedTimeInMins);
        }
        
        public bool AddPatrol(string patrolCode, string patrolPlateNumber) {
            return base.Channel.AddPatrol(patrolCode, patrolPlateNumber);
        }
        
        public System.Threading.Tasks.Task<bool> AddPatrolAsync(string patrolCode, string patrolPlateNumber) {
            return base.Channel.AddPatrolAsync(patrolCode, patrolPlateNumber);
        }
        
        public bool RemovePatrol(int patrolId) {
            return base.Channel.RemovePatrol(patrolId);
        }
        
        public System.Threading.Tasks.Task<bool> RemovePatrolAsync(int patrolId) {
            return base.Channel.RemovePatrolAsync(patrolId);
        }
        
        public bool TestCarParse(string sessionName) {
            return base.Channel.TestCarParse(sessionName);
        }
        
        public System.Threading.Tasks.Task<bool> TestCarParseAsync(string sessionName) {
            return base.Channel.TestCarParseAsync(sessionName);
        }
        
        public STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO[] GetPatrolsETA(double latitude, double longitude) {
            return base.Channel.GetPatrolsETA(latitude, longitude);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO[]> GetPatrolsETAAsync(double latitude, double longitude) {
            return base.Channel.GetPatrolsETAAsync(latitude, longitude);
        }
        
        public int getMaxAllowedTime() {
            return base.Channel.getMaxAllowedTime();
        }
        
        public System.Threading.Tasks.Task<int> getMaxAllowedTimeAsync() {
            return base.Channel.getMaxAllowedTimeAsync();
        }
        
        public STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO[] GetPatrolsETAs(double latitude, double longitude, STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO[] patrols) {
            return base.Channel.GetPatrolsETAs(latitude, longitude, patrols);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO[]> GetPatrolsETAsAsync(double latitude, double longitude, STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO[] patrols) {
            return base.Channel.GetPatrolsETAsAsync(latitude, longitude, patrols);
        }
    }
}
