//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace STC.Projects.WPFControlLibrary.SOPBox.TFMServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TFMServiceReference.ITFMIntegrationService")]
    public interface ITFMIntegrationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITFMIntegrationService/AddDuty", ReplyAction="http://tempuri.org/ITFMIntegrationService/AddDutyResponse")]
        long AddDuty(System.Guid PatrolOrgId, string MessageContent, System.DateTime DutyDateTime, double Latitude, double Longitude, long NotificationId, int PatrolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITFMIntegrationService/AddDuty", ReplyAction="http://tempuri.org/ITFMIntegrationService/AddDutyResponse")]
        System.Threading.Tasks.Task<long> AddDutyAsync(System.Guid PatrolOrgId, string MessageContent, System.DateTime DutyDateTime, double Latitude, double Longitude, long NotificationId, int PatrolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITFMIntegrationService/AddIncident", ReplyAction="http://tempuri.org/ITFMIntegrationService/AddIncidentResponse")]
        bool AddIncident(System.Guid PatrolOrgId, System.DateTime IncidentDateTime, double Latitude, double Longitude, string MessageContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITFMIntegrationService/AddIncident", ReplyAction="http://tempuri.org/ITFMIntegrationService/AddIncidentResponse")]
        System.Threading.Tasks.Task<bool> AddIncidentAsync(System.Guid PatrolOrgId, System.DateTime IncidentDateTime, double Latitude, double Longitude, string MessageContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITFMIntegrationService/GetPatrolsLocations", ReplyAction="http://tempuri.org/ITFMIntegrationService/GetPatrolsLocationsResponse")]
        STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO[] GetPatrolsLocations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITFMIntegrationService/GetPatrolsLocations", ReplyAction="http://tempuri.org/ITFMIntegrationService/GetPatrolsLocationsResponse")]
        System.Threading.Tasks.Task<STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO[]> GetPatrolsLocationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITFMIntegrationService/UpdatePatrolLocations", ReplyAction="http://tempuri.org/ITFMIntegrationService/UpdatePatrolLocationsResponse")]
        bool UpdatePatrolLocations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITFMIntegrationService/UpdatePatrolLocations", ReplyAction="http://tempuri.org/ITFMIntegrationService/UpdatePatrolLocationsResponse")]
        System.Threading.Tasks.Task<bool> UpdatePatrolLocationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITFMIntegrationService/GetPatrolDetails", ReplyAction="http://tempuri.org/ITFMIntegrationService/GetPatrolDetailsResponse")]
        STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO GetPatrolDetails(int PatrolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITFMIntegrationService/GetPatrolDetails", ReplyAction="http://tempuri.org/ITFMIntegrationService/GetPatrolDetailsResponse")]
        System.Threading.Tasks.Task<STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO> GetPatrolDetailsAsync(int PatrolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITFMIntegrationService/UpdatePatrolCurrentTask", ReplyAction="http://tempuri.org/ITFMIntegrationService/UpdatePatrolCurrentTaskResponse")]
        bool UpdatePatrolCurrentTask(System.Guid patrolOriginalId, long taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITFMIntegrationService/UpdatePatrolCurrentTask", ReplyAction="http://tempuri.org/ITFMIntegrationService/UpdatePatrolCurrentTaskResponse")]
        System.Threading.Tasks.Task<bool> UpdatePatrolCurrentTaskAsync(System.Guid patrolOriginalId, long taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITFMIntegrationService/GetTaskImagesURLs", ReplyAction="http://tempuri.org/ITFMIntegrationService/GetTaskImagesURLsResponse")]
        string[] GetTaskImagesURLs(long taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITFMIntegrationService/GetTaskImagesURLs", ReplyAction="http://tempuri.org/ITFMIntegrationService/GetTaskImagesURLsResponse")]
        System.Threading.Tasks.Task<string[]> GetTaskImagesURLsAsync(long taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITFMIntegrationService/GetTaskVideosURLs", ReplyAction="http://tempuri.org/ITFMIntegrationService/GetTaskVideosURLsResponse")]
        string[] GetTaskVideosURLs(long taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITFMIntegrationService/GetTaskVideosURLs", ReplyAction="http://tempuri.org/ITFMIntegrationService/GetTaskVideosURLsResponse")]
        System.Threading.Tasks.Task<string[]> GetTaskVideosURLsAsync(long taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITFMIntegrationService/GetTaskVideosURLsTest", ReplyAction="http://tempuri.org/ITFMIntegrationService/GetTaskVideosURLsTestResponse")]
        string[] GetTaskVideosURLsTest(long taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITFMIntegrationService/GetTaskVideosURLsTest", ReplyAction="http://tempuri.org/ITFMIntegrationService/GetTaskVideosURLsTestResponse")]
        System.Threading.Tasks.Task<string[]> GetTaskVideosURLsTestAsync(long taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITFMIntegrationService/GetPatrolDetailsFromTFM", ReplyAction="http://tempuri.org/ITFMIntegrationService/GetPatrolDetailsFromTFMResponse")]
        STC.Projects.ClassLibrary.DTO.PatrolOfficersDetailsDTO GetPatrolDetailsFromTFM(System.Guid patrolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITFMIntegrationService/GetPatrolDetailsFromTFM", ReplyAction="http://tempuri.org/ITFMIntegrationService/GetPatrolDetailsFromTFMResponse")]
        System.Threading.Tasks.Task<STC.Projects.ClassLibrary.DTO.PatrolOfficersDetailsDTO> GetPatrolDetailsFromTFMAsync(System.Guid patrolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITFMIntegrationService/ValidateBeforeAssignPatrol", ReplyAction="http://tempuri.org/ITFMIntegrationService/ValidateBeforeAssignPatrolResponse")]
        bool ValidateBeforeAssignPatrol(long notificationId, long patrolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITFMIntegrationService/ValidateBeforeAssignPatrol", ReplyAction="http://tempuri.org/ITFMIntegrationService/ValidateBeforeAssignPatrolResponse")]
        System.Threading.Tasks.Task<bool> ValidateBeforeAssignPatrolAsync(long notificationId, long patrolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITFMIntegrationService/IsPatrolAvailable", ReplyAction="http://tempuri.org/ITFMIntegrationService/IsPatrolAvailableResponse")]
        bool IsPatrolAvailable(System.Guid patrolOriginalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITFMIntegrationService/IsPatrolAvailable", ReplyAction="http://tempuri.org/ITFMIntegrationService/IsPatrolAvailableResponse")]
        System.Threading.Tasks.Task<bool> IsPatrolAvailableAsync(System.Guid patrolOriginalId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITFMIntegrationServiceChannel : STC.Projects.WPFControlLibrary.SOPBox.TFMServiceReference.ITFMIntegrationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TFMIntegrationServiceClient : System.ServiceModel.ClientBase<STC.Projects.WPFControlLibrary.SOPBox.TFMServiceReference.ITFMIntegrationService>, STC.Projects.WPFControlLibrary.SOPBox.TFMServiceReference.ITFMIntegrationService {
        
        public TFMIntegrationServiceClient() {
        }
        
        public TFMIntegrationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TFMIntegrationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TFMIntegrationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TFMIntegrationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public long AddDuty(System.Guid PatrolOrgId, string MessageContent, System.DateTime DutyDateTime, double Latitude, double Longitude, long NotificationId, int PatrolId) {
            return base.Channel.AddDuty(PatrolOrgId, MessageContent, DutyDateTime, Latitude, Longitude, NotificationId, PatrolId);
        }
        
        public System.Threading.Tasks.Task<long> AddDutyAsync(System.Guid PatrolOrgId, string MessageContent, System.DateTime DutyDateTime, double Latitude, double Longitude, long NotificationId, int PatrolId) {
            return base.Channel.AddDutyAsync(PatrolOrgId, MessageContent, DutyDateTime, Latitude, Longitude, NotificationId, PatrolId);
        }
        
        public bool AddIncident(System.Guid PatrolOrgId, System.DateTime IncidentDateTime, double Latitude, double Longitude, string MessageContent) {
            return base.Channel.AddIncident(PatrolOrgId, IncidentDateTime, Latitude, Longitude, MessageContent);
        }
        
        public System.Threading.Tasks.Task<bool> AddIncidentAsync(System.Guid PatrolOrgId, System.DateTime IncidentDateTime, double Latitude, double Longitude, string MessageContent) {
            return base.Channel.AddIncidentAsync(PatrolOrgId, IncidentDateTime, Latitude, Longitude, MessageContent);
        }
        
        public STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO[] GetPatrolsLocations() {
            return base.Channel.GetPatrolsLocations();
        }
        
        public System.Threading.Tasks.Task<STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO[]> GetPatrolsLocationsAsync() {
            return base.Channel.GetPatrolsLocationsAsync();
        }
        
        public bool UpdatePatrolLocations() {
            return base.Channel.UpdatePatrolLocations();
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePatrolLocationsAsync() {
            return base.Channel.UpdatePatrolLocationsAsync();
        }
        
        public STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO GetPatrolDetails(int PatrolId) {
            return base.Channel.GetPatrolDetails(PatrolId);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.ClassLibrary.DTO.PatrolLastLocationDTO> GetPatrolDetailsAsync(int PatrolId) {
            return base.Channel.GetPatrolDetailsAsync(PatrolId);
        }
        
        public bool UpdatePatrolCurrentTask(System.Guid patrolOriginalId, long taskId) {
            return base.Channel.UpdatePatrolCurrentTask(patrolOriginalId, taskId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePatrolCurrentTaskAsync(System.Guid patrolOriginalId, long taskId) {
            return base.Channel.UpdatePatrolCurrentTaskAsync(patrolOriginalId, taskId);
        }
        
        public string[] GetTaskImagesURLs(long taskId) {
            return base.Channel.GetTaskImagesURLs(taskId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetTaskImagesURLsAsync(long taskId) {
            return base.Channel.GetTaskImagesURLsAsync(taskId);
        }
        
        public string[] GetTaskVideosURLs(long taskId) {
            return base.Channel.GetTaskVideosURLs(taskId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetTaskVideosURLsAsync(long taskId) {
            return base.Channel.GetTaskVideosURLsAsync(taskId);
        }
        
        public string[] GetTaskVideosURLsTest(long taskId) {
            return base.Channel.GetTaskVideosURLsTest(taskId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetTaskVideosURLsTestAsync(long taskId) {
            return base.Channel.GetTaskVideosURLsTestAsync(taskId);
        }
        
        public STC.Projects.ClassLibrary.DTO.PatrolOfficersDetailsDTO GetPatrolDetailsFromTFM(System.Guid patrolId) {
            return base.Channel.GetPatrolDetailsFromTFM(patrolId);
        }
        
        public System.Threading.Tasks.Task<STC.Projects.ClassLibrary.DTO.PatrolOfficersDetailsDTO> GetPatrolDetailsFromTFMAsync(System.Guid patrolId) {
            return base.Channel.GetPatrolDetailsFromTFMAsync(patrolId);
        }
        
        public bool ValidateBeforeAssignPatrol(long notificationId, long patrolId) {
            return base.Channel.ValidateBeforeAssignPatrol(notificationId, patrolId);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateBeforeAssignPatrolAsync(long notificationId, long patrolId) {
            return base.Channel.ValidateBeforeAssignPatrolAsync(notificationId, patrolId);
        }
        
        public bool IsPatrolAvailable(System.Guid patrolOriginalId) {
            return base.Channel.IsPatrolAvailable(patrolOriginalId);
        }
        
        public System.Threading.Tasks.Task<bool> IsPatrolAvailableAsync(System.Guid patrolOriginalId) {
            return base.Channel.IsPatrolAvailableAsync(patrolOriginalId);
        }
    }
}
